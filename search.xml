<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用 Hexo 免费搭建属于自己的个人博客</title>
    <url>/2017/05/03/Hexo/201705031747/</url>
    <content><![CDATA[<blockquote>
<p>有人可能会问有了 <code>简书</code> 为什么还需要 <code>博客</code> ？身为一个 <code>程序猿</code> 怎么能没有一个自己的 <code>博客</code> 呢！虽然有了 <code>简书</code>，但是 <code>博客</code> 不受任何第三方管理，并且还能自定义成自己喜欢的界面，下面就开始讲一下搭建的方法。</p>
</blockquote>
<a id="more"></a>

<hr>
<p>  <code>Hexo</code> 是一款基于 <code>Node.js</code> 的博客框架，应该是目前最流行的博客框架了，使用起来比较简单，以下是 <a href="https://karise.cn/">我的博客</a> 页面：</p>
<p><img data-src="https://file.karise.cn/blog/57364951-bc617180-71b6-11e9-936c-917c25407c8d.png" alt="我的博客"></p>
<p><img data-src="https://file.karise.cn/blog/57364982-cdaa7e00-71b6-11e9-9d1f-b3d80e154c99.png" alt="我的博客"></p>
<h2 id="安装搭建博客必须的环境"><a href="#安装搭建博客必须的环境" class="headerlink" title="安装搭建博客必须的环境"></a>安装搭建博客必须的环境</h2><h3 id="1-安装-Git"><a href="#1-安装-Git" class="headerlink" title="1. 安装 Git"></a>1. 安装 Git</h3><p>这里就不说怎么安装了，相信会看这篇文章的一般都已经装了。</p>
<h3 id="2-申请-GitHub-账号"><a href="#2-申请-GitHub-账号" class="headerlink" title="2. 申请 GitHub 账号"></a>2. 申请 GitHub 账号</h3><p><code>博客</code> 的 <code>远程创库</code>、<code>域名</code>、<code>服务器</code> 等都和 <a href="https://github.com/">GitHub</a> 有关，这个必须要。</p>
<h3 id="3-安装-Node-js"><a href="#3-安装-Node-js" class="headerlink" title="3. 安装 Node.js"></a>3. 安装 Node.js</h3><p>前往 <a href="https://nodejs.org/">Node.js 官网</a> 下载最新版本的安装包安装即可。</p>
<p><img data-src="https://file.karise.cn/blog/57365028-e2871180-71b6-11e9-9592-afe2459b2a0e.png" alt="安装 Node.js"></p>
<h3 id="4-安装-Hexo"><a href="#4-安装-Hexo" class="headerlink" title="4. 安装 Hexo"></a>4. 安装 Hexo</h3><p>打开终端，输入以下命令安装 <code>Hexo</code> ，安装时间可能有点长，要多等一下。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<p>如果出现以下报错：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Error: EACCES: permission denied, mkdir <span class="string">&#x27;/usr/local/lib/node_modules/hexo-cli&#x27;</span></span><br></pre></td></tr></table></figure>

<p>执行以下命令后，重新安装即可：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo chown -R $(whoami) $(npm config get prefix)/&#123;lib/node_modules,bin,share&#125; <span class="comment">#修改权限范围</span></span><br></pre></td></tr></table></figure>

<h2 id="开始搭建博客"><a href="#开始搭建博客" class="headerlink" title="开始搭建博客"></a>开始搭建博客</h2><p>以上环境必须全部安装完成后，才能开始搭建 <code>博客</code>。</p>
<h3 id="1-创建-GitHub-仓库"><a href="#1-创建-GitHub-仓库" class="headerlink" title="1. 创建 GitHub 仓库"></a>1. 创建 GitHub 仓库</h3><p>打开 <a href="https://github.com/">GitHub</a> 创建一个仓库，<code>Repository name</code> 为 <code>xxx.github.io</code>，<code>xxx</code> 处就是你 <code>GitHub</code> 的用户名，也就是前面 <code>Owner</code> 处显示的名字，命名必须这样，不能更改，这个仓库的名字也会是 <code>博客</code> 搭建完成后的域名。</p>
<p><img data-src="https://file.karise.cn/blog/57365059-f2065a80-71b6-11e9-92f1-1f674f564e78.png" alt="创建 GitHub 仓库"></p>
<h3 id="2-初始化-Hexo-博客"><a href="#2-初始化-Hexo-博客" class="headerlink" title="2. 初始化 Hexo 博客"></a>2. 初始化 Hexo 博客</h3><p>打开终端，执行以下命令初始化 <code>博客</code>，初始化完成后，你的系统根目录中会多一个名为 <code>Blog</code> 的文件夹，<code>Blog</code> 也可以更改成自己喜欢的名字，初始化时间也比较久，耐心等一下。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo init Blog</span><br></pre></td></tr></table></figure>

<h3 id="3-下载博客主题"><a href="#3-下载博客主题" class="headerlink" title="3. 下载博客主题"></a>3. 下载博客主题</h3><ul>
<li><p><code>博客</code> 初始化完成以后，会有一个自带的 <code>博客主题</code> ，在 <code>Blog / themes </code> 文件夹下，但是比较丑，你可以下载一个自己喜欢的 <code>博客主题</code> 。</p>
</li>
<li><p>这里是 <code>博客主题</code> 的 <a href="https://hexo.io/themes/">下载地址</a> ，只需要到主题对应的 <code>GitHub</code> 仓库将主题 <code>clone</code> 下来即可，这是我使用的主题 <a href="https://github.com/monniya/hexo-theme-new-vno">下载地址</a> 。</p>
</li>
<li><p><code>clone</code> 完成后，将主题文件夹复制到 <code>Blog</code> 文件夹下的 <code>themes</code> 文件夹中。</p>
</li>
</ul>
<h3 id="4-修改博客配置文件"><a href="#4-修改博客配置文件" class="headerlink" title="4. 修改博客配置文件"></a>4. 修改博客配置文件</h3><ul>
<li><p>打开 <code>Blog</code> 文件夹下的 <code>_config.yml</code> 文件，修改其中的配置。</p>
</li>
<li><p>下面把几个必须修改的配置列出来按需求修改即可，配置的键值之间一定要有空格，否则会报错，想了解更多配置点击 <a href="https://hexo.io/zh-cn/docs/configuration.html">这里</a> 。</p>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Karise</span>  <span class="string">//博客的标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">个人博客</span> <span class="string">//博客的副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">将来的你</span> <span class="string">一定会感激现在拼命的自己</span> <span class="string">//博客的描述</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Karise</span> <span class="string">//博客作者的名字</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span> <span class="string">//语言中文</span></span><br><span class="line"></span><br><span class="line"><span class="attr">theme:</span> <span class="string">new-vno</span> <span class="string">//刚刚复制到</span> <span class="string">themes</span> <span class="string">文件夹下的主题名称</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span> <span class="string">//使用</span> <span class="string">Git</span> <span class="string">发布</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/karise-guo/karise.github.io.git</span> <span class="string">//刚创建的</span> <span class="string">Github</span> <span class="string">仓库地址</span></span><br></pre></td></tr></table></figure>

<ul>
<li>关于主题的配置在各自主题文件夹下的 <code>_config.yml</code> 文件中修改。</li>
</ul>
<h3 id="5-写博客文章"><a href="#5-写博客文章" class="headerlink" title="5. 写博客文章"></a>5. 写博客文章</h3><ul>
<li>接下来可以开始写你的第一篇 <code>博客</code> 文章了，博客文章保存在 <code>Blog / source / _posts</code> 文件夹下，格式为 <code>MarkDown</code> 格式，也就是 <code>.md</code> 后缀的文件，编码格式为 <code>UTF-8</code> ，否则会显示乱码。</li>
</ul>
<p><strong>例如：</strong> 创建一个名为 <code>测试文章.md</code> 的文件，内容为：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 测试文章 //文章的标题</span><br><span class="line">date: 2017-05-03 17:47 //文章的发布时间</span><br><span class="line">categories: 测试分类 //分类名称</span><br><span class="line">tags: 测试标签 //标签名称</span><br><span class="line">photos: https://karise.cn/images/karise.jpg //需要展示的图片地址</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"> &gt; 这是一篇测试文章。</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 每一篇文章中，开头都必须有 <code>---</code> 之间的那些参数，参数 <code>:</code> 后面必须有空格，文章的 <code>标题</code> 是必填的，否则文章不会显示在博客中，其他参数看自己的需求填写，<code>categories 、tags 、photos </code> 这三个参数可填写多个，填写多个时用 <code>[ xx, xx ]</code> 格式区分，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 测试文章 &#x2F;&#x2F;文章的标题</span><br><span class="line">date: 2017-05-03 17:47 &#x2F;&#x2F;文章的发布时间</span><br><span class="line">categories: [测试分类1, 测试分类2, 测试分类3] &#x2F;&#x2F;分类名称</span><br><span class="line">tags: [测试标签1, 测试标签2, 测试标签3] &#x2F;&#x2F;标签名称</span><br><span class="line">photos: [https:&#x2F;&#x2F;karise.cn&#x2F;images&#x2F;karise.jpg, https:&#x2F;&#x2F;karise.cn&#x2F;images&#x2F;karise.jpg, https:&#x2F;&#x2F;karise.cn&#x2F;images&#x2F;karise.jpg] &#x2F;&#x2F;需要展示的图片地址</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<ul>
<li>如果要在博客的首页显示每篇文章的 <code>摘要</code> ，只要在文章中加入以下 <code>分隔符</code> 即可，该 <code>分隔符</code> 之前的所有内容都会被自动截取为文章的 <code>摘要</code> 。</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- more --&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="6-本地测试博客"><a href="#6-本地测试博客" class="headerlink" title="6. 本地测试博客"></a>6. 本地测试博客</h3><ul>
<li>打开终端 <code>cd</code> 到 <code>Blog</code> 目录下，输入以下命令：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<ul>
<li>接着浏览器中输入 <a href="http://localhost:4000/">http://localhost:4000/</a> 就能够看到 <code>博客</code> 的搭建效果。</li>
</ul>
<h2 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h2><p>本地显示没问题以后，就可以将 <code>博客</code> 发布到 <code>GitHub</code> 服务器上了。</p>
<h3 id="1-安装自动部署发布插件"><a href="#1-安装自动部署发布插件" class="headerlink" title="1. 安装自动部署发布插件"></a>1. 安装自动部署发布插件</h3><p>第一次配置时需要安装 <code>hexo-deployer-git</code> 自动部署发布工具，打开终端 <code>cd</code> 到 <code>Blog</code> 目录下，执行以下命令安装。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h3 id="2-发布博客到服务器"><a href="#2-发布博客到服务器" class="headerlink" title="2. 发布博客到服务器"></a>2. 发布博客到服务器</h3><ul>
<li>打开终端 <code>cd</code> 到 <code>Blog</code> 目录下，输入以下命令：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果这是你的第一次，终端可能会让你输入 <code>Github</code> 的邮箱和密码，输入完成后，就会把你的 <code>博客</code> 自动上传至 <code>Github</code> 了。</p>
</li>
<li><p>以后在每一次添加新的 <code>博客</code> 文章或者改变配置时，执行一下这个命令就可以直接发布了。</p>
</li>
<li><p>发布完成后，浏览器中输入之前创建的 <code>Github</code> 仓库名，就能访问到你搭建的 <code>博客</code> 了，我的是 <a href="https://karise.github.io/">karise.github.io</a> 。</p>
</li>
</ul>
<blockquote>
<p>简单的 <code>博客</code> 搭建流程就是这样了，还有很多不错的 <a href="https://hexo.io/plugins/">插件</a> ，比如 <code>评论</code>、<code>标签</code>、<code>统计</code> 等等，这些自己去研究并慢慢完善自己的博客吧。</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo 博客</category>
      </categories>
      <tags>
        <tag>Hexo 博客</tag>
        <tag>GitHub</tag>
        <tag>GitHub Pages</tag>
      </tags>
  </entry>
  <entry>
    <title>给 Hexo 搭建的博客增加 百度 和 谷歌 的搜索引擎验证</title>
    <url>/2017/05/05/Hexo/201705051311/</url>
    <content><![CDATA[<blockquote>
<p>如果你的 <code>博客</code> 是使用 <code>GitHub + Hexo</code> 搭建的，那么你的 <code>博客</code> 内容是无法被 <code>百度、谷歌</code> 等搜索引擎搜索到的，虽然我们将自己的 <code>博客</code> 托管在 <code>GitHub</code> ，但是 <code>GitHub</code> 是不会讲站点信息提交给搜索引擎的，所以我们可以手动将自己的 <code>博客</code> 站点提交给 <code>百度、谷歌</code> 的搜索引擎。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="1-验证站点"><a href="#1-验证站点" class="headerlink" title="1. 验证站点"></a>1. 验证站点</h2><p>搜索引擎验证的方法有好几种，下面我选择 <code>HTML标签验证</code> 验证方法，其他的方法有兴趣可以自己去试一下，这里就不介绍了。</p>
<ul>
<li><p>首先打开 <a href="http://www.baidu.com/search/url_submit.htm">百度搜索引擎验证</a> ，点击 <code>添加网站</code> ，输入自己的 <code>博客</code> 地址。</p>
</li>
<li><p>输完后选择 <code>HTML标签验证</code> ，然后将下方的 <code>meta</code> 代码复制下来，网页先不要关。</p>
</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/57365123-1104ec80-71b7-11e9-9c3b-88f43444d7ae.png" alt="百度搜索引擎验证"></p>
<ul>
<li><p>重新开一个页面，打开 <a href="https://www.google.com/webmasters/tools/home?hl=zh-CN">谷歌搜索引擎验证</a> ，点击 <code>添加属性</code> ，一样输入自己的 <code>博客</code> 地址。（ <code>谷歌</code> 需要翻墙，如果不想翻墙的话，可以跳过 <code>谷歌</code> 验证的步骤，只看 <code>百度</code> 的验证）</p>
</li>
<li><p>输完后选择 <code>备用方法</code> 下的 <code>HTML 标记</code> ，然后将下方的 <code>meta</code> 代码复制下来，网页也不要关。</p>
</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/57365150-1eba7200-71b7-11e9-9043-a58514df8ec1.png" alt="谷歌搜索引擎验证"></p>
<ul>
<li><p>打开本地博客主题下的 <code>layout / _partial</code> 文件夹，有一个名为 <code>head</code> 的文件，使用 <code>HTML</code> 编辑器打开，将刚才复制的两句 <code>meta</code> 代码粘贴进去。</p>
</li>
<li><p>保存文件后，输入以下命令将 <code>博客</code> 重新部署到 <code>GitHub</code> 服务器。</p>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<ul>
<li>然后分别点击刚才 <code>百度、谷歌</code> 验证页面的 <code>验证</code> 按钮进行站点验证。</li>
</ul>
<h2 id="2-生成站点地图"><a href="#2-生成站点地图" class="headerlink" title="2. 生成站点地图"></a>2. 生成站点地图</h2><ul>
<li>打开终端 <code>cd</code> 到本地博客目录下，输入以下命令安装 <code>sitmap</code> 插件。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>

<ul>
<li>打开本地博客目录下的 <code>_config.yml</code> 文件，修改 <code>url</code> 参数为你博客的 <code>首页地址</code>，这样是为了保证能正确生成 <code>sitemap.xml</code> 文件中的地址。</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://karise.cn</span> <span class="comment"># 修改成你博客的首页地址</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br></pre></td></tr></table></figure>

<ul>
<li>添加以下配置。</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自动生成sitemap</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure>

<ul>
<li>输入以下命令重新部署博客。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<h2 id="3-将站点地图提交谷歌"><a href="#3-将站点地图提交谷歌" class="headerlink" title="3. 将站点地图提交谷歌"></a>3. 将站点地图提交谷歌</h2><ul>
<li>打开 <a href="https://www.google.com/webmasters/tools/home?hl=zh-CN">谷歌站点控制台</a> 进入站点控制台，先点击 <code>测试</code> 站点地图，测试通过后再点击 <code>提交</code> 站点地图。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/57365192-32fe6f00-71b7-11e9-9693-44df117b8ac9.png" alt="添加站点地图"></p>
<blockquote>
<p>提交完成后，就可以等待搜索引擎 <code>自动抓取</code> 或者配置 <code>自动推送</code> 或者 <code>主动推送</code> 站点链接了。如果你的 <code>博客</code> 是使用 <code>GitHub + Hexo</code> 搭建的，由于 <code>Github</code> 貌似禁止百度爬虫访问 <code>博客</code>，导致 <code>博客</code> 可能无法被百度收录，所以可以主动推送站点链接，可以参考一下这篇文章：<a href="http://hui-wang.info/2016/10/23/Hexo%E6%8F%92%E4%BB%B6%E4%B9%8B%E7%99%BE%E5%BA%A6%E4%B8%BB%E5%8A%A8%E6%8F%90%E4%BA%A4%E9%93%BE%E6%8E%A5/">Hexo 插件之百度主动提交链接</a> 。</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo 博客</category>
      </categories>
      <tags>
        <tag>Hexo 博客</tag>
        <tag>百度</tag>
        <tag>谷歌</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 git.oschina 码云 来托管 Hexo 搭建的博客</title>
    <url>/2017/05/08/Hexo/201705081542/</url>
    <content><![CDATA[<blockquote>
<p>首先还没有搭建博客的先转到我的另一篇文章：<a href="http://www.jianshu.com/p/8f1e1b17417b">使用 Hexo 免费搭建属于自己的个人博客</a> ，一般我们都是使用 <code>GitHub + Hexo</code> 来搭建我们的 <code>博客</code> ，下面分享一下如何用国内的 <code>码云</code> 来托管我们的 <code>博客</code> 。</p>
</blockquote>
<a id="more"></a>

<hr>
<ul>
<li>首先进入 <a href="http://git.oschina.net/">码云</a> 创建一个仓库，<code>仓库名称</code> 和 <code>仓库路径</code> 都必须和你的 <code>用户名</code> 也就是上面的 <code>归属</code> 一样。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/57365229-44477b80-71b7-11e9-8216-7b08377dad5d.png" alt="创建仓库"></p>
<ul>
<li>打开本地 <code>博客</code> 下的 <code>_config.yml</code> 文件，将刚才创建的仓库 <code>Git</code> 地址配置进去。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/57365270-532e2e00-71b7-11e9-826b-79f4927bc6a4.png" alt="仓库 Git 地址"></p>
<ul>
<li>如果想使用 <code>GitHub</code> 和 <code>码云</code> 同时托管 <code>博客</code> ，就这样配置：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">https://github.com/karise-guo/karise.github.io.git</span></span><br><span class="line">    <span class="attr">oschina:</span> <span class="string">https://git.oschina.net/karise/karise.git</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果只想使用 <code>码云</code> 托管 <code>博客</code> ，就这样配置：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://git.oschina.net/karise/karise.git</span></span><br></pre></td></tr></table></figure>

<ul>
<li>保存文件后打开终端 <code>cd</code> 到 <code>博客</code> 目录下，使用以下命令重新部署一下博客。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<ul>
<li>再次打开刚才 <code>码云</code> 上创建的仓库刷新一下，<code>博客</code> 的 <code>HTML</code> 页面应该已经传到仓库中了，打开 <code>服务</code> 中的 <code>Pages</code>，点击 <code>启动服务</code> 。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/57365311-62ad7700-71b7-11e9-8bf5-4ae7823a65cd.png" alt="Pages"></p>
<ul>
<li>此时你就可以使用 <code>用户名.oschina.io</code> 来访问你的 <code>博客</code> 了。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/57365346-735ded00-71b7-11e9-93d5-91e0cc89a385.png" alt="karise.oschina.io"></p>
<blockquote>
<p>大功告成，使用 <code>码云</code> 托管 <code>博客</code> 后访问速度会快很多，大家块试试看吧。</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo 博客</category>
      </categories>
      <tags>
        <tag>Hexo 博客</tag>
        <tag>码云</tag>
        <tag>git.oschina</tag>
        <tag>码云 Pages</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Swiftype 给 Hexo 搭建的博客添加站内搜索功能</title>
    <url>/2017/05/09/Hexo/201705091200/</url>
    <content><![CDATA[<blockquote>
<p>当我们的 <code>博客</code> 文章变的越来越多的时候，就非常需要使用 <code>站内搜索</code> 功能，否则寻找某一篇文章就会变的麻烦，<code>Swiftype</code> 是一个非常好的站内搜索平台，并且是 <code>免费</code> 的，可以到 <a href="https://karise.cn/">我的博客</a> 去预览一下搜索效果，下面就分享一下集成的方法。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="1-注册-Swiftype-账号"><a href="#1-注册-Swiftype-账号" class="headerlink" title="1. 注册 Swiftype 账号"></a>1. 注册 Swiftype 账号</h2><ul>
<li>首先进入 <a href="https://app.swiftype.com/">Swiftype 官网</a> 注册一个账号，注册的账号邮箱貌似必须使用 <code>企业邮箱</code> ，注册信息要全部填完，这里要注意一下，这里建议最好翻墙，否则浏览速度会比较慢。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509160539.png" alt="注册"></p>
<ul>
<li>注册完成后会提示进入邮箱点击链接激活一下账号，激活完以后登录账号会显示 <code>免费试用 xx 天</code> ，这个无视就行了，试用期结束后还是可以用的。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509160611.png" alt="免费试用"></p>
<h2 id="2-创建-search-engine"><a href="#2-创建-search-engine" class="headerlink" title="2. 创建 search engine"></a>2. 创建 search engine</h2><ul>
<li>点击 <a href="https://app.swiftype.com/precrawls/new">Create a search engine</a> ，输入自己 <code>博客</code> 的完整地址，等待验证完成后，随便输入一个名字就行。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509160631.png" alt="Create a search engine"></p>
<ul>
<li>创建完成后会开始抓取你 <code>博客</code> 的数据来用作 <code>搜索索引</code> ，你可以在 <code>Content</code> 中看到抓取的 <code>搜索索引</code> 数据。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509160647.png" alt="Content"></p>
<ul>
<li>当你的 <code>博客</code> 内容有更新的时候，可以在 <code>Domains</code> 中点击 <code>Recrawl</code> 来重新抓取一下 <code>搜索索引</code> 数据。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509160701.png" alt="Domains"></p>
<h2 id="3-更改搜索设置"><a href="#3-更改搜索设置" class="headerlink" title="3. 更改搜索设置"></a>3. 更改搜索设置</h2><p>如果你不想设置那么麻烦，只想全部用默认设置，可以直接跳过这一步，直接进入 <code>开始集成 Swiftype 搜索</code> 这一步。</p>
<ul>
<li>进入 <code>Weights</code> 修改搜索条件，我这边设置的是只根据文章的 <code>title</code> 来搜索内容，你可以根据自己的需求更改，修改完可以在右边搜索预览一下。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509160716.png" alt="Weights"></p>
<ul>
<li>进入 <code>Install Search</code> 点击 <code>Change Configuration</code> 设置 <code>搜索框显示</code> 以及 <code>搜索结果显示</code> 。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509160733.png" alt="Install Search"></p>
<ul>
<li><code>搜索框显示</code> 有两种，第一种是自己在 <code>博客</code> 中合适的位置加一个 <code>input</code> 标签的搜索框，<code>class</code> 属性设置为 <code>st-default-search-input</code> 。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509160746.png" alt="自己加 input 搜索框"></p>
<ul>
<li>第二种不需要自己加 <code>input</code> 标签，<code>Swiftype</code> 会自动在你 <code>博客</code> 网页的右下角添加一个 <code>search this site</code> 的搜索按钮，点击即可搜索，效果可以看下面的预览图，想用哪一种可以看自己的需求。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509160803.png" alt="自带的搜索按钮"></p>
<ul>
<li>设置修改完保存以后需要点击网页最下面的 <code>Activate Swiftype</code> 按钮，设置才能生效，这个要注意一下。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509160819.png" alt="Activate Swiftype"></p>
<h2 id="4-开始集成-Swiftype-搜索"><a href="#4-开始集成-Swiftype-搜索" class="headerlink" title="4. 开始集成 Swiftype 搜索"></a>4. 开始集成 Swiftype 搜索</h2><ul>
<li>进入 <code>Install Search</code> ，将 <code>Swiftype</code> 安装代码复制下来。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509160832.png" alt="Install Search"></p>
<ul>
<li><p>打开本地 <code>博客</code> 主题目录下的 <code>layout / _partial</code> 文件夹，使用 <code>HTML</code> 编辑器打开 <code>footer.ejs</code> 文件，将刚才的代码粘贴在 <code>&lt;footer&gt;</code> 标签内。</p>
</li>
<li><p>打开本地 <code>博客</code> 主题目录下的 <code>_config.yml</code> 文件，添加以下配置。</p>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">swift_search:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果刚才设置 <code>搜索框显示</code> 时选择的是第二种可以跳过这一步，如果选择的是第一种，就将以下代码放在 <code>博客</code> 中适合放搜索框的位置即可。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 搜索框就加上 class=&quot;st-default-search-input&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">theme.swift_search.enable</span>)&#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;st-default-search-input&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入搜索内容...&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 搜索按钮就加上 class=&quot;st-search-show-outputs&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">theme.swift_search.enable</span>)&#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">title</span>=<span class="string">&quot;搜索博客&quot;</span> <span class="attr">class</span>=<span class="string">&quot;st-search-show-outputs&quot;</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>打开终端 <code>cd</code> 到本地 <code>博客</code> 目录下，输入以下命令重新部署 <code>博客</code> 。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<blockquote>
<p>集成步骤大概就是这样，搜索框样式可以根据需求自己写，另外如果你的 <code>Swiftype</code> 抓取不到 <code>搜索索引</code> ，可以在 <code>Domains</code> 中点击 <code>Recrawl</code> 来重新抓取一下 <code>搜索索引</code> 数据，祝你成功。</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo 博客</category>
      </categories>
      <tags>
        <tag>Hexo 博客</tag>
        <tag>Swiftype 搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>为 Hexo 搭建的博客添加 RSS 输出功能</title>
    <url>/2017/05/08/Hexo/201705081800/</url>
    <content><![CDATA[<blockquote>
<p>对于 <code>RSS</code> 输出这个功能，<code>Hexo</code> 已经有一个现成的插件可以用，那就是 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> ，下面就来分享一下使用方法。</p>
</blockquote>
<a id="more"></a>

<hr>
<ul>
<li>首先打开终端 <code>cd</code> 到本地的 <code>博客</code> 目录下，输入以下命令安装 <code>RSS</code> 插件。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>

<ul>
<li>打开 <code>博客</code> 根目录下的 <code>_config.yml</code> 文件，加入以下配置：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure>

<ul>
<li>打开 <code>博客</code> 主题目录下的 <code>_config.yml</code> 文件，设置 <code>RSS</code> 地址：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">rss:</span> <span class="string">/atom.xml</span></span><br></pre></td></tr></table></figure>

<ul>
<li>最后打开终端 <code>cd</code> 到本地的 <code>博客</code> 目录下，输入以下命令重新部署一下 <code>博客</code> 。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<blockquote>
<p>方法就是这样，重新打开你的 <code>博客</code> 就能够使用 <code>RSS</code> 输出功能了。</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo 博客</category>
      </categories>
      <tags>
        <tag>Hexo 博客</tag>
        <tag>RSS</tag>
      </tags>
  </entry>
  <entry>
    <title>为 Hexo 搭建的博客添加属于自己的个性域名</title>
    <url>/2017/05/21/Hexo/201705211838/</url>
    <content><![CDATA[<blockquote>
<p>一般用 <code>GitHub + Hexo</code> 搭建的博客访问域名都是 <code>xxx.github.io</code> ，如何让博客有一个属于自己又好记的域名呢，下面分享一下方法。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="1-购买域名"><a href="#1-购买域名" class="headerlink" title="1. 购买域名"></a>1. 购买域名</h2><p>我的域名是在 <a href="https://www.qcloud.com/">腾讯云</a> 买的，因为  <a href="https://www.qcloud.com/">腾讯云</a> 的便宜一点，也可以到 <a href="https://www.aliyun.com/">阿里云</a> 的万网去买。</p>
<ul>
<li>首先前往 <a href="https://www.qcloud.com/">腾讯云</a> ，选择 <code>域名服务</code> ，选择一个想要的域名后缀，不同的后缀价格是不一样的。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/57365379-85d82680-71b7-11e9-918f-82b2d4a3e2a3.png" alt="腾讯云"></p>
<ul>
<li>输入自己想要的个性域名，然后选择好合适的域名后缀后购买即可。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/57365598-f2ebbc00-71b7-11e9-891d-475859fd94d5.png" alt="域名注册"></p>
<h2 id="2-域名解析"><a href="#2-域名解析" class="headerlink" title="2. 域名解析"></a>2. 域名解析</h2><ul>
<li>域名购买完成后，进入页面右上角的 <code>管理中心</code> ，选择 <code>域名管理</code> 。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/57365685-24fd1e00-71b8-11e9-999a-57d85a2fccfb.png" alt="域名管理"></p>
<ul>
<li>然后在你购买的域名菜单栏中点击 <code>解析</code> 。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/57365720-33e3d080-71b8-11e9-82d3-4a60a2df2f95.png" alt="解析"></p>
<ul>
<li>按照下图增加以下三条记录，前两条照我的填写就行，最后一条的记录值改成你自己博客的 <code>GitHub</code> 域名，一般都是 <code>xxx.github.io</code> ，别的照着我的填写就行。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/57365787-52e26280-71b8-11e9-848c-c4622e177b86.png" alt="添加记录"></p>
<ul>
<li>记录添加完成后，选中添加的三条记录，选择上方的 <code>分配至项目</code> 按钮。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/57365814-5f66bb00-71b8-11e9-869a-866e0589740d.png" alt="分配至项目"></p>
<ul>
<li>然后将其分配到 <code>默认项目</code> 即可。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/57365831-6a215000-71b8-11e9-80e9-82dfe1e40453.png" alt="默认项目"></p>
<ul>
<li>然后点击 <code>协作子域名</code> ，也将其分配至 <code>默认项目</code> 。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/57365860-77d6d580-71b8-11e9-8438-820e82f35f01.png" alt="协作子域名"></p>
<h2 id="3-创建-CNAME-文件"><a href="#3-创建-CNAME-文件" class="headerlink" title="3. 创建 CNAME 文件"></a>3. 创建 CNAME 文件</h2><ul>
<li>在本地博客根目录下的 <code>source</code> 文件夹中，新建一个名为 <code>CNAME</code> 的文件，注意这个文件不带 <code>任何后缀名</code>。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/57365882-845b2e00-71b8-11e9-8526-0e9fbbc56f3f.png" alt="CNAME"></p>
<ul>
<li>打开 <code>CNAME</code> 文件，在里面加入你购买的域名，注意加入的域名不带 <code>http://</code> 也不带 <code>www</code> ，列如我的 <code>karise.cn</code> ，只要加入这个就行了。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/57365921-976dfe00-71b8-11e9-916f-fdbbf5b0532d.png" alt="加入域名"></p>
<ul>
<li>保存文件后，打开终端 <code>cd</code> 到你的博客目录下，输入以下命令重新部署博客到服务器即可。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<blockquote>
<p>方法到这里就结束了，部署完成后稍微等个十来分钟，然后就用你的新域名访问一下试试吧，访问不管是使用 <a href="karise.cn">karise.cn</a> 还是 <a href="www.karise.cn">www.karise.cn</a> 还是 <a href="karise.github.io">karise.github.io</a> ，最后都会自动指向 <a href="karise.cn">karise.cn</a> 这个主域名下，赶快试一试吧~</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo 博客</category>
      </categories>
      <tags>
        <tag>Hexo 博客</tag>
        <tag>域名</tag>
        <tag>腾讯云</tag>
      </tags>
  </entry>
  <entry>
    <title>为 Hexo 的 Next 主题添加 Gitalk 评论</title>
    <url>/2019/05/31/Hexo/201905311540/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://github.com/gitalk/gitalk">Gitalk</a> 是一个基于 <code>Github Issue</code> 的评论插件，使用 <code>Github</code> 帐号登录，界面干净整洁，最喜欢的一点是支持 <code>MarkDown</code> 语法，在个人博客里添加了之后就可以很简便的进行评论和回复了。</p>
</blockquote>
<a id="more"></a>

<hr>
<p><strong>主要特性：</strong></p>
<ul>
<li>使用 <code>Github</code> 登录</li>
<li>支持多语言 <code>[en, zh-CN, zh-TW, es-ES, fr]</code></li>
<li>支持个人或组织</li>
<li>无干扰模式（设置 <code>distractionFreeMode</code> 为 <code>true</code> 开启）</li>
<li>快捷键提交评论 （<code>cmd</code> | <code>ctrl + enter</code>）</li>
<li>支持 <code>MarkDown</code> 语法</li>
</ul>
<p><strong>界面效果：</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190531155245.png"></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我这边使用的 <a href="https://github.com/iissnan/hexo-theme-next">Next</a> 主题，版本是 <code>5.1.3</code>。</p>
<h3 id="1-创建-Github-仓库"><a href="#1-创建-Github-仓库" class="headerlink" title="1. 创建 Github 仓库"></a>1. 创建 Github 仓库</h3><p>需要在自己的 <code>Github</code> 账号下创建一个仓库来存放评论，创建的仓库只要 <code>public</code> 就行，其余没要求。</p>
<h3 id="2-创建-Github-Application"><a href="#2-创建-Github-Application" class="headerlink" title="2. 创建 Github Application"></a>2. 创建 Github Application</h3><p>需要创建一个 <code>Github Application</code> 用来授权登录，如果没有 <a href="https://github.com/settings/applications/new">点击这里申请</a>，<code>Authorization callback URL</code> 填写你主页地址，比如我的就是 <code>https://karise.cn</code>，其他都随意填。</p>
<h3 id="3-为-Next-主题添加-Gitalk-支持"><a href="#3-为-Next-主题添加-Gitalk-支持" class="headerlink" title="3. 为 Next 主题添加 Gitalk 支持"></a>3. 为 Next 主题添加 Gitalk 支持</h3><ul>
<li><p>首先创建 <code>Gitalk</code> 的 <code>swig</code> 文件，放在 <code>themes/next/layout/_third-party/comments</code> 文件夹下，命名为 <code>gitalk.swig</code> ，内容如下。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if page.comments &amp;&amp; theme.gitalk.enable %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;gitalk-container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> gitalk = <span class="keyword">new</span> Gitalk(&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">      clientID: &#x27;</span><span class="template-variable">&#123;&#123; <span class="name">theme.gitalk.clientID</span> &#125;&#125;</span><span class="xml">&#x27;,</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      clientSecret: &#x27;</span><span class="template-variable">&#123;&#123; <span class="name">theme.gitalk.clientSecret</span> &#125;&#125;</span><span class="xml">&#x27;,</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      repo: &#x27;</span><span class="template-variable">&#123;&#123; <span class="name">theme.gitalk.repo</span> &#125;&#125;</span><span class="xml">&#x27;,</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      owner: &#x27;</span><span class="template-variable">&#123;&#123; <span class="name">theme.gitalk.owner</span> &#125;&#125;</span><span class="xml">&#x27;,</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      admin: [&#x27;</span><span class="template-variable">&#123;&#123; <span class="name">theme.gitalk.admin</span> &#125;&#125;</span><span class="xml">&#x27;],</span></span></span><br><span class="line">      id: location.pathname,</span><br><span class="line"><span class="handlebars"><span class="xml">      distractionFreeMode: &#x27;</span><span class="template-variable">&#123;&#123; <span class="name">theme.gitalk.distractionFreeMode</span> &#125;&#125;</span><span class="xml">&#x27;</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    gitalk.render(<span class="string">&#x27;gitalk-container&#x27;</span>)</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在主题文件 <code>themes/next/layout/_third-party/comments/index.swig</code> 中引入刚刚添加的文件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% include &#x27;gitalk.swig&#x27; %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 <code>themes/next/layout/_partials/comments.swig</code> 文件末找到最后的 <code>&#123;% endif %&#125;</code> 语句，替换为如下代码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% elseif theme.gitalk.enable %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;gitalk-container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 <code>themes/next/_config.yml</code> 文件中添加 <code>Gitalk</code> 的配置。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否启用</span></span><br><span class="line">  <span class="attr">owner:</span> <span class="string">xxx</span> <span class="comment"># 用户名</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">xxx</span> <span class="comment"># 存放评论的仓库名</span></span><br><span class="line">  <span class="attr">clientID:</span> <span class="string">xxx</span> <span class="comment"># Github Application 的 clientID</span></span><br><span class="line">  <span class="attr">clientSecret:</span> <span class="string">xxx</span> <span class="comment"># Github Application 的 clientSecret</span></span><br><span class="line">  <span class="attr">admin:</span> <span class="string">xxx</span> <span class="comment"># 用户名</span></span><br><span class="line">  <span class="attr">distractionFreeMode:</span> <span class="literal">false</span> <span class="comment"># 评论时遮照效果的开关</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>最后执行 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code> 重新发布博客即可。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Hexo 博客</category>
      </categories>
      <tags>
        <tag>Hexo 博客</tag>
        <tag>评论</tag>
        <tag>Gitalk</tag>
      </tags>
  </entry>
  <entry>
    <title>【Android 开发】Android Studio 出现 unable to access android sdk add-on list 的解决方法</title>
    <url>/2017/10/30/Android/201710301728/</url>
    <content><![CDATA[<blockquote>
<p>出现这个提示的原因主要是因为电脑第一次安装 <code>Android Studio</code>，启动后 <code>Android Studio</code> 没有检测到电脑有 <code>SDK</code> ，所以才有这个提示，下面说一下解决方法。</p>
</blockquote>
<a id="more"></a>

<hr>
<p><img data-src="https://file.karise.cn/blog/57364176-3e509b00-71b5-11e9-8c76-6a09228dd98c.png" alt="Android Studio"></p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul>
<li><p>如果是 <code>windows</code> 系统，在 <code>Android Studio</code> 的安装目录下，找到 <code>\bin\idea.properties</code> 文件。</p>
</li>
<li><p>如果是 <code>macOS</code> 系统，右键应用程序中的 <code>Android Studio.app</code> ，选择 <code>显示包内容</code> ，接着找到 <code>Contents/bin/idea.properties</code> 文件。</p>
</li>
<li><p>打开 <code>idea.properties</code> 文件，在末尾加入以下配置，这个配置是设置初次打开 <code>Android Studio</code> 时，不检测 <code>SDK</code> 。</p>
</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">disable.android.first.run</span> = <span class="string">true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果不想这么设置的话，也可以点击 <code>Cancel</code> 然后按照一步步提示自动下载 <code>SDK</code> 。</p>
</blockquote>
]]></content>
      <categories>
        <category>Android 开发</category>
      </categories>
      <tags>
        <tag>Android 开发</tag>
        <tag>Android Studio</tag>
      </tags>
  </entry>
  <entry>
    <title>【Android 开发】mac 版 Android Studio 连接夜神模拟器的方法</title>
    <url>/2017/11/02/Android/201711021624/</url>
    <content><![CDATA[<blockquote>
<p>刚接触 <code>Android</code> 开发，在配置模拟器的时候发现 <code>Android Studio</code> 连接不到 <code>夜神模拟器</code> ，网上找一大堆方法都是 <code>Windows</code> 版本的，所以这里把方法记录一下。</p>
</blockquote>
<a id="more"></a>

<hr>
<ul>
<li>首先打开 <code>Android Studio</code> 和 <code>夜神模拟器</code> ，然后打开 <code>夜神模拟器</code> 的 <code>设置</code> - <code>开发者选项</code> - <code>USB 调试</code> 。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/57364338-8a9bdb00-71b5-11e9-951e-947b4268a0ca.png" alt="USB 调试"></p>
<ul>
<li><code>开发者选项</code> 默认是不显示的，如果找不到 <code>开发者选项</code> 就点击 <code>关于平板电脑</code> ，然后连续点击 <code>版本号</code> 就可以开启 <code>开发者选项</code> 了。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/57364403-b028e480-71b5-11e9-8f98-e02d90a97cde.png" alt="开启开发者选项"></p>
<ul>
<li>此时 <code>Android Studio</code> 依旧连接不到模拟器，这时前往 <code>应用程序</code> 找到 <code>Nox App Player.app</code> ，然后右键 <code>显示包内容</code> ，找到 <code>Contents / MacOS / adb</code> 文件。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/57364436-c59e0e80-71b5-11e9-93c0-ced63b13883c.png" alt="adb"></p>
<ul>
<li>将 <code>adb</code> 文件直接拖到终端，然后接着输入 <code>connect 127.0.0.1:62001</code> 然后回车即可。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/57364467-d77fb180-71b5-11e9-8ae7-470a2e5d855f.png" alt="连接模拟器"></p>
<ul>
<li>此时点击 <code>Android Studio</code> 的运行按钮就可以看到已经显示 <code>夜神模拟器</code> 了。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/57364492-e8302780-71b5-11e9-9d30-d0128dc8b3fc.png" alt="运行"></p>
]]></content>
      <categories>
        <category>Android 开发</category>
      </categories>
      <tags>
        <tag>Android 开发</tag>
        <tag>Android Studio</tag>
        <tag>夜神模拟器</tag>
      </tags>
  </entry>
  <entry>
    <title>Atom 配置和插件的备份同步以及恢复的方法</title>
    <url>/2017/07/04/Tool/201707041209/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://atom.io/">Atom</a> 是 <code>Github</code> 专门为程序员推出的一个跨平台文本编辑器，和 <code>SublimeText</code> 十分类似，但我更喜欢 <code>Atom</code> 也配置了很多喜欢的配置与插件，但是如果需要换电脑时要重新配置的话就会变得十分麻烦，下面分享一下 <code>Atom</code> 配置和插件的备份同步以及恢复的方法。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="1-安装-sync-settings-插件"><a href="#1-安装-sync-settings-插件" class="headerlink" title="1. 安装 sync-settings 插件"></a>1. 安装 sync-settings 插件</h2><ul>
<li>首先打开 <code>Atom</code> 设置，搜索 <code>sync-settings</code> 插件，然后安装。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165721.png" alt="安装 sync-settings "></p>
<ul>
<li>然后打开 <code>sync-settings</code> 插件的设置，可以看到这边需要配置一下 <code>Personal Access Token</code> 和 <code>Gist ID</code> ，至于这两个怎么获得，只需要有一个 <code>GitHub</code> 账号即可。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165735.png" alt="sync-settings 设置"></p>
<h2 id="2-获取-Personal-Access-Token"><a href="#2-获取-Personal-Access-Token" class="headerlink" title="2. 获取 Personal Access Token"></a>2. 获取 Personal Access Token</h2><ul>
<li>打开你的 <code>GitHub</code> ，点击 <code>Settings</code> 选项。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165746.png" alt="Settings"></p>
<ul>
<li>点击左侧菜单最下方的 <code>Personal access tokens</code> 选项。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165803.png" alt="Personal access tokens"></p>
<ul>
<li>点击 <code>Generate new token</code> 创建一个新的 <code>token</code> 。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165815.png" alt="Generate new token"></p>
<ul>
<li>随便填一个 <code>token</code> 描述，勾选 <code>gist</code> 选项，然后创建即可。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165828.png" alt="New personal access token"></p>
<ul>
<li>创建完成后就能直接看到你的 <code>Personal Access Token</code> 了，这里要注意这个 <code>Personal Access Token</code> 只会显示这一次，必须要把它复制下来，下次进来就看不到这个 <code>Personal Access Token</code> 了。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165846.png" alt="Personal Access Token"></p>
<h2 id="3-获取-Gist-ID"><a href="#3-获取-Gist-ID" class="headerlink" title="3. 获取 Gist ID"></a>3. 获取 Gist ID</h2><ul>
<li><code>Personal Access Token</code> 复制完成以后，点击顶部的 <code>Gist</code> 选项。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165857.png" alt="Gist"></p>
<ul>
<li>进去后会让你创建一个新的 <code>Gist</code> ，将刚才复制的 <code>Personal Access Token</code> 黏贴进去，随便填一个名字以及描述，然后点击 <code>Create secret gist</code> 即可。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165908.png" alt="创建 Gist"></p>
<ul>
<li>创建完成后进入你创建的 <code>Gist</code> ，地址栏中最后面的一串字符就是你的 <code>Gist ID</code> ，将它复制下来。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165925.png" alt="Gist ID"></p>
<h2 id="4-配置-sync-settings-插件"><a href="#4-配置-sync-settings-插件" class="headerlink" title="4. 配置 sync-settings 插件"></a>4. 配置 sync-settings 插件</h2><ul>
<li>打开 <code>Atom</code> 中 <code>sync-settings</code> 插件的设置，将刚才复制的 <code>Personal Access Token</code> 和 <code>Gist ID</code> 配置进去。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165936.png" alt="sync-settings 设置"></p>
<h2 id="5-开始同步配置"><a href="#5-开始同步配置" class="headerlink" title="5. 开始同步配置"></a>5. 开始同步配置</h2><ul>
<li>在 <code>Atom</code> 中按下 <code>command + shift + P</code> ，搜索 <code>sync</code> 找到 <code>Sync Settings: Backup</code> 选项执行即可。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165950.png" alt="Sync Settings: Backup"></p>
<ul>
<li>执行结束后，可以前往刚才 <code>GitHub</code> 创建的 <code>Gist</code> 中，可以看到同步的配置文件已经显示。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509170002.png" alt="Gist"></p>
<h2 id="6-开始恢复配置"><a href="#6-开始恢复配置" class="headerlink" title="6. 开始恢复配置"></a>6. 开始恢复配置</h2><ul>
<li>如果想要在另一台电脑上恢复配置的话，安装完 <code>Atom</code> 以后，同样安装 <code>sync-settings</code> 这个插件，然后将 <code>GitHub</code> 上已存在的 <code>Personal Access Token</code> 和 <code>Gist ID</code> 配置进去，然后按下 <code>command + shift + P</code> ，搜索 <code>sync</code> 找到 <code>Sync Settings: Restore </code> 选项执行恢复即可。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509170015.png" alt="Sync Settings: Restore"></p>
<blockquote>
<p>大致步骤就是这样，换电脑直接同步配置，另附上本文 <a href="http://www.jianshu.com/p/bd006b349d03">参考地址</a> 。</p>
</blockquote>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
        <tag>Atom</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 版 SourceTree 免登录跳过初始设置的方法</title>
    <url>/2017/04/28/Tool/201704281000/</url>
    <content><![CDATA[<blockquote>
<p><code>SourceTree</code> 安装之后需要使用账号登陆授权以后才可以使用，以前是可以不登陆的，但是现在是强制登陆。虽然是免费授权，但是不知道是什么原因，登陆经常会失败，翻墙也不行，这里就分享一下跳过这个初始化的步骤。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="SourceTree-免登录跳过初始设置的方法"><a href="#SourceTree-免登录跳过初始设置的方法" class="headerlink" title="SourceTree 免登录跳过初始设置的方法"></a>SourceTree 免登录跳过初始设置的方法</h2><ul>
<li><p>首先，安装完 <code>SourceTree</code> 以后先运行一次，弹出初始化登录页面后退出。</p>
</li>
<li><p>打开 <code>我的电脑</code>，在最上方的地址栏直接输入以下地址：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%LocalAppData%\Atlassian\SourceTree\</span><br></pre></td></tr></table></figure>

<p><strong>如图：</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509164919.png" alt="地址跳转"></p>
<ul>
<li><p>在这个目录下新建一个名为 <code>accounts.json</code> 的文件。</p>
</li>
<li><p>使用 <code>文本文档</code> 打开这个文件，将以下内容复制到其中后保存。</p>
</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[</span></span><br><span class="line">  <span class="attr">&#123;</span></span><br><span class="line">    <span class="meta">&quot;$id&quot;</span>: <span class="string">&quot;1&quot;,</span></span><br><span class="line">    <span class="meta">&quot;$type&quot;</span>: <span class="string">&quot;SourceTree.Api.Host.Identity.Model.IdentityAccount, SourceTree.Api.Host.Identity&quot;,</span></span><br><span class="line">    <span class="meta">&quot;Authenticate&quot;</span>: <span class="string">true,</span></span><br><span class="line">    <span class="meta">&quot;HostInstance&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">      <span class="meta">&quot;$id&quot;</span>: <span class="string">&quot;2&quot;,</span></span><br><span class="line">      <span class="meta">&quot;$type&quot;</span>: <span class="string">&quot;SourceTree.Host.Atlassianaccount.AtlassianAccountInstance, SourceTree.Host.AtlassianAccount&quot;,</span></span><br><span class="line">      <span class="meta">&quot;Host&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="meta">&quot;$id&quot;</span>: <span class="string">&quot;3&quot;,</span></span><br><span class="line">        <span class="meta">&quot;$type&quot;</span>: <span class="string">&quot;SourceTree.Host.Atlassianaccount.AtlassianAccountHost, SourceTree.Host.AtlassianAccount&quot;,</span></span><br><span class="line">        <span class="meta">&quot;Id&quot;</span>: <span class="string">&quot;atlassian account&quot;</span></span><br><span class="line">      <span class="attr">&#125;,</span></span><br><span class="line">      <span class="meta">&quot;BaseUrl&quot;</span>: <span class="string">&quot;https://id.atlassian.com/&quot;</span></span><br><span class="line">    <span class="attr">&#125;,</span></span><br><span class="line">    <span class="meta">&quot;Credentials&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">      <span class="meta">&quot;$id&quot;</span>: <span class="string">&quot;4&quot;,</span></span><br><span class="line">      <span class="meta">&quot;$type&quot;</span>: <span class="string">&quot;SourceTree.Model.BasicAuthCredentials, SourceTree.Api.Account&quot;,</span></span><br><span class="line">      <span class="meta">&quot;Username&quot;</span>: <span class="string">&quot;&quot;,</span></span><br><span class="line">      <span class="meta">&quot;Email&quot;</span>: <span class="string">null</span></span><br><span class="line">    <span class="attr">&#125;,</span></span><br><span class="line">    <span class="meta">&quot;IsDefault&quot;</span>: <span class="string">false</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>再次打开 <code>SourceTree</code> 就可以直接跳过登录进入软件页面了。</li>
</ul>
<p><strong>注意：</strong> <code>Windows</code> 系统文件后缀是默认隐藏的，需要先显示文件的后缀名，然后随便新建一个 <code>文本文档</code> ，将文件全名改为 <code>accounts.json</code> 即可。</p>
<p><strong>显示文件后缀名的方法：</strong></p>
<ul>
<li>打开 <code>我的电脑</code> ，点击 <code>查看</code> 菜单中的 <code>选项</code> 。</li>
</ul>
<p><strong>如图：</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509164933.png" alt="我的电脑"></p>
<ul>
<li>弹出 <code>文件夹选项</code> ，将 <code>隐藏已知文件类型的扩展名</code> 选项取消选中后点击 <code>确定</code> 即可。</li>
</ul>
<p><strong>如图：</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509164947.png" alt="文件夹选项"></p>
<blockquote>
<p>方法就是这样，<code>Mac</code> 版的 <code>SourceTree</code> 暂时还不知道怎么跳过，还是老老实实翻墙注册登录吧，附上本文 <a href="http://www.cnblogs.com/xiofee/p/sourcetree_pass_initialization_setup.html">参考地址</a>。</p>
</blockquote>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
        <tag>SourceTree</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>常用 Markdown 语法汇总</title>
    <url>/2017/03/15/Other/201703151637/</url>
    <content><![CDATA[<blockquote>
<p><code>Markdown</code> 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。<code>Markdown</code> 的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。</p>
</blockquote>
<blockquote>
<p>由于作者决定将自己印象笔记中的一些开发总结分享到简书上面，需要用到 <code>Markdown</code> 语法，所以决定写一篇总结给自己看，下面列出了一些 <code>Markdown</code> 常用的语法，应该可以满足大部分写作需求，上面为 <code>Markdown</code> 语法源码，下面为 <code>Markdown</code> 语法预览。</p>
</blockquote>
<a id="more"></a>

<hr>
<h1 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h1><p>标题是每篇文章都需要也是最常用的格式，在 <code>Markdown</code> 中，如果一段文字被定义为标题，只要在这段文字前加 <code>#</code> 号即可，标题总共分为六级。</p>
<p><code># 一级标题</code></p>
<p><strong>预览：</strong></p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><hr>
<p><code>## 二级标题</code></p>
<p><strong>预览：</strong></p>
<h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><hr>
<p><code>### 三级标题</code></p>
<p><strong>预览：</strong></p>
<h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><hr>
<p><code>#### 四级标题</code></p>
<p><strong>预览：</strong></p>
<h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><hr>
<p><code>##### 五级标题</code></p>
<p><strong>预览：</strong></p>
<h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><hr>
<p><code>###### 六级标题</code></p>
<p><strong>预览：</strong></p>
<h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr>
<h1 id="2-列表"><a href="#2-列表" class="headerlink" title="2. 列表"></a>2. 列表</h1><p>熟悉 HTML 的同学肯定知道有序列表与无序列表的区别，在 <code>Markdown</code> 下，列表的显示只需要在文字前加上 <code>-</code> 或 <code>*</code> 即可变为无序列表，有序列表则直接在文字前加 <code>1.</code> <code>2.</code> <code>3.</code>，符号要和文字之间加上一个字符的空格。</p>
<p><code>1. 有序列表</code><br><code>2. 有序列表</code><br><code>3. 有序列表</code></p>
<p><strong>预览：</strong></p>
<ol>
<li>有序列表</li>
<li>有序列表</li>
<li>有序列表</li>
</ol>
<hr>
<p><code>* 无序列表</code><br><code>* 无序列表</code><br><code>* 无序列表</code></p>
<p><strong>预览：</strong></p>
<ul>
<li>无序列表</li>
<li>无序列表</li>
<li>无序列表</li>
</ul>
<hr>
<h1 id="3-引用"><a href="#3-引用" class="headerlink" title="3. 引用"></a>3. 引用</h1><p>如果你需要引用一小段句子，那么就要用引用的格式，只需要在文本前加入 <code>&gt;</code> 这种尖括号（大于号）即可。</p>
<p><code>&gt; 引入的文字</code></p>
<p><strong>预览：</strong></p>
<blockquote>
<p>引入的文字</p>
</blockquote>
<h1 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4. 分割线"></a>4. 分割线</h1><p>分割线只需要输入 <code>***</code> 或者 <code>---</code> 即可。</p>
<p><code>***</code> 或 <code>---</code></p>
<p><strong>预览：</strong></p>
<hr>
<h1 id="5-删除文本、粗体与斜体"><a href="#5-删除文本、粗体与斜体" class="headerlink" title="5. 删除文本、粗体与斜体"></a>5. 删除文本、粗体与斜体</h1><p>在 <code>Markdown</code> 中， 用 <code>~~</code> <code>~~</code> 包含一段文本就是删除文本的语法，用 <code>**</code> <code>**</code> 包含一段文本就是粗体文本的语法，用 <code>*</code> <code>*</code> 包含一段文本就是斜体文本的语法。</p>
<p><code>~~删除文本~~</code></p>
<p><strong>预览：</strong></p>
<p><del>删除文本</del></p>
<hr>
<p><code>**粗体文本**</code></p>
<p><strong>预览：</strong></p>
<p>** 粗体文本 **</p>
<hr>
<p><code>*斜体文本*</code></p>
<p><strong>预览：</strong></p>
<p><em>斜体文本</em></p>
<hr>
<h1 id="6-图片与链接"><a href="#6-图片与链接" class="headerlink" title="6. 图片与链接"></a>6. 图片与链接</h1><p>插入链接与插入图片的语法很像，区别在一个 <code>!</code> 号，插入图片使用 <code>![]()</code> ，插入链接使用 <code>[]()</code> ，方括号 <code>[]</code> 中表示链接名或图片名，圆括号 <code>()</code> 中表示链接地址或图片地址。</p>
<p><code>! [Karise](图片地址)</code></p>
<p><strong>预览：</strong></p>
<p><img data-src="http://upload.jianshu.io/users/upload_avatars/1930874/d8510f3c53e9.jpg?imageMogr2/auto-orient/strip%7CimageView2/1/w/114/h/114" alt="Karise"></p>
<hr>
<p><code>[百度](http://www.baidu.com)</code></p>
<p><strong>预览：</strong></p>
<p><a href="http://www.baidu.com/">百度</a></p>
<hr>
<h1 id="7-文字背景填充"><a href="#7-文字背景填充" class="headerlink" title="7. 文字背景填充"></a>7. 文字背景填充</h1><p>如果你需要个别突出某些文字，可以将文字背景填充，使用 <code>``</code> 将文字包含即可。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">`文字背景填充`</span></span><br></pre></td></tr></table></figure>

<p><strong>预览：</strong></p>
<p><code>文字背景填充</code></p>
<h1 id="8-代码块"><a href="#8-代码块" class="headerlink" title="8. 代码块"></a>8. 代码块</h1><p>如果你是个程序猿（作者也是一只程序猿），需要在文章里优雅的引用一段代码，只需要用三个 ` （是键盘左上角 ~ 下面那个点）把中间的代码包裹起来即可。</p>
<p><code>···objective-c</code><br><code>//代码段</code><br><code>- (void)printHelloWorld &#123;</code><br><code>NSLog(@&quot;Hello World&quot;);</code><br><code>&#125;</code><br><code>···</code></p>
<p><strong>预览：</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码段</span></span><br><span class="line">- (<span class="keyword">void</span>)printHelloWorld &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;Hello World&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="9-表格"><a href="#9-表格" class="headerlink" title="9. 表格"></a>9. 表格</h1><p><code>Markdown</code> 中的表格个人认为也是比较麻烦的，习惯就好，<code>---</code> 上面表示表头，会自动加粗，下面表示表身，<code>:</code> 在左边表示居左，在两边表示居中，在右边表示居右，不写 <code>:</code> 的话表头默认居中，表身默认居左。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| 居左           | 居中          | 居右           |</span><br><span class="line">|:------------- |:-------------:| -------------:|</span><br><span class="line">| 第一行         | 第一行         | 第一行         |</span><br><span class="line">| 第二行         | 第二行         | 第二行         |</span><br><span class="line">| 第三行         | 第三行         | 第三行         |</span><br></pre></td></tr></table></figure>

<p><strong>预览：</strong></p>
<table>
<thead>
<tr>
<th align="left">居左</th>
<th align="center">居中</th>
<th align="right">居右</th>
</tr>
</thead>
<tbody><tr>
<td align="left">第一行</td>
<td align="center">第一行</td>
<td align="right">第一行</td>
</tr>
<tr>
<td align="left">第二行</td>
<td align="center">第二行</td>
<td align="right">第二行</td>
</tr>
<tr>
<td align="left">第三行</td>
<td align="center">第三行</td>
<td align="right">第三行</td>
</tr>
</tbody></table>
<h1 id="10-上标与下标"><a href="#10-上标与下标" class="headerlink" title="10. 上标与下标"></a>10. 上标与下标</h1><p>上标与下标直接用 <code>HTML</code> 中的标签即可，上标使用 <code>&lt;sup&gt;</code> <code>&lt;/sup&gt; </code> ，下标使用 <code>&lt;sub&gt;</code> <code>&lt;/sub&gt;</code>。</p>
<p><code>文字 &lt;sup&gt; 上标 &lt;/sup&gt;</code></p>
<p><strong>预览：</strong></p>
<p>文字 <sup> 上标 </sup></p>
<hr>
<p><code>文字 &lt;sub&gt; 下标 &lt;/sub&gt;</code></p>
<p><strong>预览：</strong></p>
<p>文字 <sub> 下标 </sub></p>
]]></content>
      <categories>
        <category>其他相关</category>
      </categories>
      <tags>
        <tag>其他相关</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub 仓库出现 Repository unavailable due to DMCA takedown. 的解决方法</title>
    <url>/2017/05/27/Other/201705271102/</url>
    <content><![CDATA[<blockquote>
<p>由于的我博客是托管在 <code>GitHub</code> 服务器的，然后前天写完文章发布的时候，突然发布不了了，于是去 <code>GitHub</code> 上面一看，仓库直接提示 <code>Repository unavailable due to DMCA takedown.</code> ，还有一份 <code>JetBrains</code> 的文章清单，里面就有我博客的一篇文章，是的，我的仓库被 <code>JetBrains</code> 举报了，原因是我博客中的那篇文章写了如何破解他们公司的软件，也只能怪自己的版权意识不够，以后这种东西还是不要发出来了，下面分享一下我是怎么恢复仓库的。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="提示信息"><a href="#提示信息" class="headerlink" title="提示信息"></a>提示信息</h2><p>下面是仓库的提示：<code>Repository unavailable due to DMCA takedown.</code> ，仓库无法进行任何操作包括删除。</p>
<p><img data-src="https://file.karise.cn/blog/20190509165019.png" alt="仓库提示"></p>
<p>并且还给我发了一份邮件，通知我的仓库有侵权内容，被封了。</p>
<p><img data-src="https://file.karise.cn/blog/20190509165031.png" alt="邮件通知"></p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>想让仓库恢复原内容好像不可能，但是可以发邮件给 <code>GitHub Support</code> 要求他们帮你删除仓库，仓库删除以后你还是能够重新创建的，如果是 <code>Hexo</code> 博客的话，反正博客在本地电脑上，重新创建仓库再部署上去就可以了，下面是我的邮件记录，可以参考一下。</p>
<ul>
<li>首先我发了一份邮件给 <code>support@github.com</code> ，说我已经把侵权内容给删了，想要申请恢复仓库的使用权或者删除仓库。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165044.png" alt="邮件记录"></p>
<ul>
<li>然后下午就收到了邮件回复，说他们可以帮我永久删除仓库，要发一份邮件来确认删除。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165115.png" alt="邮件记录"></p>
<ul>
<li>然后我看到上面说了 <code>永久删除</code> ，所以我就想问一下删除以后，我还能不能再用 <code>GitHub Pages</code> 来发博客了。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165130.png" alt="邮件记录"></p>
<ul>
<li>他说删除以后其中的内容是不会恢复的，但是还是能够重新创建该仓库的，如果确认想删除请告知他们。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165142.png" alt="邮件记录"></p>
<ul>
<li>然后我就回复说我知道了，我确认要删除仓库。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165157.png" alt="邮件记录"></p>
<ul>
<li>然后他回复说已经帮我把仓库给删除掉了。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165208.png" alt="邮件记录"></p>
<ul>
<li>然后我再进 <code>GitHub</code> ，仓库已经被删除，接着我把那篇侵权文章删除后，重新创建了仓库，把博客重新部署了上去，又恢复了正常的使用。</li>
</ul>
<blockquote>
<p>不得不说 <code>GitHub</code> 的服务还是可以的，邮件回复还是比较快的，当天上午被封的，下午就解决掉了，主要还是自己的版权意识不够，以为这种文章网上一大堆，自己写了发发也没事，自己还是比较意外的，这次长记性了。</p>
</blockquote>
]]></content>
      <categories>
        <category>其他相关</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>其他相关</tag>
        <tag>DMCA</tag>
      </tags>
  </entry>
  <entry>
    <title>将项目同时 push 到 github 、git.oschina 或 gitlab 的方法</title>
    <url>/2017/04/21/Other/201704211034/</url>
    <content><![CDATA[<blockquote>
<p>有时候我们可能需要将一个项目同时 <code>push</code> 到不同的远程仓库，有的人可能会想到每次改动都分别 <code>push</code> 到不同的远程仓库，但是这种方法十分的重复而又低效，非常之蛋疼，如何才能一次同时 <code>push</code> 到不同远程仓库呢，下面就给出方法。</p>
</blockquote>
<a id="more"></a>

<hr>
<p>大家应该都知道 <code>git.oschina</code> 有这样一个功能。</p>
<p><strong>如图：</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509164513.png" alt="从 github 导入"></p>
<p>这个功能可以直接将 <code>github</code> 的项目直接导入 <code>git.oschina</code> ，这样你的项目就同时存到了 <code>github</code> 和 <code>git.oschina</code> ，十分的方便，所以这时候就非常的需要将本地代码同时 <code>push</code> 到这两个远程仓库，否则管理会非常的麻烦。</p>
<h2 id="同时-push-到多个远程仓库"><a href="#同时-push-到多个远程仓库" class="headerlink" title="同时 push 到多个远程仓库"></a>同时 push 到多个远程仓库</h2><ul>
<li>先将需要 <code>push</code> 的代码 <code>clone</code> 到本地，我 <code>clone</code> 的 <code>github</code> 仓库地址：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git@github.com:karise-guo/SimpleNote.git</span><br></pre></td></tr></table></figure>

<ul>
<li>我需要将这份代码同时 <code>push</code> 到 <code>github</code> 和 <code>git.oschina</code> 的仓库，下面是地址：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git@github.com:karise-guo/SimpleNote.git</span><br><span class="line"></span><br><span class="line">git@git.oschina.net:karise/SimpleNote.git</span><br></pre></td></tr></table></figure>

<ul>
<li>用文本编辑器打开本地项目下 <code>.git</code> 文件夹中的 <code>config</code> 文件：</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509164524.png" alt="打开 config 文件"></p>
<ul>
<li><p>这个文件夹在你项目下默认是隐藏的，你可以显示隐藏文件后用 <code>Finder</code> 打开 <code>config</code> 文件，或者使用终端命令来修改 <code>config</code> 文件，具体怎么做我这里就不说了。</p>
</li>
<li><p>我这里是直接使用 <code>Source Tree</code> 这个工具来修改 <code>config</code> 文件，打开项目后选择 <code>设置</code> - <code>远程仓库</code> - <code>编辑配置文件...</code> 就能直接打开 <code>config</code> 文件了。</p>
</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509164558.png" alt="Source Tree"></p>
<ul>
<li>编辑 <code>config</code> 文件，修改 <code>[remote &quot;origin&quot;]</code> 下面的内容:</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[core]</span></span><br><span class="line">	<span class="attr">repositoryformatversion</span> = <span class="string">0</span></span><br><span class="line">	<span class="attr">filemode</span> = <span class="string">true</span></span><br><span class="line">	<span class="attr">bare</span> = <span class="string">false</span></span><br><span class="line">	<span class="attr">logallrefupdates</span> = <span class="string">true</span></span><br><span class="line">	<span class="attr">ignorecase</span> = <span class="string">true</span></span><br><span class="line">	<span class="attr">precomposeunicode</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">[remote</span> <span class="string">&quot;origin&quot;] // 修改此处</span></span><br><span class="line">	<span class="attr">url</span> = <span class="string">git@git.oschina.net:karise/SimpleNote.git</span></span><br><span class="line">	<span class="attr">fetch</span> = <span class="string">+refs/heads/*:refs/remotes/origin/*</span></span><br><span class="line"><span class="meta">[branch</span> <span class="string">&quot;master&quot;]</span></span><br><span class="line">	<span class="attr">remote</span> = <span class="string">origin</span></span><br><span class="line">	<span class="attr">merge</span> = <span class="string">refs/heads/master</span></span><br></pre></td></tr></table></figure>

<p><strong>如图：</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509164613.png" alt="`config` 文件"></p>
<ul>
<li>在 <code>[remote &quot;origin&quot;]</code> 的最后，添加 <code>pushurl</code> 来同时 <code>push</code> 到多个远程仓库：</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[core]</span></span><br><span class="line">	<span class="attr">repositoryformatversion</span> = <span class="string">0</span></span><br><span class="line">	<span class="attr">filemode</span> = <span class="string">true</span></span><br><span class="line">	<span class="attr">bare</span> = <span class="string">false</span></span><br><span class="line">	<span class="attr">logallrefupdates</span> = <span class="string">true</span></span><br><span class="line">	<span class="attr">ignorecase</span> = <span class="string">true</span></span><br><span class="line">	<span class="attr">precomposeunicode</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">[remote</span> <span class="string">&quot;origin&quot;] // 添加 pushurl 来同时 push 到多个远程仓库</span></span><br><span class="line">	<span class="attr">url</span> = <span class="string">git@git.oschina.net:karise/SimpleNote.git</span></span><br><span class="line">	<span class="attr">fetch</span> = <span class="string">+refs/heads/*:refs/remotes/origin/*</span></span><br><span class="line">	<span class="attr">pushurl</span> = <span class="string">git@git.oschina.net:karise/SimpleNote.git</span></span><br><span class="line">	<span class="attr">pushurl</span> = <span class="string">git@github.com:karise-guo/SimpleNote.git</span></span><br><span class="line"><span class="meta">[branch</span> <span class="string">&quot;master&quot;]</span></span><br><span class="line">	<span class="attr">remote</span> = <span class="string">origin</span></span><br><span class="line">	<span class="attr">merge</span> = <span class="string">refs/heads/master</span></span><br></pre></td></tr></table></figure>

<p><strong>如图：</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509164626.png" alt="添加 pushurl"></p>
<ul>
<li>编辑完后 <code>command + s</code> 保存一下，大功告成，接着你使用 <code>git push</code> 就会同时 <code>push</code> 到这两个远程仓库，快测试一下吧。</li>
</ul>
<p><strong>注意：</strong> 上面的 <code>url</code> 默认是你 <code>clone</code> 下来的地址不用管它，下面的 <code>pushurl</code> 默认最下面的地址是你执行 <code>git pull</code> 时的地址，所以你 <code>git pull</code> 想从哪个地址拉取，就写在最下面。 <code>pushurl</code> 可填写多个，你想要同时 <code>push</code> 几个远程仓库就填几个。另外远程仓库的名字可以不一样，但是 <code>Branch</code> 分支，两个仓库必须一样。</p>
]]></content>
      <categories>
        <category>其他相关</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>码云</tag>
        <tag>git.oschina</tag>
        <tag>其他相关</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>为 Git 远程仓库配置 SSH Key 的方法</title>
    <url>/2017/04/17/Other/201704171145/</url>
    <content><![CDATA[<blockquote>
<p>首先，为何要配置 <code>SSH Key</code> ？从 <code>Git</code> 远程仓库 <code>clone</code> 代码的方式有两种，一种是 <code>Https</code> ，另一种是 <code>SSH</code> 。如果使用 <code>Https</code> 方式，不需要任何配置，但是当你 <code>clone</code> 下来后会发现，每次 <code>commit</code> 提交代码，都需要你输入  <code>Git</code> 远程仓库的密码（使用终端操作会这样，有些 <code>Git</code> 管理客户端可能不会），这样就极大的影响了我们的工作效率。这时候就需要使用 <code>SSH</code> 方式了，使用这种方式就不再需要每次都输入密码这么麻烦了，但是需要配置 <code>SSH Key</code> ，配置方法请看下面。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="1-查看是否已经生成过-SSH-Key"><a href="#1-查看是否已经生成过-SSH-Key" class="headerlink" title="1. 查看是否已经生成过 SSH Key"></a>1. 查看是否已经生成过 SSH Key</h2><p>打开终端，输入以下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls ~/.ssh</span><br></pre></td></tr></table></figure>

<p>如果如下图显示有 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 这两个文件，就表示已经生成过，可以直接跳过 <code>生成 SSH Key</code> 这一步。</p>
<p><img data-src="https://file.karise.cn/blog/20190509164416.png" alt="查看是否已经生成过 SSH Key"></p>
<h2 id="2-生成-SSH-Key"><a href="#2-生成-SSH-Key" class="headerlink" title="2. 生成 SSH Key"></a>2. 生成 SSH Key</h2><p>如果上一步验证没有生成过 <code>SSH Key</code> 的话，就输入以下命令来生成 <code>SSH Key</code> ：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/* 下面邮箱改成你自己的个人邮箱就行 */</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;292710547@qq.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>第一次生成的话，直接一路回车，不需要输入密码。不是第一次生成的话，会提示 <code>overwrite (y/n)?</code> 问你是否覆盖旧的 <code>SSH Key</code> ，直接填 <code>y</code> ，然后一直回车就行了，出现如下图就代表 <code>SSH Key</code> 已经生成。</p>
<p><img data-src="https://file.karise.cn/blog/20190509164432.png" alt="生成 SSH Key"></p>
<p>生成以后，<code>~/.ssh</code> 路径下会多出 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 这两个文件， <code>id_rsa</code> 中存的是私钥， <code>id_rsa.pub</code> 中存的是公钥。</p>
<h2 id="3-将私钥添加到-ssh-agent"><a href="#3-将私钥添加到-ssh-agent" class="headerlink" title="3. 将私钥添加到 ssh-agent"></a>3. 将私钥添加到 ssh-agent</h2><ul>
<li>输入以下命令打开 <code>ssh-agent</code> ：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(ssh-agent -s)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>输入以下命令将私钥添加到 <code>ssh-agent</code>：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>

<h2 id="4-将公钥添加到远程仓库"><a href="#4-将公钥添加到远程仓库" class="headerlink" title="4. 将公钥添加到远程仓库"></a>4. 将公钥添加到远程仓库</h2><p>以 <code>GitHub</code> 为例，使用文本编辑器打开 <code>~/.ssh</code> 路径下 <code>id_rsa.pub</code> 这个文件，将里面的公钥复制，然后打开 <code>GitHub</code> 的个人设置，如下图将公钥添加即可。</p>
<p><img data-src="https://file.karise.cn/blog/20190509164444.png" alt="添加 SSH Key"></p>
<p><strong>注意：</strong> <code>~/.ssh</code>这个文件夹是默认隐藏的，如果找不到的话可以使用以下命令，直接复制 <code>id_rsa.pub</code> 中的内容。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/* macOS 系统 */</span><br><span class="line">pbcopy &lt; ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line">/* windows 系统 */</span><br><span class="line">clip &lt; ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line">/* Linux 系统 */</span><br><span class="line">sudo apt-get install xclip</span><br><span class="line">xclip -sel clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>添加完 <code>SSH Key</code> 以后，你就可以开始使用 <code>SSH</code> 方式 <code>clone</code> 代码了，之后 <code>commit</code> 提交代码再也不用输入密码了，但是如果你之前代码是用 <code>Https</code> 方式 <code>clone</code> 下来的，需要用 <code>SSH</code> 方式重新 <code>clone</code> 一下，或者修改 <code>.git</code> 文件夹下 <code>config</code> 中的 <code>url</code> 才行，如何修改我就不说了，嫌麻烦就直接重新 <code>clone</code> 吧。</p>
<blockquote>
<p>具体方法就是这样，并不麻烦，一般来说一台电脑只需要生成一次 <code>SSH Key</code> 就行了，不同的 <code>Git</code> 远程仓库都添加这同一个 <code>SSH Key</code> 就行了，有什么问题或者建议可以提出来。</p>
</blockquote>
]]></content>
      <categories>
        <category>其他相关</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>其他相关</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 Git 默认不区分文件名大小写的问题</title>
    <url>/2017/05/31/Other/201705311603/</url>
    <content><![CDATA[<blockquote>
<p>不得不说 <code>Git</code> 默认不区分文件名大小写真是一个大坑，由于之前的项目目录比较乱，项目下的文件夹命名都不规范，这两天一直在整理，然后今天从服务器将项目重新 <code>clone</code> 下来后发现，之前将所有文件名首字母改成大写的改动全部没变，本地又测试了一下后发现 <code>Git</code> 提交文件名称默认是不区分大小写的，之前的整理又得重新做一遍，下面就分享一下怎么解决这个问题。</p>
</blockquote>
<a id="more"></a>

<hr>
<ul>
<li><p>当你创建一个仓库后，添加一个文件叫 <code>README.md</code> ，然后再提交推送到远程仓库。</p>
</li>
<li><p>然后你在本地将刚才的文件名修改为 <code>readme.md</code> ，接着你去提交，发现没有任何改动可以提交。</p>
</li>
<li><p>所以 <code>Git</code> 默认对于文件名大小写是不敏感的，所以上面虽然修改了文件名大小写，但是 <code>Git</code> 并没有发现有任何的改动。</p>
</li>
</ul>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ul>
<li>打开终端 <code>cd</code> 到本地项目的 <code>Git</code> 仓库下，输入以下命令来配置 <code>Git</code> 使其对文件名大小写敏感。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config core.ignorecase <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>修改完成后，当你修改文件名大小写时，<code>Git</code> 就会提示有提交信息了。</p>
</li>
<li><p>但是这时候如果直接提交推送的话，会出现一个情况，本地仓库明明只有一个文件，并且文件名改成了小写 <code>readme.md</code> 。</p>
</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509164644.png" alt="本地仓库"></p>
<ul>
<li>但是远程仓库上大写的 <code>README.md</code> 却没有被删除，居然同时存在了，并且 <code>Git</code> 也没有提示任何的提交信息，这个非常之坑。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509164655.png" alt="远程仓库"></p>
<ul>
<li>更加坑爹的是当你把本地仓库删掉后，重新从远程仓库 <code>clone</code> 下来发现，还是只有小写的 <code>readme.md</code> 这一个文件。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509164707.png" alt="本地仓库"></p>
<ul>
<li>至于为什么会这样，我也不知道，只能等待大神来解释一下，我的解决办法就是先将原来的大写文件 <code>README.md</code> 从远程仓库删除，然后再将修改后的 <code>readme.md</code> 添加进去再提交推送。</li>
</ul>
]]></content>
      <categories>
        <category>其他相关</category>
      </categories>
      <tags>
        <tag>其他相关</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 fds 来 mock 模拟 http 接口数据的方法</title>
    <url>/2017/08/10/Other/201708101829/</url>
    <content><![CDATA[<blockquote>
<p>本人是一名 <code>iOS</code> 开发工程师，在平时的开发过程中，在后台接口没有写好的时候，经常需要自己模拟各种接口数据，这里介绍一个简单易用的 <code>mock</code> 工具：<a href="https://github.com/zhex/fe-dev-server">fds</a> ，<code>fds</code> 是用 <code>node.js</code> 开发的一个 <code>mock</code> 工具，可以模拟 <code>http</code> 接口请求的响应，安装后只需两步配置即可 <code>mock</code> 一个接口，下面就说一下使用方法。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="1-安装-fds-服务器"><a href="#1-安装-fds-服务器" class="headerlink" title="1. 安装 fds 服务器"></a>1. 安装 fds 服务器</h2><ul>
<li>首先安装 <code>node.js</code> 的包管理工具 <code>npm</code> ，不知道怎么装的点击 <a href="https://github.com/nodejs-tw/nodejs-little-book/blob/master/zh-tw/node_npm.rst">这里</a> ，安装好 <code>npm</code> 后在终端执行以下命令即可安装 <code>fds</code> 。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g fe-dev-server</span><br></pre></td></tr></table></figure>

<ul>
<li>安装完 <code>fds</code> 后将 <a href="https://github.com/zyc945/FdsMockDemo">FdsMockDemo</a> 项目 <code>clone</code> 到本地，项目包括了<code>mock server</code> 的配置文件，以及几个 <code>mock</code> 接口的 <code>demo</code> 。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:zyc945/FdsMockDemo.git</span><br></pre></td></tr></table></figure>

<h2 id="2-mock-接口"><a href="#2-mock-接口" class="headerlink" title="2. mock 接口"></a>2. mock 接口</h2><p>下面以模拟 <code>http://localhost:9999/test/users</code> 这个接口为例。</p>
<ul>
<li>在 <code>FdsMockDemo</code> 的 <code>mocks / api</code> 目录下创建 <code>json</code> 文件，名字随便起，这里以 <code>test.json</code> 为例，然后编辑为你想要的 <code>json</code> 数据。</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;李四&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;王五&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>编辑完 <code>json</code> 数据后，开始配置 <code>router</code> 规则，也就是编辑接口、数据映射路径，打开 <code>FdsMockDemo</code> 下的 <code>routes.js</code> 文件，添加以下配置。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;/test/users&#x27;</span>: <span class="string">&#x27;mock::/api/test.json&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>这句配置命令的前半部分是需要 <code>mock</code> 的接口，可以根据你项目的实际接口随便命名，后半部分是 <code>mock</code> 的 <code>json</code> 数据的地址，<code>mock::</code> 表示 <code>mock</code> 数据根路径固定为 <code>mocks</code> 目录，数据统一放在 <code>mocks</code> 子目录下。</p>
</li>
<li><p>接口默认是 <code>GET</code> 请求的，如果要 <code>POST</code> 请求，就需要在前半部分加上 <code>POST::</code> ，例如下面这样。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;POST::/test/users&#x27;</span>: <span class="string">&#x27;mock::/api/test.json&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-运行-fds-服务器"><a href="#3-运行-fds-服务器" class="headerlink" title="3. 运行 fds 服务器"></a>3. 运行 fds 服务器</h2><ul>
<li>打开终端 <code>cd</code> 到 <code>FdsMockDemo</code> 目录下，输入以下命令即可运行 <code>mock</code> 服务器。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">fds</span><br></pre></td></tr></table></figure>

<ul>
<li><code>mock</code> 服务器运行以后，默认监听 <code>9999</code> 端口，使用 <code>mock</code> 接口时修改接口地址为 <code>本机 ip 地址:9999</code> 即可，刚才 <code>mock</code> 的数据只需请求 <a href="http://localhost:9999/test/users">http://localhost:9999/test/users</a> 接口即可得到 <code>mock</code> 的接口数据。</li>
</ul>
<p>配置方法非常简单，开发测试起来也方便很多，最后附上本文 <a href="http://www.jianshu.com/p/57c251fcc3cd">参考地址</a> 。</p>
]]></content>
      <categories>
        <category>其他相关</category>
      </categories>
      <tags>
        <tag>其他相关</tag>
        <tag>fds</tag>
        <tag>mock</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Vultr 搭建 SSR 服务器的方法</title>
    <url>/2018/01/06/Other/201801061653/</url>
    <content><![CDATA[<blockquote>
<p>身为一个开发人员由于经常要用到谷歌，所以访问外网是不可避免的，但是由于网上大多数 <code>SS</code> 账号都被封了，于是决定自己搭建一个服务器，价格也不贵而且也方便管理，这里就记录一下搭建方法。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="1-购买-VPS-服务器"><a href="#1-购买-VPS-服务器" class="headerlink" title="1. 购买 VPS 服务器"></a>1. 购买 VPS 服务器</h2><ul>
<li><p>首先前往 <a href="https://my.vultr.com/">Vultr</a> 官网注册一个账号。</p>
</li>
<li><p>我这边使用的服务器价格花费是 <code>$5.0</code> 一个月，折合 <code>RMB</code> 大概 <code>34</code> 块左右，现在 <code>$2.5</code> 美元一个月的服务器配置已经不支持 <code>IPV4</code> 了，所以最低只能用 <code>$5.0</code> 一个月的了。</p>
</li>
<li><p>虽然是 <code>$5.0</code> 一个月，但是 <code>Vultr</code> 的服务器实际是按小时扣费的，这样的好处就是可以随时更换服务器，反正是按小时扣费的。</p>
</li>
<li><p>部署服务器之前，需要先充钱到账户里，选择左侧菜单中的 <code>Billing</code> ，<code>Vultr</code> 已经支持支付宝支付了，选择 <code>Alipay</code> 然后充值最低金额 <code>$10</code> 就行了，折合 <code>RMB</code> 大概 <code>65</code> 块左右。</p>
</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509172623.jpg"></p>
<ul>
<li>充值完以后，就可以开始购买 <code>VPS</code> 服务器了，选择左侧菜单中的 <code>Servers</code> ，选择右上角的 <code>+</code> 前往服务器选择页面。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509172635.jpg"></p>
<ul>
<li>选择一个服务器的地区，这里可以根据自己的需求选择，建议选择 <code>日本(Tokyo)</code> 或 <code>新加坡(Singapore)</code> ，因为离我们比较近可能速度会快一点，我这里选择的是 <code>New York (NJ)</code> 。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509172647.jpg"></p>
<ul>
<li>然后选择 <code>CentOS 6 x64</code> 系统，这里要注意是 <code>6 x64</code> ，不要选择 <code>7 x64</code> ，<code>CentOS 7</code> 默认的防火墙可能会干扰 <code>SSR</code> 的正常连接！（点击 <code>7 x64</code> 的文字就可以切换成 <code>6 x64</code>）</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509172700.jpg"></p>
<ul>
<li>然后选择系统配置，这里要选择 <code>$5.0</code> 一个月的配置，<code>$2.5</code> 一个月的配置已经不支持 <code>IPV4</code> 了，所以用不了。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509172711.jpg"></p>
<ul>
<li>然后附加功能里除了收费选，其他全部选中。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509172722.jpg"></p>
<ul>
<li>最后选择 <code>Deploy Now</code> 开始部署服务器。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509172733.jpg"></p>
<h2 id="2-部署-VPS-服务器"><a href="#2-部署-VPS-服务器" class="headerlink" title="2. 部署 VPS 服务器"></a>2. 部署 VPS 服务器</h2><ul>
<li>部署完成后就可以在 <code>Servers</code> 里面看到你部署好的服务器了，点击 <code>Manage</code> 查看服务器信息。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509172748.jpg"></p>
<ul>
<li>在这里可以查看到服务器的所有信息，记下服务器的 <code>IP</code> 和 <code>密码</code>。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509172802.jpg"></p>
<ul>
<li>然后开始连接服务器，打开终端输入以下命令连接到服务器，<code>xxx</code> 处替换成你服务器的 <code>IP</code> 地址（我这里用的是 <code>mac</code> 系统，就只说 <code>mac</code> 系统的连接方法了，<code>windows</code> 系统的话可以用 <code>Xshell</code> 这个软件来连接，可以看 <a href="https://github.com/Alvin9999/new-pac/wiki/%E8%87%AA%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B">这篇文章</a> ）。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh root@xxx</span><br></pre></td></tr></table></figure>

<ul>
<li>接着将服务器密码粘贴上去回车即可连接，连接成功后依次输入以下命令来安装 <code>ShadowsocksR</code> 。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum -y install wget</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure>

<ul>
<li>出现以下界面后，输入 <code>1</code> 然后回车开始安装 <code>ShadowsocksR</code>（如果没有出现以下界面，说明上面地址失效了，网上重新找一个 <code>SSR</code> 安装脚本地址即可）。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509172817.jpg"></p>
<ul>
<li><p>接着根据提示输入内容，<code>端口号</code> 和 <code>密码</code> 输入自己想要的即可，如果就想用默认的直接回车即可。</p>
</li>
<li><p><code>加密方式</code> 可以选择 <code>aes-256-cfb</code> 。</p>
</li>
<li><p><code>协议插件</code> 我这边使用的是 <code>origin</code> ，接着会提示 <code>是否设置协议插件兼容原版</code> ，这里的原版指的是 <code>SS</code> 客户端，这里选择 <code>y</code> 。</p>
</li>
<li><p><code>混淆插件</code> 可以选择使用默认的，但是有的地区需要把混淆设置成 <code>plain</code> 才好用，因为混淆不总是有效果，要看各地区策略的，我这边选择的是 <code>plain</code> ，然后 <code>兼容原版</code> 同上。</p>
</li>
<li><p>之后会依次提示你对 <code>设备数</code> 、<code>单线程限速</code> 和 <code>端口总限速</code> 进行设置，默认值是 <code>无限</code> ，个人使用的话，选择默认值即可，直接敲回车键。</p>
</li>
<li><p>之后代码就正式自动部署了，会提示你下载文件，输入 <code>y</code> 开始部署。</p>
</li>
<li><p>最后出现如下界面表示部署成功，界面中会显示你的 <code>SSR</code> 账号信息。</p>
</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509172828.jpg"></p>
<ul>
<li>之后如果还想查看 <code>SSR</code> 账号信息的话，输入以下命令即可。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bash ssr.sh</span><br></pre></td></tr></table></figure>

<h2 id="3-加速-VPS-服务器"><a href="#3-加速-VPS-服务器" class="headerlink" title="3. 加速 VPS 服务器"></a>3. 加速 VPS 服务器</h2><p>此加速为谷歌 <code>BBR</code> 加速，<code>Vultr</code> 的服务器框架可以装 <code>BBR</code> 加速，加速后对速度的提升很明显，所以推荐部署加速脚本，该加速方法是开机自动启动，部署一次就可以了。</p>
<ul>
<li>依旧是在服务器环境下，输入以下命令开始部署 <code>BBR</code> 加速。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; bash bbr.sh</span><br></pre></td></tr></table></figure>

<ul>
<li>接着会提示让你按下任意键开始部署，然后等待自动部署完成即可，成功后会出现 <code>Complete!</code> ，接着输入 <code>y</code> 重启服务器即可。</li>
</ul>
<h2 id="4-SSR-客户端下载"><a href="#4-SSR-客户端下载" class="headerlink" title="4. SSR 客户端下载"></a>4. SSR 客户端下载</h2><p>配置完以后就可以使用 <code>SSR</code> 客户端来尝试是否能访问 <a href="https://www.google.com/">Google</a>，还有一点要注意如果要用 <code>SS</code> 客户端的话，上面配置中的 <code>协议</code> 必须为 <code>origin</code> ，混淆必须为 <code>plain</code> ，这样就可以使用 <code>SS</code> 客户端了（即 <code>协议</code> 和 <code>混淆</code> 可以不填）。</p>
<ul>
<li><p><code>Mac</code> 版 <code>SSR</code> 客户端 <a href="https://github.com/shadowsocksr-backup/ShadowsocksX-NG/releases">下载地址</a>、<a href="https://nofile.io/f/jgMWFwCBonU#ab0d3c3b6ac54482">备用下载地址</a>。</p>
</li>
<li><p><code>Windows</code> 版 <code>SSR</code> 客户端 <a href="https://github.com/shadowsocksr-backup/shadowsocksr-csharp/releases">下载地址</a>、<a href="https://nofile.io/f/6Jm7WJCyOVv/ShadowsocksR-4.7.0-win.7z">备用下载地址</a>。</p>
</li>
<li><p><code>Android</code> 版 <code>SSR</code> 客户端 <a href="https://github.com/shadowsocksr-backup/shadowsocksr-android/releases/download/3.4.0.8/shadowsocksr-release.apk">下载地址</a>、<a href="https://nofile.io/f/rvTJoj0h5GC/shadowsocksr-release.apk">备用下载地址</a>。</p>
</li>
<li><p><code>iOS</code> 版 <code>SSR</code> 客户端：<code>Potatso Lite</code>、<code>Potatso</code>、<code>shadowrocket</code> 都可以作为 <code>SSR</code> 客户端，但这些软件目前已经在国内的 <code>App Store</code> 下架，可以用美区的 <code>AppID</code> 账号来下载，国内的话可以用 <code>SuperWingy</code>，但这是 <code>SS</code> 客户端，不支持 <code>SSR</code>。</p>
</li>
</ul>
<blockquote>
<p>过程还是比较简单的，都是无脑一键部署的，本文参考地址：<a href="https://github.com/Alvin9999/new-pac/wiki/%E8%87%AA%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B">自建ss服务器教程</a> ，有不懂的地方也可以看看这篇文章。</p>
</blockquote>
]]></content>
      <categories>
        <category>其他相关</category>
      </categories>
      <tags>
        <tag>Vultr</tag>
        <tag>SS</tag>
        <tag>SSR</tag>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 忘记访问限制的密码后找回的方法</title>
    <url>/2018/01/29/Other/201801291605/</url>
    <content><![CDATA[<blockquote>
<p>先说明一下不是解锁密码，是 <code>设置 - 通用 - 访问限制</code> 的密码，本人亲测已经成功找回，并且不需要恢复或升级 <code>iPhone</code> 系统、不需要恢复备份、不需要越狱，所以数据不会丢失一个字节，此方法适用于：<code>iOS 11/10/9/8/7/6/5 (iPhone, iPod &amp; iPad)</code> 。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="苹果官网的方法"><a href="#苹果官网的方法" class="headerlink" title="苹果官网的方法"></a>苹果官网的方法</h2><p>由于 <code>访问限制</code> 的密码只会在设置的时候进行验证，而且没有提示，如果自己不记录或者随意设置密码的话，时间一长，就很容易忘记。</p>
<p>根据官网的方法需要恢复 <code>iPhone</code> ，并且重置为新 <code>iPhone</code> ，才能清除 <code>访问限制密码</code> ，所以 <code>iPhone</code> 中的所有数据都会丢失，如果通过恢复 <code>iPhone</code> 的 <code>iTunes</code> 备份，<code>访问限制密码</code> 仍然与备份前一样，而且输入密码的错误次数仍然也记录着。</p>
<p>不过，可以通过无数次的尝试来猜密码，猜得次数达到 <code>6</code> 次左右，就需要等待一个小时才能再猜，这时只能恢复 <code>iTunes</code> 备份才可以将猜错的次数清空，但是密码依旧在。</p>
<h2 id="密码找回的方法"><a href="#密码找回的方法" class="headerlink" title="密码找回的方法"></a>密码找回的方法</h2><ul>
<li><p>首先需要将当前的手机系统备份一下，可以用 <a href="https://www.apple.com/cn/itunes/download/">iTunes</a> 或者其他的手机管理工具来备份，备份的时候不要选择 <code>备份加密</code> 选项，下面是不同系统下 <code>iTunes</code> 默认备份的目录。</p>
</li>
<li><p><strong>Windows 系统：</strong> 打开计算机，在路径中输入 <code>%appdata%</code>（英文，建议复制），然后回车，然后依次打开文件夹 <code>Apple Computer\MobileSync\Backup\</code> 。</p>
</li>
<li><p><strong>macOS 系统：</strong> 打开 <code>Finder</code> ，按下 <code>shift + command + G</code> 打开前往文件夹，然后输入 <code>~/Library/Application Support/MobileSync/Backup/</code> 前往即可。</p>
</li>
<li><p>备份完以后到自己系统相应路径下，找到刚才自己的备份目录，然后找到一个名为 <code>39</code> 的文件夹。</p>
</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509172353.jpg"></p>
<ul>
<li>然后在 <code>39</code> 文件夹下找到一个名为 <code>398bc9c2aeeab4cb0c12ada0f52eea12cf14f40b</code> 的文件。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509172404.jpg"></p>
<ul>
<li><code>Windows</code> 系统可以用记事本打开，<code>Mac</code> 直接双击打开即可，打开后找到如下的两串字符。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509172416.jpg"></p>
<ul>
<li>然后打开 <a href="http://ios7hash.derson.us/">密码解析网站</a> ，将较长的一串复制到 <code>RestrictionsPasswordKey</code> 中，较短的一串复制到 <code>RestrictionsPasswordSalt</code> 中，然后点击 <code>Search for Code</code> 。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509172428.jpg"></p>
<ul>
<li>然后程序会从 <code>0000</code> 开始逐一递增进行密码匹配，一直到找到密码为止，设置的密码数字越大，匹配的时间越长，匹配成功后会跳出提示。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509172440.jpg"></p>
<ul>
<li>此方法是通过 <code>JavaScript</code> 脚本进行计算破解的，所以运行的速度与本地电脑的配置有关，也可以同时打开多个页面，设置不同的 <code>Starting Passcode</code> 和 <code>Last Search Code</code> ，分段进行搜索，从而提高搜索的速度。</li>
</ul>
]]></content>
      <categories>
        <category>其他相关</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>iPhone</tag>
        <tag>访问限制</tag>
        <tag>忘记密码</tag>
      </tags>
  </entry>
  <entry>
    <title>【PHP 开发】mac 下配置 PHP 环境的方法</title>
    <url>/2017/06/12/PHP/201706121218/</url>
    <content><![CDATA[<blockquote>
<p>最近在试着将 <code>showdoc</code> 配置到自己服务器上，需要 <code>PHP</code> 环境，所以自己配置了一下，这里将方法记录一下。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="1-开启-Apache-服务"><a href="#1-开启-Apache-服务" class="headerlink" title="1. 开启 Apache 服务"></a>1. 开启 Apache 服务</h2><p><code>Mac</code> 系统下是自带 <code>Apache</code> 服务的，只需要开启即可，下面是几个 <code>Apache</code> 服务的常用命令。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/* 启动 Apache 服务 */</span><br><span class="line">sudo apachectl start</span><br><span class="line"></span><br><span class="line">/* 重启 Apache 服务 */</span><br><span class="line">sudo apachectl restart</span><br><span class="line"></span><br><span class="line">/* 停止 Apache 服务 */</span><br><span class="line">sudo apachectl stop</span><br><span class="line"></span><br><span class="line">/* 查看 Apache 版本 */</span><br><span class="line">httpd -v</span><br></pre></td></tr></table></figure>

<ul>
<li>打开终端输入以下命令开启 <code>Apache </code> 服务。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apachectl start</span><br></pre></td></tr></table></figure>

<ul>
<li>打开浏览器在地址栏输入 <a href="http://localhost/">http://localhost</a> ，如果出现 <code>It Works</code> 就表示 <code>Apache </code> 服务开启成功。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509164721.png" alt="启动 Apache 服务"></p>
<ul>
<li><code>Apache</code> 的网站服务器默认根目录在下面这个路径下。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;Library&#x2F;WebServer&#x2F;Documents</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 你的 <code>Mac</code> 下如果装有 <code>Server</code> 这个软件要卸载掉（图标是蓝色地球的那个），否则输入 <a href="http://localhost/">http://localhost</a> 会显示 <code>Server</code> 的信息会冲突，具体原因我没去管，有兴趣的可以了解一下。</p>
<h2 id="2-配置-PHP-环境"><a href="#2-配置-PHP-环境" class="headerlink" title="2. 配置 PHP 环境"></a>2. 配置 PHP 环境</h2><p><code>Mac</code> 系统下也是自带 <code>PHP</code> 环境的，只要将其打开即可，如果想另外自行安装的话，就自己去搜一下吧。</p>
<ul>
<li>打开 <code>Finder</code> ，然后按下 <code>shift + command + G</code> 打开前往文件夹，前往以下地址：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;apache2&#x2F;httpd.conf</span><br></pre></td></tr></table></figure>

<ul>
<li>打开 <code>httpd.conf</code> 这个文件，找到下面这一行，然后将前面的 <code>#</code> 注释符去掉，然后 <code>command + s</code> 保存。</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">LoadModule</span> <span class="string">php5_module libexec/apache2/libphp5.so</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://file.karise.cn/blog/20190509164740.png" alt="开启PHP环境"></p>
<ul>
<li>输入以下命令重启 <code>Apache </code> 服务。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apachectl restart</span><br></pre></td></tr></table></figure>

<ul>
<li>打开 <code>Finder</code> ，然后按下 <code>shift + command + G</code> 打开前往文件夹，前往以下地址，这个地址是 <code>Apache</code> 的默认网站服务器根目录。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;Library&#x2F;WebServer&#x2F;Documents</span><br></pre></td></tr></table></figure>

<ul>
<li>新建一个名为 <code>phpinfo.php</code> 的文件，在里面输入以下代码后，<code>command + s</code> 保存。</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">phpinfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>打开浏览器在地址栏输入 <a href="http://localhost/phpinfo.php">http://localhost/phpinfo.php</a> ，跳出以下信息就表示 <code>PHP</code> 环境配置成功。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509164757.png" alt="phpinfo"></p>
<blockquote>
<p>这里配置的是 <code>Mac</code> 系统自带的 <code>PHP</code> 环境，想另外安装的就自己去搜一下吧。</p>
</blockquote>
]]></content>
      <categories>
        <category>PHP 开发</category>
      </categories>
      <tags>
        <tag>PHP 开发</tag>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>【PHP 开发】mac 在 PHP 环境安装 mcrypt 扩展的方法</title>
    <url>/2017/06/12/PHP/201706121613/</url>
    <content><![CDATA[<blockquote>
<p>最近在试着将 <code>showdoc</code> 配置到自己服务器上，所以需要 <code>PHP</code> 环境，然后要安装 <code>mcrypt</code> 扩展，不得不说这真是一个大坑，由于自己对 <code>PHP</code> 了解不多，网上的教程很多大坑都没有提到，装了不知道多少次才走出大坑，所以就写下来记录一下。</p>
</blockquote>
<a id="more"></a>

<hr>
<p>首先 <code>PHP</code> 环境这个就不说了，没配置的可以看我的另一篇文章：<a href="http://www.jianshu.com/p/6ba5b716feaf">【PHP 开发】mac 下配置 PHP 环境的方法</a> 。</p>
<h2 id="安装-mcrypt"><a href="#安装-mcrypt" class="headerlink" title="安装 mcrypt"></a>安装 mcrypt</h2><p>安装 <code>mcrypt</code> 有两种方法，可以使用 <code>Homebrew </code> 来自动安装 <code>mcrypt</code> 所需依赖包，也可以自行下载所需依赖包来安装，我都写在下面。</p>
<h3 id="1-使用-Homebrew-安装-mcrypt"><a href="#1-使用-Homebrew-安装-mcrypt" class="headerlink" title="1. 使用 Homebrew 安装 mcrypt"></a>1. 使用 Homebrew 安装 mcrypt</h3><p><code>Homebrew</code> 是一个软件包管理器，想要了解更多可以点击 <a href="https://brew.sh/index_zh-cn.html">这里</a> ，安装方法打开终端，输入以下命令进行安装，中间会让你输入密码，然后等待安装完成即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;ruby -e &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;install)&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果 <code>Homebrew </code> 已经安装完成，就可以打开终端，输入以下命令查看是否有 <code>mcrypt</code> 依赖包。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew search mcrypt</span><br></pre></td></tr></table></figure>

<ul>
<li>有的话，就输入以下命令会安装 <code>mcrypt</code> 所需依赖包。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install mcrypt</span><br></pre></td></tr></table></figure>

<h3 id="2-自己下载依赖包安装"><a href="#2-自己下载依赖包安装" class="headerlink" title="2. 自己下载依赖包安装"></a>2. 自己下载依赖包安装</h3><ul>
<li><p>分别下载这三个 <code>mcrypt</code> 所需的依赖包：<a href="https://sourceforge.net/projects/mcrypt/files/Libmcrypt/2.5.8/">libmcrypt</a>、<a href="https://sourceforge.net/projects/mhash/files/mhash/0.9.9.9/">mhash</a>、<a href="https://sourceforge.net/projects/mcrypt/files/MCrypt/2.6.8/">mcrypt</a> ，下载完成后全部解压出来。</p>
</li>
<li><p>先安装 <code>libmcrypt</code> ，打开终端 <code>cd</code> 到 <code>libmcrypt</code> 目录下，分别输入以下命令进行安装。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<ul>
<li>在安装 <code>mhash</code> ， <code>cd</code> 到 <code>mhash</code> 目录下，分别输入以下命令进行安装。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<ul>
<li>最后安装 <code>mcrypt</code> ，由于在安装 <code>mcrypt</code> 时，会找不到 <code>libmcrypt</code> 的链接库，导致无法编译，所以在安装 <code>mcrypt</code> 时要加入 <code>LD_LIBRARY_PATH=/usr/local</code> 导入链接库，<code>cd</code> 到 <code>mcrypt</code> 目录下，分别输入以下命令进行安装。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LD_LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;lib&#x2F; .&#x2F;configure -with-libmcrypt-prefix&#x3D;&#x2F;usr&#x2F;local</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 如果安装 <code>mcrypt</code> 时，如果输入 <code>make</code> 报 <code>rfc2440.c:26:10: fatal error: &#39;malloc.h&#39; file not found</code> 错误，只需要找到 <code>mcrypt</code> 文件夹下的 <code>rfc2440.c</code> 这个文件，将 <code>#include &lt;malloc.h&gt;</code> 头文件改为 <code>#include &lt;sys/malloc.h&gt;</code> ，然后重新安装即可。</p>
<p><img data-src="https://file.karise.cn/blog/20190509164819.png" alt="报错"></p>
<h2 id="安装-PHP-扩展"><a href="#安装-PHP-扩展" class="headerlink" title="安装 PHP 扩展"></a>安装 PHP 扩展</h2><h3 id="1-生成-mcrypt-so-文件"><a href="#1-生成-mcrypt-so-文件" class="headerlink" title="1. 生成 mcrypt.so 文件"></a>1. 生成 mcrypt.so 文件</h3><ul>
<li>首先进入官网下载源码包：<a href="http://php.net/downloads.php">http://php.net/downloads.php</a> ，然后下载与自己电脑上 <code>PHP</code> 版本一致的源码包，打开终端输入以下命令即可查看 <code>PHP</code> 版本。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php -v</span><br></pre></td></tr></table></figure>

<ul>
<li>下载完成后解压出来，然后打开终端 <code>cd</code> 到 <code>PHP</code> 源码包下的 <code>/ext/mcrypt</code> 文件夹下，分别输入以下命令。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">phpize</span><br><span class="line"></span><br><span class="line">.&#x2F;configure</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">sudo cp modules&#x2F;mcrypt.so &#x2F;usr&#x2F;lib&#x2F;php&#x2F;extensions&#x2F;no-debug-non-zts-20090626&#x2F;</span><br></pre></td></tr></table></figure>

<ul>
<li>全部执行成功后，可以前往上面写的 <code>/usr/lib/php/extensions/no-debug-non-zts-20090626</code> 这个路径下，看一下里面是否有 <code>mcrypt.so</code> 这个文件，有的话就是生成成功了。</li>
</ul>
<p><strong>注意：</strong> 这边有三个大坑，坑以及解决方法我都罗列在下面。</p>
<p><strong>第一个坑：</strong> 输入 <code>./configure</code> 不能执行。</p>
<ul>
<li>解决方法是点击 <a href="http://ftp.gnu.org/gnu/autoconf/">这里</a> 拉到最下面下载 <code>autoconf-latest.tar.gz</code> ，然后解压出来，打开终端 <code>cd</code> 到 <code>autoconf </code> 目录下，分别输入以下命令进行安装。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<ul>
<li>安装完成后 <code>./configure</code> 就可以执行了。</li>
</ul>
<p><strong>第二个坑：</strong> 在执行 <code>sudo cp modules/mcrypt.so /usr/lib/php/extensions/no-debug-non-zts-20090626/</code> 时报下面这个错误，错误显示是文件夹不存在。</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp: directory &#x2F;usr&#x2F;lib&#x2F;php&#x2F;extensions&#x2F;no-debug-non-zts-20090626 does not exist</span><br></pre></td></tr></table></figure>

<ul>
<li>解决方法是打开 <code>Finder</code> ，按下 <code>shift + command + G</code> ，前往以下地址。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;lib&#x2F;php&#x2F;extensions</span><br></pre></td></tr></table></figure>

<ul>
<li>然后可以看到有几个存在文件夹，将上面路径中的 <code>20090626</code> 这个日期改成你电脑中有的那个日期，日期取最新的。</li>
</ul>
<p><strong>第三个坑：</strong> 改完路径后继续执行 <code>sudo cp modules/mcrypt.so /usr/lib/php/extensions/no-debug-non-zts-20131226/</code> 这一步，结果又报如下错误，错误显示是操作不允许，没有权限。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp: &#x2F;usr&#x2F;lib&#x2F;php&#x2F;extensions&#x2F;no-debug-non-zts-20131226&#x2F;#INST@17000#: Operation not permitted</span><br></pre></td></tr></table></figure>

<p>最后查了半天终于知道问题所在，当你进入 <code>/usr/lib/php/extensions</code> 目录时你会发现目录根本无法进行任何操作，原来是 <code>mac</code> 的系统新添加了一个新的安全机制叫 <code>系统完整性保护System Integrity Protection (SIP)</code> ，所以对于目录 <code>/System</code> 、<code>/sbin</code>、<code>/usr（不包含/usr/local/）</code> 仅仅供系统使用，其它用户或者程序无法直接使用，而我们的 <code>/usr/lib/php/extensions</code> 刚好在受保护范围内。</p>
<ul>
<li>解决方法是禁用 <code>SIP</code> 保护机制，步骤如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 重启系统</span><br><span class="line">- 按住 Command + R 进入恢复模式</span><br><span class="line">- 点击 “实用工具” 菜单中的 “终端”</span><br><span class="line">- 输入：csrutil disable</span><br><span class="line">- 执行后会输出：Successfully disabled System Integrity Protection. Please restart the machine for the changes to take effect.</span><br><span class="line">- 再次重启系统</span><br></pre></td></tr></table></figure>

<ul>
<li>禁用掉 <code>SIP</code> 后，就可以顺利的执行了，当然最后装完了以后你可以重新打开 <code>SIP</code> ，方法同上，只是终端中输入的命令改为 <code>csrutil enable</code> 。</li>
</ul>
<h3 id="2-修改-php-ini-文件"><a href="#2-修改-php-ini-文件" class="headerlink" title="2. 修改 php.ini 文件"></a>2. 修改 php.ini 文件</h3><ul>
<li>打开 <code>Finder</code> ，按下 <code>shift + command + G</code> ，前往以下地址。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;php.ini</span><br></pre></td></tr></table></figure>

<ul>
<li>打开 <code>php.ini</code> 文件，在最下面添加以下代码。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extension&#x3D;mcrypt.so</span><br></pre></td></tr></table></figure>

<p><img data-src="https://file.karise.cn/blog/20190509164838.png" alt="修改 php.ini 文件"></p>
<ul>
<li>然后输入以下命令重启 <code>Apache</code> 服务。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apachectl restart</span><br></pre></td></tr></table></figure>

<h2 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h2><ul>
<li>打开 <code>Finder</code> ，然后按下 <code>shift + command + G</code> 前往以下地址，这个地址是 <code>Apache</code> 的默认网站服务器根目录。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;Library&#x2F;WebServer&#x2F;Documents</span><br></pre></td></tr></table></figure>

<ul>
<li>新建一个名为 <code>phpinfo.php</code> 的文件，在里面输入以下代码后，<code>command + s</code> 保存。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>打开浏览器在地址栏输入 <a href="http://localhost/phpinfo.php">http://localhost/phpinfo.php</a> ，按下 <code>command + F</code> 查找 <code>mcrypt</code> ，查找到以下信息就表示 <code>mcrypt</code> 安装成功。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509164855.png" alt="mcrypt"></p>
]]></content>
      <categories>
        <category>PHP 开发</category>
      </categories>
      <tags>
        <tag>PHP 开发</tag>
        <tag>mcrypt</tag>
        <tag>PHP 扩展</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java 开发】mac 设置 MySQL 数据库默认编码（字符集）为 UTF-8</title>
    <url>/2017/03/16/Java/201703161547/</url>
    <content><![CDATA[<blockquote>
<p>鉴于有些刚接触 MySQL 数据库的人，经常会碰到数据库中文显示的问题，MySQL 数据库刚安装时默认编码是 latin1，所以如果在数据库建表的时候没有设置 <code>DEFAULT CHARSET=utf8</code> 的话，就会导致数据库无法设置或显示中文的问题，下面给出在 Mac 下将 MySQL 的默认编码改为 UTF-8。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="查看自己的-MySQL-的编码方式"><a href="#查看自己的-MySQL-的编码方式" class="headerlink" title="查看自己的 MySQL 的编码方式"></a>查看自己的 MySQL 的编码方式</h2><ul>
<li>先连接 MySQL 数据库 ，在终端输入以下命令，回车后输入 MySQL 的密码。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mysql/bin/mysql -u root -p</span><br></pre></td></tr></table></figure>

<ul>
<li>然后输入以下命令查看自己的 MySQL 的编码方式。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">show variables like <span class="string">&#x27;%char%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://file.karise.cn/blog/20190509164120.jpg" alt="上图是我设置支持 UTF-8 后显示的结果"></p>
<h2 id="修改-MySQL-的默认编码"><a href="#修改-MySQL-的默认编码" class="headerlink" title="修改 MySQL 的默认编码"></a>修改 MySQL 的默认编码</h2><ul>
<li>进入到 <code>/usr/local/mysql/support-files</code> 目录，找到 <code>my-default.cnf</code>文件，将其复制到桌面上，重命名为 <code>my.cnf</code> 。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509164132.jpg" alt="前往文件夹"></p>
<p><img data-src="https://file.karise.cn/blog/20190509164142.jpg" alt="前往文件夹"></p>
<ul>
<li>右键桌面上的 <code>my.cnf</code> 文件，打开方式选择 <code>文本编辑</code> ，然后将全部内容替换为下面代码。</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Example MySQL config file for small systems.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This is for a system with little memory (&lt;= 64M) where MySQL is only used</span></span><br><span class="line"><span class="comment"># from time to time and it&#x27;s important that the mysqld daemon</span></span><br><span class="line"><span class="comment"># doesn&#x27;t use much resources.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># MySQL programs look for option files in a set of</span></span><br><span class="line"><span class="comment"># locations which depend on the deployment platform.</span></span><br><span class="line"><span class="comment"># You can copy this option file to one of those</span></span><br><span class="line"><span class="comment"># locations. For information about these locations, see:</span></span><br><span class="line"><span class="comment"># http://dev.mysql.com/doc/mysql/en/option-files.html</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In this file, you can use all long options that a program supports.</span></span><br><span class="line"><span class="comment"># If you want to know which options a program supports, run the program</span></span><br><span class="line"><span class="comment"># with the &quot;--help&quot; option.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The following options will be passed to all MySQL clients</span></span><br><span class="line"><span class="attr">[client]</span></span><br><span class="line"><span class="meta">default-character-set</span>=<span class="string">utf8</span></span><br><span class="line"><span class="comment">#password   = your_password</span></span><br><span class="line"><span class="attr">port</span>        = <span class="string">3306</span></span><br><span class="line"><span class="attr">socket</span>      = <span class="string">/tmp/mysql.sock</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Here follows entries for some specific programs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The MySQL server</span></span><br><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="meta">default-storage-engine</span>=<span class="string">INNODB</span></span><br><span class="line"><span class="meta">character-set-server</span>=<span class="string">utf8</span></span><br><span class="line"><span class="meta">collation-server</span>=<span class="string">utf8_general_ci</span></span><br><span class="line"><span class="attr">port</span>        = <span class="string">3306</span></span><br><span class="line"><span class="attr">socket</span>      = <span class="string">/tmp/mysql.sock</span></span><br><span class="line"><span class="attr">skip-external-locking</span></span><br><span class="line"><span class="attr">key_buffer_size</span> = <span class="string">16K</span></span><br><span class="line"><span class="attr">max_allowed_packet</span> = <span class="string">1M</span></span><br><span class="line"><span class="attr">table_open_cache</span> = <span class="string">4</span></span><br><span class="line"><span class="attr">sort_buffer_size</span> = <span class="string">64K</span></span><br><span class="line"><span class="attr">read_buffer_size</span> = <span class="string">256K</span></span><br><span class="line"><span class="attr">read_rnd_buffer_size</span> = <span class="string">256K</span></span><br><span class="line"><span class="attr">net_buffer_length</span> = <span class="string">2K</span></span><br><span class="line"><span class="attr">thread_stack</span> = <span class="string">128K</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Don&#x27;t listen on a TCP/IP port at all. This can be a security enhancement,</span></span><br><span class="line"><span class="comment"># if all processes that need to connect to mysqld run on the same host.</span></span><br><span class="line"><span class="comment"># All interaction with mysqld must be made via Unix sockets or named pipes.</span></span><br><span class="line"><span class="comment"># Note that using this option without enabling named pipes on Windows</span></span><br><span class="line"><span class="comment"># (using the &quot;enable-named-pipe&quot; option) will render mysqld useless!</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#skip-networking</span></span><br><span class="line"><span class="meta">server-id</span>   = <span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following if you want to log updates</span></span><br><span class="line"><span class="comment">#log-bin=mysql-bin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># binary logging format - mixed recommended</span></span><br><span class="line"><span class="comment">#binlog_format=mixed</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Causes updates to non-transactional engines using statement format to be</span></span><br><span class="line"><span class="comment"># written directly to binary log. Before using this option make sure that</span></span><br><span class="line"><span class="comment"># there are no dependencies between transactional and non-transactional</span></span><br><span class="line"><span class="comment"># tables such as in the statement INSERT INTO t_myisam SELECT * FROM</span></span><br><span class="line"><span class="comment"># t_innodb; otherwise, slaves may diverge from the master.</span></span><br><span class="line"><span class="comment">#binlog_direct_non_transactional_updates=TRUE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following if you are using InnoDB tables</span></span><br><span class="line"><span class="comment">#innodb_data_home_dir = /usr/local/mysql/data</span></span><br><span class="line"><span class="comment">#innodb_data_file_path = ibdata1:10M:autoextend</span></span><br><span class="line"><span class="comment">#innodb_log_group_home_dir = /usr/local/mysql/data</span></span><br><span class="line"><span class="comment"># You can set .._buffer_pool_size up to 50 - 80 %</span></span><br><span class="line"><span class="comment"># of RAM but beware of setting memory usage too high</span></span><br><span class="line"><span class="comment">#innodb_buffer_pool_size = 16M</span></span><br><span class="line"><span class="comment">#innodb_additional_mem_pool_size = 2M</span></span><br><span class="line"><span class="comment"># Set .._log_file_size to 25 % of buffer pool size</span></span><br><span class="line"><span class="comment">#innodb_log_file_size = 5M</span></span><br><span class="line"><span class="comment">#innodb_log_buffer_size = 8M</span></span><br><span class="line"><span class="comment">#innodb_flush_log_at_trx_commit = 1</span></span><br><span class="line"><span class="comment">#innodb_lock_wait_timeout = 50</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[mysqldump]</span></span><br><span class="line"><span class="attr">quick</span></span><br><span class="line"><span class="attr">max_allowed_packet</span> = <span class="string">16M</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[mysql]</span></span><br><span class="line"><span class="attr">no-auto-rehash</span></span><br><span class="line"><span class="comment"># Remove the next comment character if you are not familiar with SQL</span></span><br><span class="line"><span class="comment">#safe-updates</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[myisamchk]</span></span><br><span class="line"><span class="attr">key_buffer_size</span> = <span class="string">8M</span></span><br><span class="line"><span class="attr">sort_buffer_size</span> = <span class="string">8M</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[mysqlhotcopy]</span></span><br><span class="line"><span class="attr">interactive-timeout</span></span><br></pre></td></tr></table></figure>

<ul>
<li>将修改后的文件 <code>my.cnf</code> 复制到 <code>/etc</code> 目录下。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509164154.jpg" alt="前往文件夹"></p>
<ul>
<li>重启 MySQL 数据库就 ok 了。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509164205.jpg" alt="重启数据库"></p>
<blockquote>
<p>大概步骤就是这样了，重启完数据库后可以再按照一开始的方法，看一下自己 MySQL 的数据库编码有没有变成 UTF-8 ，最后附上本文的 <a href="http://www.cnblogs.com/zhengbin/p/4740784.html?utm_source=tuicool&utm_medium=referral">参考地址</a> 。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java 开发</category>
      </categories>
      <tags>
        <tag>Java 开发</tag>
        <tag>MqSQL</tag>
        <tag>Mac</tag>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java 开发】mac 安装多版本 Java JDK 和随时切换 JDK 版本的方法</title>
    <url>/2017/04/17/Java/201704171814/</url>
    <content><![CDATA[<blockquote>
<p>首先说明一下，以前 <code>mac</code> 系统上是自带 <code>Java</code> 的，只支持到 <code>Java JDK 1.6</code> 版本 ，然后从 <code>OS X 10.7</code> 开始系统不再自带 <code>Java</code> ，需要自己来安装 <code>Java JDK</code> ，在平时的开发工作中，有时可能会遇到需要安装多个 <code>Java JDK</code> 版本，并且需要经常切换本地 <code>JDK</code> 版本，下面就给大家分享一个比较简单的方法，需要的可以收藏一下。</p>
</blockquote>
<a id="more"></a>

<hr>
<p>终端输入以下命令可查看当前 <code>Java JDK</code> 版本，如果还没安装过，就按照下面方法开始安装。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

<h2 id="1-安装多版本-Java-JDK"><a href="#1-安装多版本-Java-JDK" class="headerlink" title="1.  安装多版本 Java JDK"></a>1.  安装多版本 Java JDK</h2><ul>
<li><p><code>Java JDK 1.6</code> 由 <code>Apple</code> 提供，这是下载地址：<a href="http://support.apple.com/kb/DL1572">Java JDK 1.6 传送门</a></p>
</li>
<li><p><code>Java JDK 1.7 和 1.8</code> 则由 <code>Oracle</code> 官方提供，这是下载地址：<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Java JDK 1.7 和 1.8 传送门</a></p>
</li>
<li><p><code>Java JDK</code> 安装完后都在 <code>/Library/Java/JavaVirtualMachines/</code> 这个文件夹下。</p>
</li>
</ul>
<p><strong>注意：</strong>全部是下载 <code>mac</code> 下的 <code>dmg</code> 安装包，需要哪个版本，直接安装就行了，可以同时存在多个版本。<code>Java JDK 1.6</code> 如果安装完成后，在上面那个文件夹中找不到的话，就到 <code>/System/Library/Java/JavaVirtualMachines/</code> 这个文件夹看一下，理论上都在上面那个文件夹下。</p>
<h2 id="2-安装和配置-jenv"><a href="#2-安装和配置-jenv" class="headerlink" title="2. 安装和配置 jenv"></a>2. 安装和配置 jenv</h2><ul>
<li>打开终端，执行以下命令安装 <code>jenv</code> ：（<a href="https://github.com/linux-china/jenv/wiki/Chinese-Introduction"> jenv 参考资料</a>）</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -s get.jenv.io | bash</span><br></pre></td></tr></table></figure>

<ul>
<li>然后进入 <code>jenv</code> 目录，创建相关目录：（下面每输完一行就回车一下）</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.jenv/candidates/</span><br><span class="line"></span><br><span class="line">mkdir java</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> java</span><br><span class="line"></span><br><span class="line">mkdir 1.6</span><br><span class="line"></span><br><span class="line">mkdir 1.7</span><br><span class="line"></span><br><span class="line">mkdir 1.8</span><br></pre></td></tr></table></figure>

<p>我上面把三个版本的 <code>Java JDK</code> 目录默认都创建了，你可以根据实际情况，安装了哪些版本就创建哪些版本的目录。</p>
<ul>
<li>执行以下命令设置 <code>Java JDK</code> 路径：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ln -s xxx xxx</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>这里非常重要，前面的 <code>xxx</code> 处填写 <code>Java JDK</code> 的 <code>bin</code> 文件夹的路径地址，后面的 <code>xxx</code> 处填写刚才上面创建 <code>jenv</code> 的对应版本文件夹的路径地址，怕写错的话就到 <code>/Library/Java/JavaVirtualMachines/</code> 这里找到对应版本 <code>Java JDK</code> 的 <code>bin</code> 目录直接拖到终端，就会显示路径地址了。</p>
<p><strong>例如：</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ln -s /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/bin ~/.jenv/candidates/java/1.6</span><br><span class="line"></span><br><span class="line">ln -s /Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/bin ~/.jenv/candidates/java/1.7</span><br><span class="line"></span><br><span class="line">ln -s /Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home/bin ~/.jenv/candidates/java/1.8</span><br></pre></td></tr></table></figure>

<h2 id="3-切换-Java-JDK-版本"><a href="#3-切换-Java-JDK-版本" class="headerlink" title="3. 切换 Java JDK 版本"></a>3. 切换 Java JDK 版本</h2><p>按上面步骤配置完成后就可以开始切换 <code>Java JDK</code> 版本了，下面是切换方法：</p>
<ul>
<li>输入以下命令查看当前 <code>Java JDK</code> 版本：（我这边是 <code> 1.6</code> 版本）</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

<ul>
<li>输入以下命令切换 <code>Java JDK</code> 版本：（切换哪个版本就写哪个版本号，下面是切换到 <code>1.8</code> 版本）</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">jenv use java 1.8</span><br></pre></td></tr></table></figure>

<ul>
<li>再输入上面的命令查看 <code>Java JDK</code> 版本，会发现已经变成  <code>1.8</code> 版本了，如图：</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509163742.png" alt="切换 `Java JDK` 版本"></p>
<blockquote>
<p>大功告成，配置完之后，以后切换版本就十分方便了，一句命令就能随时切换版本，是不是很方便呢，需要的就收藏一下吧，想参考更多方法请 <a href="http://www.cnblogs.com/luodengxiong/p/5736806.html">点击这里</a>。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java 开发</category>
      </categories>
      <tags>
        <tag>Java 开发</tag>
        <tag>Mac</tag>
        <tag>macOS</tag>
        <tag>Java JDK</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】实现毛玻璃（高斯模糊）效果</title>
    <url>/2017/03/16/iOS/201703161013/</url>
    <content><![CDATA[<blockquote>
<p>下面列举了三种实现毛玻璃效果的方法，大家可以按需求选择相应的方法，给大家一个参考，前面两个是官方的，使用起来比较高效，第三个使用的是第三方 <code>LBBlurredImage</code> 这个库，大家还是看需求使用吧，苹果推荐使用 <code>UIBlurEffect</code> 。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="1-UIToolbar-方式实现"><a href="#1-UIToolbar-方式实现" class="headerlink" title="1. UIToolbar 方式实现"></a>1. UIToolbar 方式实现</h2><p>苹果在 <code>iOS7.0</code> 之后，很多系统界面都使用了毛玻璃效果，增加了界面的美观性，比如下图的通知中心界面：</p>
<p><img data-src="https://file.karise.cn/blog/57365975-ac4a9180-71b8-11e9-8b6e-33c2c84afc3b.jpg" alt="通知中心"></p>
<p>但是其 <code>iOS7.0</code> 的 <code>SDK</code> 并没有提供给开发者实现毛玻璃效果的 <code>API</code> ，所以很多人都是通过一些别人封装的框架来实现，后面我也会讲到一个。</p>
<p>其实在 <code>iOS7.0</code> 之前还是有系统的类可以实现毛玻璃效果的，就是 <code>UIToolbar</code> 这个类，并且使用相当简单，几行代码就可以搞定。</p>
<p>** 下面是代码实现：**</p>
<p>创建一个 <code>UIToolbar</code> 实例，设置它的 <code>frame</code> 或者也可以通过添加约束，然后 <code>UIToolbar</code> 有一个属性：<code>barStyle</code>，设置对应的枚举值来呈现毛玻璃的样式，最后再添加到需要进行毛玻璃效果的 <code>view</code> 上即可。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 毛玻璃的样式(枚举)</span></span><br><span class="line"><span class="comment"> UIBarStyleDefault          = 0,</span></span><br><span class="line"><span class="comment"> UIBarStyleBlack            = 1,</span></span><br><span class="line"><span class="comment"> UIBarStyleBlackOpaque      = 1, // Deprecated. Use UIBarStyleBlack</span></span><br><span class="line"><span class="comment"> UIBarStyleBlackTranslucent = 2, // Deprecated. Use UIBarStyleBlack and set the translucent property to YES</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">UIImageView</span> *bgImgView = [[<span class="built_in">UIImageView</span> alloc] initWithFrame:<span class="keyword">self</span>.view.bounds];</span><br><span class="line">bgImgView.image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@&quot;huoying.jpg&quot;</span>];</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:bgImgView];</span><br><span class="line"></span><br><span class="line"><span class="built_in">UIToolbar</span> *toolbar = [[<span class="built_in">UIToolbar</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, bgImgView.frame.size.width * <span class="number">0.5</span>, bgImgView.frame.size.height)];</span><br><span class="line">toolbar.barStyle = <span class="built_in">UIBarStyleBlackTranslucent</span>;</span><br><span class="line">[bgImgView addSubview:toolbar];</span><br></pre></td></tr></table></figure>

<p>** 效果图：**</p>
<p><img data-src="https://github.com/Kejiasir/EffectViewDemo/raw/master/IMAGE/img_001.png" alt="效果图"></p>
<h2 id="2-UIBlurEffect-方式实现"><a href="#2-UIBlurEffect-方式实现" class="headerlink" title="2. UIBlurEffect 方式实现"></a>2. UIBlurEffect 方式实现</h2><p>在 <code>iOS8.0</code> 之后，苹果新增了一个类 <code>UIVisualEffectView</code>，通过这个类来实现毛玻璃效果与上面的 <code>UIToolbar</code>  一样，而且效率也非常之高，使用也是非常简单，几行代码搞定。</p>
<p><code>UIVisualEffectView</code> 是一个抽象类，不能直接使用，需通过它下面的三个子类来实现<code>（UIBlurEffect，UIVisualEffevt，UIVisualEffectView）</code>。</p>
<p><strong>特别注意：</strong> 这个类是 <code>iOS8.0</code> 之后才适用， 所以如果项目要兼容 <code>iOS7.0</code> 的话，还是要考虑其它的两种方法了。</p>
<p>** 下面是代码实现：**</p>
<p>同样是先快速的实例化 <code>UIBlurEffect</code> 并设置毛玻璃的样式，然后再通过 <code>UIVisualEffectView</code> 的构造方法将 <code>UIBlurEffect</code> 的实例添加上去，最后设置 <code>frame</code> 或者是通过添加约束，将 <code>effectView</code> 添加到要实现了毛玻璃的效果的 <code>view</code> 控件上。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 毛玻璃的样式(枚举)</span></span><br><span class="line"><span class="comment"> UIBlurEffectStyleExtraLight,</span></span><br><span class="line"><span class="comment"> UIBlurEffectStyleLight,</span></span><br><span class="line"><span class="comment"> UIBlurEffectStyleDark</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">UIImageView</span> *bgImgView = [[<span class="built_in">UIImageView</span> alloc] initWithFrame:<span class="keyword">self</span>.view.bounds];</span><br><span class="line">bgImgView.image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@&quot;huoying.jpg&quot;</span>];</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:bgImgView];</span><br><span class="line"></span><br><span class="line"><span class="built_in">UIBlurEffect</span> *effect = [<span class="built_in">UIBlurEffect</span> effectWithStyle:<span class="built_in">UIBlurEffectStyleDark</span>];</span><br><span class="line"><span class="built_in">UIVisualEffectView</span> *effectView = [[<span class="built_in">UIVisualEffectView</span> alloc] initWithEffect:effect];</span><br><span class="line">effectView.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, bgImgView.frame.size.width * <span class="number">0.5</span>, bgImgView.frame.size.height);</span><br><span class="line">[bgImgView addSubview:effectView];</span><br></pre></td></tr></table></figure>

<p>** 效果图：**</p>
<p><img data-src="https://github.com/Kejiasir/EffectViewDemo/raw/master/IMAGE/img_002.png" alt="效果图"></p>
<h2 id="3-LBBlurredImage-方式实现"><a href="#3-LBBlurredImage-方式实现" class="headerlink" title="3. LBBlurredImage 方式实现"></a>3. LBBlurredImage 方式实现</h2><p>最后再来给大家介绍一个国外大神封装的 <code>UIImageView</code> 的分类，里面不管是怎么实现的，反正使用非常简单，只要一句代码就搞定。</p>
<p>** 下面是代码实现：**</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对背景图片进行毛玻璃效果处理 参数blurRadius默认是20,可指定,最后一个参数block回调可以为nil</span></span><br><span class="line"><span class="built_in">UIImageView</span> *bgImgView = [[<span class="built_in">UIImageView</span> alloc] initWithFrame:<span class="keyword">self</span>.view.bounds];</span><br><span class="line">[bgImgView setImageToBlur: [<span class="built_in">UIImage</span> imageNamed:<span class="string">@&quot;huoying.jpg&quot;</span>] blurRadius:<span class="number">20</span> completionBlock:<span class="literal">nil</span>];</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:bgImgView];</span><br></pre></td></tr></table></figure>

<p>** 效果图：**</p>
<p><img data-src="https://github.com/Kejiasir/EffectViewDemo/raw/master/IMAGE/img_003.png" alt="效果图"></p>
<blockquote>
<p>好啦，反正 <code>iOS</code> 中要进行毛玻璃效果处理就这几种方式，看大家的需求，喜欢用哪种就用哪种吧，最后附上本文参考的 <a href="http://www.cnblogs.com/arvin-sir/p/5131358.html?utm_source=tuicool&utm_medium=referral">原文地址</a> 和他的 <a href="https://github.com/Kejiasir/EffectViewDemo"> GitHub Demo 地址</a> 。</p>
</blockquote>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>毛玻璃</tag>
        <tag>blur</tag>
        <tag>高斯模糊</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】二进制、十进制、十六进制相互转换的方法</title>
    <url>/2017/03/16/iOS/201703161833/</url>
    <content><![CDATA[<blockquote>
<p>下面罗列了二进制、十进制、十六进制之间相互转换的方法，有时候可能会用的到，需要的朋友可以收藏一下。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="1-十进制转换为二进制"><a href="#1-十进制转换为二进制" class="headerlink" title="1. 十进制转换为二进制"></a>1. 十进制转换为二进制</h2><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 十进制转换为二进制</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param decimal 十进制数</span></span><br><span class="line"><span class="comment"> @return 二进制数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="built_in">NSString</span> *)getBinaryByDecimal:(<span class="built_in">NSInteger</span>)decimal &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *binary = <span class="string">@&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (decimal) &#123;</span><br><span class="line">        binary = [[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%ld&quot;</span>, decimal % <span class="number">2</span>] stringByAppendingString:binary];</span><br><span class="line">        <span class="keyword">if</span> (decimal / <span class="number">2</span> &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        decimal = decimal / <span class="number">2</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (binary.length % <span class="number">4</span> != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">NSMutableString</span> *mStr = [[<span class="built_in">NSMutableString</span> alloc]init];;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span> - binary.length % <span class="number">4</span>; i++) &#123;</span><br><span class="line">            [mStr appendString:<span class="string">@&quot;0&quot;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        binary = [mStr stringByAppendingString:binary];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> binary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-十进制转换为十六进制"><a href="#2-十进制转换为十六进制" class="headerlink" title="2. 十进制转换为十六进制"></a>2. 十进制转换为十六进制</h2><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 十进制转换十六进制</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param decimal 十进制数</span></span><br><span class="line"><span class="comment"> @return 十六进制数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="built_in">NSString</span> *)getHexByDecimal:(<span class="built_in">NSInteger</span>)decimal &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *hex =<span class="string">@&quot;&quot;</span>;</span><br><span class="line">    <span class="built_in">NSString</span> *letter;</span><br><span class="line">    <span class="built_in">NSInteger</span> number;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">9</span>; i++) &#123;</span><br><span class="line">        number = decimal % <span class="number">16</span>;</span><br><span class="line">        decimal = decimal / <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">switch</span> (number) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                letter =<span class="string">@&quot;A&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                letter =<span class="string">@&quot;B&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                letter =<span class="string">@&quot;C&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">                letter =<span class="string">@&quot;D&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">                letter =<span class="string">@&quot;E&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">                letter =<span class="string">@&quot;F&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                letter = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%ld&quot;</span>, number];</span><br><span class="line">        &#125;</span><br><span class="line">        hex = [letter stringByAppendingString:hex];</span><br><span class="line">        <span class="keyword">if</span> (decimal == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-二进制转换为十六进制"><a href="#3-二进制转换为十六进制" class="headerlink" title="3. 二进制转换为十六进制"></a>3. 二进制转换为十六进制</h2><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 二进制转换成十六进制</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param binary 二进制数</span></span><br><span class="line"><span class="comment"> @return 十六进制数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="built_in">NSString</span> *)getHexByBinary:(<span class="built_in">NSString</span> *)binary &#123;</span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *binaryDic = [[<span class="built_in">NSMutableDictionary</span> alloc] initWithCapacity:<span class="number">16</span>];</span><br><span class="line">    [binaryDic setObject:<span class="string">@&quot;0&quot;</span> forKey:<span class="string">@&quot;0000&quot;</span>];</span><br><span class="line">    [binaryDic setObject:<span class="string">@&quot;1&quot;</span> forKey:<span class="string">@&quot;0001&quot;</span>];</span><br><span class="line">    [binaryDic setObject:<span class="string">@&quot;2&quot;</span> forKey:<span class="string">@&quot;0010&quot;</span>];</span><br><span class="line">    [binaryDic setObject:<span class="string">@&quot;3&quot;</span> forKey:<span class="string">@&quot;0011&quot;</span>];</span><br><span class="line">    [binaryDic setObject:<span class="string">@&quot;4&quot;</span> forKey:<span class="string">@&quot;0100&quot;</span>];</span><br><span class="line">    [binaryDic setObject:<span class="string">@&quot;5&quot;</span> forKey:<span class="string">@&quot;0101&quot;</span>];</span><br><span class="line">    [binaryDic setObject:<span class="string">@&quot;6&quot;</span> forKey:<span class="string">@&quot;0110&quot;</span>];</span><br><span class="line">    [binaryDic setObject:<span class="string">@&quot;7&quot;</span> forKey:<span class="string">@&quot;0111&quot;</span>];</span><br><span class="line">    [binaryDic setObject:<span class="string">@&quot;8&quot;</span> forKey:<span class="string">@&quot;1000&quot;</span>];</span><br><span class="line">    [binaryDic setObject:<span class="string">@&quot;9&quot;</span> forKey:<span class="string">@&quot;1001&quot;</span>];</span><br><span class="line">    [binaryDic setObject:<span class="string">@&quot;A&quot;</span> forKey:<span class="string">@&quot;1010&quot;</span>];</span><br><span class="line">    [binaryDic setObject:<span class="string">@&quot;B&quot;</span> forKey:<span class="string">@&quot;1011&quot;</span>];</span><br><span class="line">    [binaryDic setObject:<span class="string">@&quot;C&quot;</span> forKey:<span class="string">@&quot;1100&quot;</span>];</span><br><span class="line">    [binaryDic setObject:<span class="string">@&quot;D&quot;</span> forKey:<span class="string">@&quot;1101&quot;</span>];</span><br><span class="line">    [binaryDic setObject:<span class="string">@&quot;E&quot;</span> forKey:<span class="string">@&quot;1110&quot;</span>];</span><br><span class="line">    [binaryDic setObject:<span class="string">@&quot;F&quot;</span> forKey:<span class="string">@&quot;1111&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (binary.length % <span class="number">4</span> != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">NSMutableString</span> *mStr = [[<span class="built_in">NSMutableString</span> alloc]init];;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span> - binary.length % <span class="number">4</span>; i++) &#123;</span><br><span class="line">            [mStr appendString:<span class="string">@&quot;0&quot;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        binary = [mStr stringByAppendingString:binary];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSString</span> *hex = <span class="string">@&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;binary.length; i+=<span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *key = [binary substringWithRange:<span class="built_in">NSMakeRange</span>(i, <span class="number">4</span>)];</span><br><span class="line">        <span class="built_in">NSString</span> *value = [binaryDic objectForKey:key];</span><br><span class="line">        <span class="keyword">if</span> (value) &#123;</span><br><span class="line">            hex = [hex stringByAppendingString:value];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-十六进制转换为二进制"><a href="#4-十六进制转换为二进制" class="headerlink" title="4. 十六进制转换为二进制"></a>4. 十六进制转换为二进制</h2><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 十六进制转换为二进制</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param hex 十六进制数</span></span><br><span class="line"><span class="comment"> @return 二进制数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="built_in">NSString</span> *)getBinaryByHex:(<span class="built_in">NSString</span> *)hex &#123;</span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *hexDic = [[<span class="built_in">NSMutableDictionary</span> alloc] initWithCapacity:<span class="number">16</span>];</span><br><span class="line">    [hexDic setObject:<span class="string">@&quot;0000&quot;</span> forKey:<span class="string">@&quot;0&quot;</span>];</span><br><span class="line">    [hexDic setObject:<span class="string">@&quot;0001&quot;</span> forKey:<span class="string">@&quot;1&quot;</span>];</span><br><span class="line">    [hexDic setObject:<span class="string">@&quot;0010&quot;</span> forKey:<span class="string">@&quot;2&quot;</span>];</span><br><span class="line">    [hexDic setObject:<span class="string">@&quot;0011&quot;</span> forKey:<span class="string">@&quot;3&quot;</span>];</span><br><span class="line">    [hexDic setObject:<span class="string">@&quot;0100&quot;</span> forKey:<span class="string">@&quot;4&quot;</span>];</span><br><span class="line">    [hexDic setObject:<span class="string">@&quot;0101&quot;</span> forKey:<span class="string">@&quot;5&quot;</span>];</span><br><span class="line">    [hexDic setObject:<span class="string">@&quot;0110&quot;</span> forKey:<span class="string">@&quot;6&quot;</span>];</span><br><span class="line">    [hexDic setObject:<span class="string">@&quot;0111&quot;</span> forKey:<span class="string">@&quot;7&quot;</span>];</span><br><span class="line">    [hexDic setObject:<span class="string">@&quot;1000&quot;</span> forKey:<span class="string">@&quot;8&quot;</span>];</span><br><span class="line">    [hexDic setObject:<span class="string">@&quot;1001&quot;</span> forKey:<span class="string">@&quot;9&quot;</span>];</span><br><span class="line">    [hexDic setObject:<span class="string">@&quot;1010&quot;</span> forKey:<span class="string">@&quot;A&quot;</span>];</span><br><span class="line">    [hexDic setObject:<span class="string">@&quot;1011&quot;</span> forKey:<span class="string">@&quot;B&quot;</span>];</span><br><span class="line">    [hexDic setObject:<span class="string">@&quot;1100&quot;</span> forKey:<span class="string">@&quot;C&quot;</span>];</span><br><span class="line">    [hexDic setObject:<span class="string">@&quot;1101&quot;</span> forKey:<span class="string">@&quot;D&quot;</span>];</span><br><span class="line">    [hexDic setObject:<span class="string">@&quot;1110&quot;</span> forKey:<span class="string">@&quot;E&quot;</span>];</span><br><span class="line">    [hexDic setObject:<span class="string">@&quot;1111&quot;</span> forKey:<span class="string">@&quot;F&quot;</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *binary = <span class="string">@&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;[hex length]; i++) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *key = [hex substringWithRange:<span class="built_in">NSMakeRange</span>(i, <span class="number">1</span>)];</span><br><span class="line">        <span class="built_in">NSString</span> *value = [hexDic objectForKey:key.uppercaseString];</span><br><span class="line">        <span class="keyword">if</span> (value) &#123;</span><br><span class="line">            binary = [binary stringByAppendingString:value];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> binary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-二进制转换为十进制"><a href="#5-二进制转换为十进制" class="headerlink" title="5. 二进制转换为十进制"></a>5. 二进制转换为十进制</h2><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 二进制转换为十进制</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param binary 二进制数</span></span><br><span class="line"><span class="comment"> @return 十进制数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="built_in">NSInteger</span>)getDecimalByBinary:(<span class="built_in">NSString</span> *)binary &#123;</span><br><span class="line">    <span class="built_in">NSInteger</span> decimal = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;binary.length; i++) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *number = [binary substringWithRange:<span class="built_in">NSMakeRange</span>(binary.length - i - <span class="number">1</span>, <span class="number">1</span>)];</span><br><span class="line">        <span class="keyword">if</span> ([number isEqualToString:<span class="string">@&quot;1&quot;</span>]) &#123;</span><br><span class="line">            decimal += pow(<span class="number">2</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> decimal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>大概就这么多了，有其他需求可以补充，需要十六进制转换为十进制的话，就按上面方法将十六进制转换为二进制后再转换为十进制就行了，有需要的朋友就收藏一下吧！</p>
</blockquote>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>进制转换</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】框架 trunk push 到 CocoaPods 成功后 pod search 却搜不到的解决方法</title>
    <url>/2017/04/18/iOS/201704181444/</url>
    <content><![CDATA[<blockquote>
<p>很多人反映自己的框架 <code>trunk push</code> 到 <code>CocoaPods</code> 成功后 ，然后使用 <code>pod search</code> 指令搜索自己的框架时却搜不到，下面就告诉大家解决办法。如果想知道如何将自己的框架上传到 <code>CocoaPods</code> 的话，可以看我的另一篇文章 <a href="http://www.jianshu.com/p/4d73369b8cf9">传送门</a> 。</p>
</blockquote>
<a id="more"></a>

<hr>
<p>框架 <code>trunk push</code> 到 <code>CocoaPods</code> 成功后 ，然后使用 <code>pod search</code> 指令搜索时提示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[!] Unable to find a pod with name, author, summary, or description matching xxx</span><br></pre></td></tr></table></figure>

<p><strong>解决方法：</strong></p>
<ul>
<li>打开 <code>Finder</code> ，然后前往文件夹（快捷键：<code>shift + command + G</code>） ，输入以下地址：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;Library&#x2F;Caches&#x2F;CocoaPods&#x2F;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://file.karise.cn/blog/20190509161115.png" alt="前往文件夹"></p>
<ul>
<li>删除 <code>search_index.json</code> 这个文件，这个文件是 <code>pod search</code> 搜索时的缓存文件。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509161204.png" alt="删除 `search_index.json`"></p>
<ul>
<li>打开终端重新使用 <code>pod search</code> 搜索你的框架，这时 <code>search_index.json</code> 缓存文件会被重新生成，你的框架就可以搜索出来了。</li>
</ul>
<blockquote>
<p>方法就是这样，很简单，以后 <code>trunk push</code> 上传成功后，搜索不出就再将 <code>search_index.json</code> 删掉后重搜就行了，解决方法参考自 <a href="http://blog.csdn.net/callzjy/article/details/70171868">这篇文章</a>。</p>
</blockquote>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>iOS 开发问题</tag>
        <tag>CocoaPods</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java 开发】mac 忘记 MySQL 数据库密码后重置密码的方法</title>
    <url>/2017/05/19/Java/201705190959/</url>
    <content><![CDATA[<blockquote>
<p>由于有个同事的 <code>mac mini</code> 刚装了 <code>MySQL</code> ，然后忘记一开始设的密码是什么了，但是最近又要用到本地的 <code>MySQL</code> 数据库，网上找了一大堆方法全都没用，但又不想删了重装，最后终于被我找到了一个正确的方法，这里分享一下解决办法。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="1-重启-MySQL-服务器"><a href="#1-重启-MySQL-服务器" class="headerlink" title="1. 重启 MySQL 服务器"></a>1. 重启 MySQL 服务器</h2><ul>
<li>打开 <code>系统偏好设置</code> - <code>MySQL</code> ，然后点击 <code>Stop MySQL Server</code> 关闭 <code>MySQL</code> 服务器。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509163759.png" alt="关闭 MySQL 服务器"></p>
<ul>
<li>关闭 <code>MySQL</code> 服务器后打开终端，输入以下命令进入 <code>MySQL</code> 目录。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mysql/bin</span><br></pre></td></tr></table></figure>

<ul>
<li>再输入以下命令获取权限。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure>

<ul>
<li>然后输入以下命令重启 <code>MySQL</code> 服务器。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./mysqld_safe --skip-grant-tables &amp;</span><br></pre></td></tr></table></figure>

<h2 id="2-修改-MySQL-密码"><a href="#2-修改-MySQL-密码" class="headerlink" title="2. 修改 MySQL 密码"></a>2. 修改 MySQL 密码</h2><ul>
<li>刚才的终端不要关掉，按下 <code>command + N</code> 另开一个终端窗口，输入以下命令配置短命令。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> mysql=/usr/<span class="built_in">local</span>/mysql/bin/mysql</span><br></pre></td></tr></table></figure>

<ul>
<li>接着输入以下命令进入 <code>MySQL</code> 命令模式。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql</span><br></pre></td></tr></table></figure>

<ul>
<li>再输入以下命令进入 <code>MySQL</code> 数据库。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">use mysql</span><br></pre></td></tr></table></figure>

<ul>
<li>然后输入以下命令获取权限。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<ul>
<li>现在可以输入以下命令修改你的 <code>MySQL</code> 密码了，<code>xxx</code> 处填写你的新密码。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> password <span class="keyword">for</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>=password(<span class="string">&#x27;xxx&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="3-验证-MySQL-新密码"><a href="#3-验证-MySQL-新密码" class="headerlink" title="3. 验证 MySQL 新密码"></a>3. 验证 MySQL 新密码</h2><ul>
<li>打开终端输入以下命令登录 <code>MySQL</code> 数据库。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mysql/bin/mysql -u root -p</span><br></pre></td></tr></table></figure>

<ul>
<li>接着输入你的新密码，如果 <code>MySQL</code> 数据库连接上就表示密码修改成功了。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509163813.png" alt="登录 `MySQL` 数据库"></p>
<blockquote>
<p>最后附上本文的 <a href="http://www.cnblogs.com/lihuanqing/p/5623872.html">参考地址</a> ，给这个博主点赞，找了这么多方法，就这个是靠谱的，所以分享出来让更多的人看到，希望能帮助大家少走一些坑。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java 开发</category>
      </categories>
      <tags>
        <tag>Java 开发</tag>
        <tag>Mac</tag>
        <tag>macOS</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】Attribute 富文本属性汇总</title>
    <url>/2017/03/16/iOS/201703161202/</url>
    <content><![CDATA[<blockquote>
<p>作者搜了一下网上的富文本，看起来都非常的凌乱，作为一个有严重强迫症的程序猿，最后还是决定自己整理一下，有不足的地方可以补充。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="富文本的用法"><a href="#富文本的用法" class="headerlink" title="富文本的用法"></a>富文本的用法</h2><p>首先，先看一个简单富文本的例子，了解一下富文本的用法。</p>
<p>** 下面是代码：**</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 将需要的富文本属性放入字典 */</span></span><br><span class="line"><span class="built_in">NSDictionary</span> *attributes = @&#123; <span class="built_in">NSForegroundColorAttributeName</span>:[<span class="built_in">UIColor</span> redColor],</span><br><span class="line">                              <span class="built_in">NSBackgroundColorAttributeName</span>:[<span class="built_in">UIColor</span> greenColor],</span><br><span class="line">                                         <span class="built_in">NSFontAttributeName</span>:[<span class="built_in">UIFont</span> fontWithName:<span class="string">@&quot;TimesNewRomanPS-BoldItalicMT&quot;</span> size:<span class="number">19.0</span>],</span><br><span class="line">                                         <span class="built_in">NSKernAttributeName</span>:@<span class="number">1.0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建富文本对象 */</span></span><br><span class="line"><span class="built_in">NSAttributedString</span> *attributeText = [[<span class="built_in">NSAttributedString</span> alloc] initWithString:<span class="string">@&quot;This is an attributes string&quot;</span> attributes:attributes];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置 UILabel 的富文本 */</span></span><br><span class="line"><span class="built_in">UILabel</span> *label = [[<span class="built_in">UILabel</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">500</span>, <span class="number">40</span>)];</span><br><span class="line">[label setAttributedText:attributeText];</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:label];</span><br></pre></td></tr></table></figure>

<p>** 效果图：**</p>
<p><img data-src="https://file.karise.cn/blog/57366076-db610300-71b8-11e9-9eee-1b8b2628fe3d.jpg" alt="效果图"></p>
<p>用法很简单，就是先将富文本属性都放在一个 <code>NSDictionary</code> 字典中，然后定义一个 <code>NSAttributedString</code> ，设置文字和富文本属性，然后设置 <code>UILabel</code> 的 <code>AttributedText</code> 属性就可以了。</p>
<h2 id="富文本的属性"><a href="#富文本的属性" class="headerlink" title="富文本的属性"></a>富文本的属性</h2><p>用法就是上面说的那样，下面主要开始介绍放在 <code>NSDictionary</code> 字典中的不同富文本属性的用法及效果。</p>
<p>** 下面是系统提供的所有富文本属性：**</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 系统提供的所有富文本属性 */</span></span><br><span class="line"><span class="built_in">NSFontAttributeName</span>                   <span class="comment">// 设置字体</span></span><br><span class="line"><span class="built_in">NSParagraphStyleAttributeName</span>         <span class="comment">// 设置段落风格</span></span><br><span class="line"><span class="built_in">NSForegroundColorAttributeName</span>        <span class="comment">// 设置文字颜色</span></span><br><span class="line"><span class="built_in">NSBackgroundColorAttributeName</span>        <span class="comment">// 设置背景颜色</span></span><br><span class="line"><span class="built_in">NSLigatureAttributeName</span>               <span class="comment">// 设置连体属性</span></span><br><span class="line"><span class="built_in">NSKernAttributeName</span>                   <span class="comment">// 设置字符间距</span></span><br><span class="line"><span class="built_in">NSStrikethroughStyleAttributeName</span>     <span class="comment">// 添加删除线</span></span><br><span class="line"><span class="built_in">NSUnderlineStyleAttributeName</span>         <span class="comment">// 添加下划线</span></span><br><span class="line"><span class="built_in">NSStrokeColorAttributeName</span>            <span class="comment">// 设置文字描边颜色</span></span><br><span class="line"><span class="built_in">NSStrokeWidthAttributeName</span>            <span class="comment">// 设置文字描边宽度</span></span><br><span class="line"><span class="built_in">NSShadowAttributeName</span>                 <span class="comment">// 设置阴影</span></span><br><span class="line"><span class="built_in">NSTextEffectAttributeName</span>             <span class="comment">// 设置文本特殊效果</span></span><br><span class="line"><span class="built_in">NSAttachmentAttributeName</span>             <span class="comment">// 设置文本附件</span></span><br><span class="line"><span class="built_in">NSLinkAttributeName</span>                   <span class="comment">// 设置链接属性</span></span><br><span class="line"><span class="built_in">NSBaselineOffsetAttributeName</span>         <span class="comment">// 设置基线偏移量</span></span><br><span class="line"><span class="built_in">NSUnderlineColorAttributeName</span>         <span class="comment">// 添加下划线颜色</span></span><br><span class="line"><span class="built_in">NSStrikethroughColorAttributeName</span>     <span class="comment">// 添加删除线颜色</span></span><br><span class="line"><span class="built_in">NSObliquenessAttributeName</span>            <span class="comment">// 设置字体倾斜</span></span><br><span class="line"><span class="built_in">NSExpansionAttributeName</span>              <span class="comment">// 设置文本扁平</span></span><br><span class="line"><span class="built_in">NSWritingDirectionAttributeName</span>       <span class="comment">// 设置文字书写方向</span></span><br><span class="line"><span class="built_in">NSVerticalGlyphFormAttributeName</span>      <span class="comment">// 设置文本段落排版格式</span></span><br></pre></td></tr></table></figure>

<h3 id="1-NSFontAttributeName-设置字体"><a href="#1-NSFontAttributeName-设置字体" class="headerlink" title="1. NSFontAttributeName 设置字体"></a>1. NSFontAttributeName 设置字体</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSFontAttributeName</span>:[<span class="built_in">UIFont</span> systemFontOfSize:(<span class="built_in">CGFloat</span>)] <span class="comment">// 字体大小</span></span><br><span class="line"><span class="built_in">NSFontAttributeName</span>:[<span class="built_in">UIFont</span> fontWithName:(<span class="keyword">nonnull</span> <span class="built_in">NSString</span> *) size:(<span class="built_in">CGFloat</span>)] <span class="comment">// 字体名称，字体大小</span></span><br></pre></td></tr></table></figure>

<h3 id="2-NSParagraphStyleAttributeName-设置段落风格"><a href="#2-NSParagraphStyleAttributeName-设置段落风格" class="headerlink" title="2. NSParagraphStyleAttributeName 设置段落风格"></a>2. NSParagraphStyleAttributeName 设置段落风格</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 需要一个 NSMutableParagraphStyle 实例对象。 */</span></span><br><span class="line"><span class="built_in">NSMutableParagraphStyle</span> *paragraph = [[<span class="built_in">NSMutableParagraphStyle</span> alloc] init];</span><br><span class="line">paragraph.alignment = <span class="built_in">NSTextAlignmentCenter</span>; <span class="comment">// 居中</span></span><br><span class="line">paragraph.lineSpacing = <span class="number">10</span>; <span class="comment">// 文字的行间距</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 用法 */</span></span><br><span class="line"><span class="built_in">NSParagraphStyleAttributeName</span> : paragraph</span><br></pre></td></tr></table></figure>

<h3 id="3-NSForegroundColorAttributeName、NSBackgroundColorAttributeName-设置字体和背景颜色"><a href="#3-NSForegroundColorAttributeName、NSBackgroundColorAttributeName-设置字体和背景颜色" class="headerlink" title="3. NSForegroundColorAttributeName、NSBackgroundColorAttributeName 设置字体和背景颜色"></a>3. NSForegroundColorAttributeName、NSBackgroundColorAttributeName 设置字体和背景颜色</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSForegroundColorAttributeName</span>:[<span class="built_in">UIColor</span> redColor]</span><br><span class="line"><span class="built_in">NSBackgroundColorAttributeName</span>:[<span class="built_in">UIColor</span> greenColor]</span><br></pre></td></tr></table></figure>

<h3 id="4-NSKernAttributeName-设置字符间距"><a href="#4-NSKernAttributeName-设置字符间距" class="headerlink" title="4. NSKernAttributeName 设置字符间距"></a>4. NSKernAttributeName 设置字符间距</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSKernAttributeName</span>:@<span class="number">-1.0</span> <span class="comment">// 正值间距加宽，负值间距变窄</span></span><br></pre></td></tr></table></figure>

<h3 id="5-NSStrikethroughStyleAttributeName、NSUnderlineStyleAttributeName-添加删除线和下划线"><a href="#5-NSStrikethroughStyleAttributeName、NSUnderlineStyleAttributeName-添加删除线和下划线" class="headerlink" title="5. NSStrikethroughStyleAttributeName、NSUnderlineStyleAttributeName 添加删除线和下划线"></a>5. NSStrikethroughStyleAttributeName、NSUnderlineStyleAttributeName 添加删除线和下划线</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSStrikethroughStyleAttributeName</span>:@(<span class="built_in">NSUnderlineStyleSingle</span>) <span class="comment">// 删除线样式</span></span><br><span class="line"><span class="built_in">NSStrikethroughColorAttributeName</span>:[<span class="built_in">UIColor</span> redColor] <span class="comment">// 删除线颜色</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSUnderlineStyleAttributeName</span>:@(<span class="built_in">NSUnderlineStyleSingle</span>) <span class="comment">// 下划线样式</span></span><br><span class="line"><span class="built_in">NSUnderlineColorAttributeName</span>:[<span class="built_in">UIColor</span> redColor] <span class="comment">// 下划线颜色</span></span><br></pre></td></tr></table></figure>

<h3 id="6-NSStrokeColorAttributeName、NSStrokeWidthAttributeName-设置文字描边颜色和宽度"><a href="#6-NSStrokeColorAttributeName、NSStrokeWidthAttributeName-设置文字描边颜色和宽度" class="headerlink" title="6. NSStrokeColorAttributeName、NSStrokeWidthAttributeName 设置文字描边颜色和宽度"></a>6. NSStrokeColorAttributeName、NSStrokeWidthAttributeName 设置文字描边颜色和宽度</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 单独设置颜色无效果，需要和宽度同时设置才有效 */</span></span><br><span class="line"><span class="built_in">NSStrokeColorAttributeName</span>:[<span class="built_in">UIColor</span> redColor]</span><br><span class="line"><span class="built_in">NSStrokeWidthAttributeName</span>:@<span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="7-NSShadowAttributeName-设置阴影"><a href="#7-NSShadowAttributeName-设置阴影" class="headerlink" title="7. NSShadowAttributeName 设置阴影"></a>7. NSShadowAttributeName 设置阴影</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 需要一个 NSShadow 实例对象。 */</span></span><br><span class="line"><span class="built_in">NSShadow</span> * shadow = [[<span class="built_in">NSShadow</span> alloc]init];</span><br><span class="line">shadow.shadowBlurRadius = <span class="number">5</span>; <span class="comment">// 模糊度</span></span><br><span class="line">shadow.shadowColor = [<span class="built_in">UIColor</span> grayColor]; <span class="comment">// 颜色</span></span><br><span class="line">shadow.shadowOffset = <span class="built_in">CGSizeMake</span>(<span class="number">1</span>, <span class="number">3</span>); <span class="comment">// 偏移</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 用法 */</span></span><br><span class="line"><span class="built_in">NSShadowAttributeName</span>:shadow</span><br></pre></td></tr></table></figure>

<p>** 效果图：**</p>
<p><img data-src="https://file.karise.cn/blog/57366100-e87df200-71b8-11e9-9aeb-af9e50d57a44.jpg" alt="NSShadowAttributeName 设置阴影"></p>
<h3 id="8-NSVerticalGlyphFormAttributeName、NSObliquenessAttributeName、NSExpansionAttributeName-绘制文本、设置字体倾斜、设置文本横向拉伸压缩属性"><a href="#8-NSVerticalGlyphFormAttributeName、NSObliquenessAttributeName、NSExpansionAttributeName-绘制文本、设置字体倾斜、设置文本横向拉伸压缩属性" class="headerlink" title="8. NSVerticalGlyphFormAttributeName、NSObliquenessAttributeName、NSExpansionAttributeName 绘制文本、设置字体倾斜、设置文本横向拉伸压缩属性"></a>8. NSVerticalGlyphFormAttributeName、NSObliquenessAttributeName、NSExpansionAttributeName 绘制文本、设置字体倾斜、设置文本横向拉伸压缩属性</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 对于 NSVerticalGlyphFormAttributeName 设置文本排版格式，0 表示横排文本、1 表示竖排文本。在 iOS 中，总是使用横排文本，0 以外的值都未定义。 */</span></span><br><span class="line"><span class="built_in">NSVerticalGlyphFormAttributeName</span>:@(<span class="number">0</span>) <span class="comment">// 文本排版格式</span></span><br><span class="line"><span class="built_in">NSObliquenessAttributeName</span>:@<span class="number">1</span> <span class="comment">// 字体倾斜</span></span><br><span class="line"><span class="built_in">NSExpansionAttributeName</span>:@<span class="number">1</span> <span class="comment">// 文本横向拉伸压缩属性</span></span><br></pre></td></tr></table></figure>

<h3 id="9-NSLigatureAttributeName-设置连体属性"><a href="#9-NSLigatureAttributeName-设置连体属性" class="headerlink" title="9. NSLigatureAttributeName 设置连体属性"></a>9. NSLigatureAttributeName 设置连体属性</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 0 表示没有连体字符，1 表示使用默认的连体字符，2 表示使用所有连体符号，默认值为 1（iOS 不支持 2） */</span></span><br><span class="line"><span class="built_in">NSLigatureAttributeName</span>:@<span class="number">0</span></span><br><span class="line"><span class="built_in">NSLigatureAttributeName</span>:@<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>** 效果图：**</p>
<p><img data-src="https://file.karise.cn/blog/20190509155649.jpg" alt="@0 的效果图"></p>
<p><img data-src="https://file.karise.cn/blog/20190509155715.jpg" alt="@1 的效果图"></p>
<h3 id="10-NSTextEffectAttributeName-设置文本特殊效果"><a href="#10-NSTextEffectAttributeName-设置文本特殊效果" class="headerlink" title="10. NSTextEffectAttributeName 设置文本特殊效果"></a>10. NSTextEffectAttributeName 设置文本特殊效果</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 取值为 NSString 对象，目前只有图版印刷效果可用。 */</span></span><br><span class="line"><span class="built_in">NSTextEffectAttributeName</span>: <span class="built_in">NSTextEffectLetterpressStyle</span></span><br></pre></td></tr></table></figure>

<p>** 效果图：**</p>
<p><img data-src="https://file.karise.cn/blog/20190509155734.jpg" alt="添加属性的 label"></p>
<p><img data-src="https://file.karise.cn/blog/20190509155750.jpg" alt="未添加属性的 label"></p>
<h3 id="11-NSLinkAttributeName-设置链接属性"><a href="#11-NSLinkAttributeName-设置链接属性" class="headerlink" title="11. NSLinkAttributeName 设置链接属性"></a>11. NSLinkAttributeName 设置链接属性</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 设置文字点击跳转的网址，点击后调用浏览器打开指定 URL 地址。 */</span></span><br><span class="line"><span class="built_in">NSLinkAttributeName</span>:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@&quot;http://www.baidu.com&quot;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="12-NSBaselineOffsetAttributeName-设置基线偏移量"><a href="#12-NSBaselineOffsetAttributeName-设置基线偏移量" class="headerlink" title="12. NSBaselineOffsetAttributeName 设置基线偏移量"></a>12. NSBaselineOffsetAttributeName 设置基线偏移量</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 正值上偏，负值下偏。 */</span></span><br><span class="line"><span class="built_in">NSBaselineOffsetAttributeName</span>:@<span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="13-NSAttachmentAttributeName-设置文本附件"><a href="#13-NSAttachmentAttributeName-设置文本附件" class="headerlink" title="13. NSAttachmentAttributeName 设置文本附件"></a>13. NSAttachmentAttributeName 设置文本附件</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 需要一个 NSTextAttachment 实例对象。 */</span></span><br><span class="line"><span class="built_in">NSTextAttachment</span> *textAttachment = [[<span class="built_in">NSTextAttachment</span> alloc] initWithData:(<span class="keyword">nullable</span> <span class="built_in">NSData</span> *) ofType:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 用法 */</span></span><br><span class="line"><span class="built_in">NSAttachmentAttributeName</span>:textAttachment</span><br></pre></td></tr></table></figure>

<h3 id="14-NSWritingDirectionAttributeName-设置文字书写方向"><a href="#14-NSWritingDirectionAttributeName-设置文字书写方向" class="headerlink" title="14. NSWritingDirectionAttributeName 设置文字书写方向"></a>14. NSWritingDirectionAttributeName 设置文字书写方向</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 从左到右书写 */</span></span><br><span class="line">@[@(<span class="built_in">NSWritingDirectionLeftToRight</span> | <span class="built_in">NSTextWritingDirectionEmbedding</span>)]</span><br><span class="line">@[@(<span class="built_in">NSWritingDirectionLeftToRight</span> | <span class="built_in">NSTextWritingDirectionOverride</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 从右到左书写 */</span></span><br><span class="line">@[@(<span class="built_in">NSWritingDirectionRightToLeft</span> | <span class="built_in">NSTextWritingDirectionEmbedding</span>)]</span><br><span class="line">@[@(<span class="built_in">NSWritingDirectionRightToLeft</span> | <span class="built_in">NSTextWritingDirectionOverride</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 用法 */</span></span><br><span class="line"><span class="built_in">NSWritingDirectionAttributeName</span>:@[@(<span class="built_in">NSWritingDirectionRightToLeft</span>|<span class="built_in">NSWritingDirectionOverride</span>)]</span><br></pre></td></tr></table></figure>

<p>** 效果图：**</p>
<p><img data-src="https://file.karise.cn/blog/20190509155811.jpg" alt="从右到左书写的效果图"></p>
<blockquote>
<p>好了，大概就是那么多，有需要补充的后续还会再补充，最后附上本文参考的<a href="http://blog.csdn.net/sinat_25921367/article/details/49250839">文章地址</a>。</p>
</blockquote>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>富文本</tag>
        <tag>NSAttributedString</tag>
        <tag>Attribute</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java 开发】MySQL 开启远程连接的方法</title>
    <url>/2017/06/09/Java/201706092354/</url>
    <content><![CDATA[<blockquote>
<p>在平时的工作中，经常会遇到 <code>MySQL</code> 数据库存储于某个人的电脑上，而其他人需要通过 <code>IP</code> 地址来连接到那个人电脑上的 <code>MySQL</code> ，但是大家要想连接到那个人电脑上的 <code>MySQL</code> ，那个人电脑上的 <code>MySQL</code> 就必须开启远程连接，下面分享一下 <code>MySQL</code> 如何开启远程连接。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="MySQL-开启远程连接"><a href="#MySQL-开启远程连接" class="headerlink" title="MySQL 开启远程连接"></a>MySQL 开启远程连接</h2><ul>
<li>首先确保本机的 <code>MySQL</code> 是启动状态，然后打开终端，输入以下命令连接到 <code>MySQL</code> ，需要输入一下本机 <code>MySQL</code> 的连接密码 。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mysql/bin/mysql -u root -p</span><br></pre></td></tr></table></figure>

<p><img data-src="https://file.karise.cn/blog/20190509164218.png" alt="连接 MySQL"></p>
<ul>
<li>输入以下命令选择要使用的数据库，修改远程连接的基本信息，保存在 <code>mysql</code> 数据库中，因此使用 <code>mysql</code> 数据库。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">use mysql</span><br></pre></td></tr></table></figure>

<p><img data-src="https://file.karise.cn/blog/20190509164234.png" alt="选择数据库"></p>
<ul>
<li>输入以下命令来更改远程连接的设置，前面的 <code>root</code> 表示别人访问本机 <code>MySQL</code> 的用户名，后面的 <code>root</code> 表示别人访问本机 <code>MySQL</code> 的密码。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;root&#39; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://file.karise.cn/blog/20190509164251.png" alt="更改远程连接设置"></p>
<ul>
<li>输入以下命令来刷新刚才修改的权限，使其生效。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://file.karise.cn/blog/20190509164302.png" alt="刷新权限"></p>
<ul>
<li>输入以下命令来查看修改是否成功，如果出现一行 <code>host = %</code> ，<code>user = root</code> 就表示修改成功。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select host,user from user;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://file.karise.cn/blog/20190509164316.png" alt="查看是否成功"></p>
<blockquote>
<p>到此就修改成功了，<code>MySQL</code> 远程连接已经开启，其他人就可以通过 <code>IP</code> 地址来连接本机的 <code>MySQL</code> 数据库了。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java 开发</category>
      </categories>
      <tags>
        <tag>Java 开发</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>查看 / 修改本地 Git 用户名和邮箱地址</title>
    <url>/2017/05/10/Other/201705101116/</url>
    <content><![CDATA[<blockquote>
<p><code>用户名</code> 和 <code>邮箱地址</code> 是本地 <code>Git</code> 客户端的一个变量，当你安装 <code>Git</code> 后首先要做的事情就是设置你的 <code>用户名</code> 和 <code>邮箱地址</code> ，因为每次 <code>Git</code> 提交都会使用这个 <code>用户名</code> 和 <code>邮箱地址</code> 来记录提交信息，下面分享一下本地 <code>Git</code> 如何查看 / 修改 <code>用户名</code> 和 <code>邮箱地址</code> 。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="查看用户名和邮箱地址"><a href="#查看用户名和邮箱地址" class="headerlink" title="查看用户名和邮箱地址"></a>查看用户名和邮箱地址</h2><ul>
<li>打开终端，分别输入以下命令即可查看 <code>用户名</code> 和 <code>邮箱地址</code> 。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">//查看用户名</span><br><span class="line">git config user.name</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">//查看邮箱地址</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure>

<h2 id="修改用户名和邮箱地址"><a href="#修改用户名和邮箱地址" class="headerlink" title="修改用户名和邮箱地址"></a>修改用户名和邮箱地址</h2><p>这个 <code>用户名</code> 和 <code>邮箱地址</code> 的设置是全局的，所有 <code>Git</code> 仓库的提交都会使用这个 <code>用户名</code> 和 <code>邮箱地址</code> 。</p>
<ul>
<li>打开终端，分别输入以下命令即可修改 <code>用户名</code> 和 <code>邮箱地址</code> 。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">//修改用户名，xxx 处填写你的用户名</span><br><span class="line">git config --global user.name <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">//修改邮箱地址，xxx 处填写你的邮箱地址</span><br><span class="line">git config --global user.email <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="修改指定项目的用户名和邮箱地址"><a href="#修改指定项目的用户名和邮箱地址" class="headerlink" title="修改指定项目的用户名和邮箱地址"></a>修改指定项目的用户名和邮箱地址</h2><p>如果你希望在一个特定的项目中使用不同的 <code>用户名</code> 和 <code>邮箱地址</code> 来提交，可以使用下面的方法单独设置  <code>用户名</code> 和 <code>邮箱地址</code> ，如果不设置就会默认使用上面全局设置的 <code>用户名</code> 和 <code>邮箱地址</code> 。</p>
<ul>
<li>打开终端 <code>cd</code> 到指定项目的仓库下，分别输入以下命令即可单独修改 <code>用户名</code> 和 <code>邮箱地址</code> 。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">//修改用户名，xxx 处填写你的用户名</span><br><span class="line">git config user.name <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">//修改邮箱地址，xxx 处填写你的邮箱地址</span><br><span class="line">git config user.email <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>最后说明一下这个 <code>用户名</code> 和 <code>邮箱地址</code> 只是用来记录本地 <code>Git</code> 提交信息的一个标识，和你远程仓库账号下的 <code>用户名</code> 或 <code>邮箱地址</code> 没有任何关系。</p>
</blockquote>
]]></content>
      <categories>
        <category>其他相关</category>
      </categories>
      <tags>
        <tag>其他相关</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】企业开发者账号打包发布 App 到服务器上的流程</title>
    <url>/2017/05/17/iOS/201705171746/</url>
    <content><![CDATA[<blockquote>
<p>苹果 <code>企业开发者账号</code> 一年 <code>$299</code> ，用这种账号开发的 <code>App</code> 不能上架到 <code>AppStore</code> 上面，只能分发到自己的服务器上，然后自行下载安装 <code>App</code>。这种类型的账号没有设备数量的限制，也不用苹果审核 <code>App</code> ，所以需要 <code>快速迭代</code> 或者 <code>订制化</code> 的 <code>App</code> 就可以选择这种类型的账号进行开发。下面分享一下如何用 <code>企业开发者账号</code> 打包发布 <code>App</code> 到服务器上。</p>
</blockquote>
<a id="more"></a>

<hr>
<p><strong>说明：</strong> 下面只讲怎么用 <code>企业开发者账号</code> 打包发布到服务器，至于 <code>企业开发者账号</code> 的申请就自行 <a href="http://www.baidu.com/">百度</a> ，<code>Certificates</code> 和 <code>Provisioning Profile</code> 创建时记得选择 <code>In House</code> 就行，其他没什么区别，这里也不多说了。</p>
<h2 id="企业开发者账号打包发布-App-到服务器上的流程"><a href="#企业开发者账号打包发布-App-到服务器上的流程" class="headerlink" title="企业开发者账号打包发布 App 到服务器上的流程"></a>企业开发者账号打包发布 App 到服务器上的流程</h2><h3 id="1-App-打包"><a href="#1-App-打包" class="headerlink" title="1. App 打包"></a>1. App 打包</h3><ul>
<li><code>Xcode</code> 选择 <code>Product</code> - <code>Archive</code> 进行 <code>App</code> 打包。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509161204.png" alt="Archive"></p>
<ul>
<li>选择 <code>Export</code> 导出 <code>ipa</code> 安装包。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509161234.png" alt="Export"></p>
<ul>
<li>选择 <code>Save for Enterprise Deployment</code> 进行打包。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509161246.png" alt="Save for Enterprise Deployment"></p>
<ul>
<li>这里要勾选下图这一栏 <code>Include manifest for over-the-air installation.</code> ，勾选以后会生成一个 <code>manifest.plist</code> 的文件，之后发布会用到。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509161257.png" alt="manifest"></p>
<ul>
<li>打包完成后得到两个文件 <code>ipa</code> 和 <code>plist</code> 。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509161310.png" alt="打包文件"></p>
<h3 id="2-制作-App-安装图标"><a href="#2-制作-App-安装图标" class="headerlink" title="2. 制作 App 安装图标"></a>2. 制作 App 安装图标</h3><ul>
<li>这里需要两个不同尺寸的图标文件，尺寸分别是 <code>57 * 57</code> 和 <code>512 * 512</code> ，这个是在安装时显示安装进度时的图标，安装完成后显示的还是 <code>App</code> 本身的图标。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509161325.png" alt="图标"></p>
<h3 id="3-将安装包和图片上传至服务器"><a href="#3-将安装包和图片上传至服务器" class="headerlink" title="3. 将安装包和图片上传至服务器"></a>3. 将安装包和图片上传至服务器</h3><ul>
<li>将 <code>ipa 安装包</code> 以及 <code>图标</code> 文件上传至自己的服务器。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509161339.png" alt="上传文件"></p>
<h3 id="4-修改-manifest-plist-文件"><a href="#4-修改-manifest-plist-文件" class="headerlink" title="4. 修改 manifest.plist 文件"></a>4. 修改 manifest.plist 文件</h3><ul>
<li>根据以下代码，填写相应内容。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">plist</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="meta-string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>items<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>assets<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>software-package<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>ipa包URL（必填）<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>full-size-image<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>needs-shine<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">false</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>下载时大图（非必填）<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>display-image<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>needs-shine<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">false</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>下载时小图（非必填）<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>metadata<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>bundle-identifier<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>BundleID（必填）<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>bundle-version<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>software<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>subtitle<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>副标题（非必填）<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>title<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>应用名（必填）<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>下面三处分别填写对应服务器上文件地址，且服务器必须支持 <code>HTTPS</code> 协议。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509161352.png" alt="manifest.plist"></p>
<ul>
<li>上面是同一个文件，都是 <code>manifest.plist </code> ，一个是源码，一个是用 <code>Xcode</code> 打开的，用哪种方法编辑都可以。</li>
</ul>
<h3 id="4-将-plist-文件上传至服务器"><a href="#4-将-plist-文件上传至服务器" class="headerlink" title="4. 将 plist 文件上传至服务器"></a>4. 将 plist 文件上传至服务器</h3><ul>
<li><code>plist</code> 文件可以不用和 <code>ipa 安装包</code> 以及 <code>图标</code> 文件放在一起，只要 <code>plist</code> 文件中的地址指向是正确的就行，并且存放 <code>plist</code> 的服务器必须支持 <code>HTTPS</code> 协议。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509161415.png" alt="plist 文件"></p>
<ul>
<li>如果暂时没有支持 <code>Https</code> 的协议的服务器，可以使用 <code>GitHub</code> 来测试一下：新建一个 <code>GitHub</code> 仓库，将 <code>plist</code> 文件传上去，点开 <code>plist 文件</code> 选择 <code>Raw</code> 。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509161427.png" alt="Raw"></p>
<ul>
<li>地址栏的地址就是你 <code>plist</code> 文件的地址，如果你是上传到自己服务器的话，就用自己服务器的地址，我的地址如下：</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">https://raw.githubusercontent.com/karise-guo/TestRelease/master/mainfest.plist</span></span><br></pre></td></tr></table></figure>

<h3 id="5-手机安装-App"><a href="#5-手机安装-App" class="headerlink" title="5. 手机安装 App"></a>5. 手机安装 App</h3><ul>
<li>打开手机上的 <code>Safari</code> 浏览器，输入以下网址即可安装 <code>App</code> 。</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">itms-services://?action=download-manifest&amp;url=https://raw.githubusercontent.com/karise-guo/TestRelease/master/mainfest.plist</span><br></pre></td></tr></table></figure>

<ul>
<li><p>前面一段地址是固定的，<code>url=</code> 后面为你的 <code>plist</code> 文件所在的地址，并且网址必须由手机自带的 <code>Safari</code> 浏览器打开才能安装。</p>
</li>
<li><p>如果输入网址后没有显示安装 <code>App</code> ，那一定是你 <code>plist</code> 文件里面的 <code>ipa 安装包</code> 地址指向有问题或者是你的服务器没有支持 <code>HTTPS</code> 协议。</p>
</li>
<li><p>下载安装后，如果想打开 <code>App</code> 还需要在手机 <code>设置</code> - <code>通用</code> - <code>描述文件与设备管理 （不同系统可能名字不一样）</code> 里面选择相应的 <code>证书</code> ，点击 <code>信任</code> 后即可打开 <code>App</code> 。</p>
</li>
</ul>
<blockquote>
<p>步骤大概就是这样，其原理是手机自带的 <code>Safari</code> 会根据上面那个地址来解析服务器上的 <code>plist</code> 文件，然后再根据 <code>plist</code> 文件中的 <code>ipa</code> 安装包地址以及 <code>图标</code> 地址来下载相应的内容。</p>
</blockquote>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>企业开发者账号</tag>
        <tag>打包发布</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】利用 transform 使视图平移、缩放、旋转</title>
    <url>/2017/03/20/iOS/201703201432/</url>
    <content><![CDATA[<blockquote>
<p>平常的开发过程中，当我们要改变视图的位置或者大小的时候，我们的第一反应一定是用 <code>frame</code> 这个属性去实现，但其实还有个更加简单的方法就是使用 <code>transform </code> 这个属性，一句代码就能完成。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="1-平移"><a href="#1-平移" class="headerlink" title="1. 平移"></a>1. 平移</h2><p>括号中填写 <code>x</code> 和 <code>y</code> 移动数值。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 在原来的基础上移动（只移动一次） */</span></span><br><span class="line"><span class="keyword">self</span>.image.transform = <span class="built_in">CGAffineTransformMakeTranslation</span>(<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在移动后的基础上移动（可以一直移动） */</span></span><br><span class="line"><span class="keyword">self</span>.image.transform = <span class="built_in">CGAffineTransformTranslate</span>(<span class="keyword">self</span>.image.transform, <span class="number">20</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h2 id="2-缩放"><a href="#2-缩放" class="headerlink" title="2. 缩放"></a>2. 缩放</h2><p>括号中填写 <code>x</code> 和 <code>y</code> 缩放倍数。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 在原来的基础上缩放（只缩放一次） */</span></span><br><span class="line"><span class="keyword">self</span>.image.transform = <span class="built_in">CGAffineTransformMakeScale</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在缩放后的基础上缩放（可以一直缩放） */</span></span><br><span class="line"><span class="keyword">self</span>.image.transform = <span class="built_in">CGAffineTransformScale</span>(<span class="keyword">self</span>.image.transform, <span class="number">2</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h2 id="3-旋转"><a href="#3-旋转" class="headerlink" title="3. 旋转"></a>3. 旋转</h2><p>括号中填写弧度 <code>M_PI_4</code> = <code>45°</code>（绕中心旋转）。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 在原来的基础上旋转（只旋转一次） */</span></span><br><span class="line"><span class="keyword">self</span>.image.transform = <span class="built_in">CGAffineTransformMakeRotation</span>(M_PI_4);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在旋转后的基础上旋转（可以一直旋转） */</span></span><br><span class="line"><span class="keyword">self</span>.image.transform = <span class="built_in">CGAffineTransformRotate</span>(<span class="keyword">self</span>.image.transform, M_PI_4);</span><br></pre></td></tr></table></figure>

<h2 id="4-AnchorPoint-设定"><a href="#4-AnchorPoint-设定" class="headerlink" title="4. AnchorPoint 设定"></a>4. AnchorPoint 设定</h2><p>因为缩放或旋转默认都是围绕视图的中心点来进行的，通过 <code>AnchorPoint</code> 的设定，可以改变缩放或旋转围绕的点，下面是修改方法。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 设置缩放或旋转围绕的点</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param anchorPoint 围绕的点</span></span><br><span class="line"><span class="comment"> @param view 设置的视图</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setAnchorPoint:(<span class="built_in">CGPoint</span>)anchorPoint forView:(<span class="built_in">UIView</span> *)view &#123;</span><br><span class="line">    <span class="built_in">CGPoint</span> oldOrigin = view.frame.origin;</span><br><span class="line">    view.layer.anchorPoint = anchorPoint;</span><br><span class="line">    <span class="built_in">CGPoint</span> newOrigin = view.frame.origin;</span><br><span class="line">    <span class="built_in">CGPoint</span> transition;</span><br><span class="line">    transition.x = newOrigin.x - oldOrigin.x;</span><br><span class="line">    transition.y = newOrigin.y - oldOrigin.y;</span><br><span class="line">    view.center = <span class="built_in">CGPointMake</span> (view.center.x - transition.x, view.center.y - transition.y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 将缩放或旋转围绕的点还原为默认</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param view 设置的视图</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setDefaultAnchorPointforView:(<span class="built_in">UIView</span> *)view &#123;</span><br><span class="line">    [<span class="keyword">self</span> setAnchorPoint:<span class="built_in">CGPointMake</span>(<span class="number">0.5</span>f, <span class="number">0.5</span>f) forView:view];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>好了，大致就这几种，其中上下两种方法的区别就是，当多次调用那一句代码时，一个会一直从原点开始变化，而另一个会从当前位置继续开始变化。</p>
</blockquote>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>transform</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】Status Bar 状态栏设置汇总</title>
    <url>/2017/03/17/iOS/201703171551/</url>
    <content><![CDATA[<blockquote>
<p>个人觉得 iOS 的 Status Bar 状态栏也是一个比较坑的地方，所以还是写一个总结，有遇到这方面问题的朋友可以看一下。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="Status-Bar-状态栏的隐藏"><a href="#Status-Bar-状态栏的隐藏" class="headerlink" title="Status Bar 状态栏的隐藏"></a>Status Bar 状态栏的隐藏</h2><h3 id="1-通过设置-Info-plist-文件实现状态栏的全局隐藏"><a href="#1-通过设置-Info-plist-文件实现状态栏的全局隐藏" class="headerlink" title="1. 通过设置 Info.plist 文件实现状态栏的全局隐藏"></a>1. 通过设置 Info.plist 文件实现状态栏的全局隐藏</h3><ul>
<li><p>在 <code>Info.plist</code> 文件中添加 <code>Status bar is initially hidden</code> 设置为 <code>YES</code> ，这个是隐藏 App 在 LunchScreen（欢迎界面）时的状态栏。</p>
</li>
<li><p>在 <code>Info.plist</code> 文件中添加 <code>View controller-based status bar appearance</code> 设置为 <code>NO</code>，这个是隐藏 App 在所有 UIViewController 时的状态栏。</p>
</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509160336.png" alt="Info.plist"></p>
<p><strong>特别注意：</strong></p>
<p>当 <code>Status bar is initially hidden</code> 设置为 <code>NO</code> 的时候，不管 <code>View controller-based status bar appearance</code> 设置为 <code>NO</code> 还是 <code>YES</code> ，都是无效的，只有 <code>Status bar is initially hidden</code> 设置为 <code>YES</code> 的时候， <code>View controller-based status bar appearance</code> 才生效，这个要注意一下。</p>
<h3 id="2-通过代码实现状态栏的全局隐藏"><a href="#2-通过代码实现状态栏的全局隐藏" class="headerlink" title="2. 通过代码实现状态栏的全局隐藏"></a>2. 通过代码实现状态栏的全局隐藏</h3><ul>
<li><p>在 <code>Info.plist</code> 文件中添加 <code>View controller-based status bar appearance</code> 设置为 <code>NO</code> 。</p>
</li>
<li><p>在 <code>AppDelegate</code> 文件中，实现下面方法（在其他 UIViewController 中也有效）：</p>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* OC */</span></span><br><span class="line">[<span class="built_in">UIApplication</span> sharedApplication].statusBarHidden = <span class="literal">YES</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Swift */</span></span><br><span class="line"><span class="built_in">UIApplication</span>.sharedApplication().statusBarHidden = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<p><strong>特别注意：</strong></p>
<p>如果想要通过代码实现状态栏隐藏，必须在 <code>Info.plist</code> 文件中添加 <code>View controller-based status bar appearance</code> ，并且必须设置为 <code>NO</code> ，否则代码不会有任何效果，而且代码只能隐藏 App 在所有 UIViewController 时的状态栏，不能隐藏在 LunchScreen（欢迎界面）时的状态栏。</p>
<h3 id="3-通过代码实现状态栏的局部隐藏"><a href="#3-通过代码实现状态栏的局部隐藏" class="headerlink" title="3. 通过代码实现状态栏的局部隐藏"></a>3. 通过代码实现状态栏的局部隐藏</h3><p>上面的方法是全局隐藏，是隐藏 App 在所有 UIViewController 时的状态栏，下面的方法是局部隐藏，是单个 UIViewController 内的隐藏。</p>
<ul>
<li><p>在 <code>Info.plist</code> 文件中添加 <code>View controller-based status bar appearance</code> 设置为 <code>YES</code> 。</p>
</li>
<li><p>在需要隐藏状态栏的 UIViewController 文件中，加入下面方法：</p>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* OC */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)prefersStatusBarHidden &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Swift */</span></span><br><span class="line">override func prefersStatusBarHidden() -&gt; Bool &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>特别注意：</strong></p>
<p>如果想要通过代码实现某个 UIViewController 状态栏局部隐藏，必须在 <code>Info.plist</code> 文件中添加 <code>View controller-based status bar appearance</code> ，并且必须设置为 <code>YES</code> ，否则代码不会有任何效果。</p>
<h2 id="Status-Bar-状态栏的颜色"><a href="#Status-Bar-状态栏的颜色" class="headerlink" title="Status Bar 状态栏的颜色"></a>Status Bar 状态栏的颜色</h2><p>状态栏分前后两部分，要分清这两个概念，后面会用到：</p>
<ul>
<li>文字部分：就是指的显示电池、时间等部分。</li>
<li>背景部分：就是显示黑色或者图片的背景部分。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509160411.png" alt="文字部分为白色，背景部分为黑色"></p>
<h3 id="1-设置-Status-Bar-的【文字部分】"><a href="#1-设置-Status-Bar-的【文字部分】" class="headerlink" title="1. 设置 Status Bar 的【文字部分】"></a>1. 设置 Status Bar 的【文字部分】</h3><p>简单来说，就是设置显示电池电量、时间、网络部分标示的颜色， 这里只能设置两种颜色：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 默认的黑色 */</span></span><br><span class="line"><span class="built_in">UIStatusBarStyleDefault</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 白色 */</span></span><br><span class="line"><span class="built_in">UIStatusBarStyleLightContent</span></span><br></pre></td></tr></table></figure>

<h4 id="1）通过设置-Info-plist-文件全局设置状态栏的文字颜色"><a href="#1）通过设置-Info-plist-文件全局设置状态栏的文字颜色" class="headerlink" title="1）通过设置 Info.plist 文件全局设置状态栏的文字颜色"></a>1）通过设置 Info.plist 文件全局设置状态栏的文字颜色</h4><ul>
<li>在 <code>Info.plist</code> 里增加一行 <code>UIStatusBarStyle（ Status bar style 也可以）</code>，这里可以设置两个值，就是上面提到那两个 <code>UIStatusBarStyleDefault</code> 和 <code>UIStatusBarStyleLightContent</code> 。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509160428.png" alt="Info.plist"></p>
<h4 id="2）通过代码全局设置状态栏的文字颜色"><a href="#2）通过代码全局设置状态栏的文字颜色" class="headerlink" title="2）通过代码全局设置状态栏的文字颜色"></a>2）通过代码全局设置状态栏的文字颜色</h4><ul>
<li><p>在 <code>Info.plist</code> 文件中添加 <code>View controller-based status bar appearance</code> 设置为 <code>NO</code> （理论同上，必须添加且必须设置为 <code>NO</code> ，否则不生效）。</p>
</li>
<li><p>在 <code>AppDelegate</code> 文件中，实现下面方法（在其他 UIViewController 中也有效）：</p>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* OC */</span></span><br><span class="line">[<span class="built_in">UIApplication</span> sharedApplication].statusBarStyle = <span class="built_in">UIStatusBarStyleLightContent</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Swift */</span></span><br><span class="line"><span class="built_in">UIApplication</span>.sharedApplication().statusBarStyle = <span class="built_in">UIStatusBarStyle</span>.LightContent;</span><br></pre></td></tr></table></figure>

<h4 id="3）通过代码局部设置状态栏的文字颜色"><a href="#3）通过代码局部设置状态栏的文字颜色" class="headerlink" title="3）通过代码局部设置状态栏的文字颜色"></a>3）通过代码局部设置状态栏的文字颜色</h4><ul>
<li><p>在 <code>Info.plist</code> 文件中添加 <code>View controller-based status bar appearance</code> 设置为 <code>YES</code> （理论同上，必须添加且必须设置为 <code>YES</code> ，否则不生效） 。</p>
</li>
<li><p>在需要设置状态栏颜色的 UIViewController 文件中，加入下面方法：</p>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* OC */</span></span><br><span class="line">- (<span class="built_in">UIStatusBarStyle</span>)preferredStatusBarStyle &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">UIStatusBarStyleLightContent</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Swift */</span></span><br><span class="line">override func preferredStatusBarStyle() -&gt; <span class="built_in">UIStatusBarStyle</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">UIStatusBarStyle</span>.LightContent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>但是！！</strong> 当 UIViewController 在 UINavigationController 导航栏中时，上面方法没用， <code>preferredStatusBarStyle</code> 方法根本不会被调用，因为 UINavigationController 中也有 <code>preferredStatusBarStyle</code> 这个方法。</p>
<p><strong>解决办法有两个：</strong></p>
<p><strong>方法一：</strong> 设置导航栏的 <code>barStyle</code> 属性会影响 <code>status bar</code> 的字体和背景色。如下。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 状态栏字体为白色，状态栏和导航栏背景为黑色 */</span></span><br><span class="line"><span class="keyword">self</span>.navigationController.navigationBar.barStyle = <span class="built_in">UIBarStyleBlack</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 状态栏字体为黑色，状态栏和导航栏背景为白色 */</span></span><br><span class="line"><span class="keyword">self</span>.navigationController.navigationBar.barStyle = <span class="built_in">UIBarStyleDefault</span>;</span><br></pre></td></tr></table></figure>

<p><strong>方法二：</strong> 自定义一个 UINavigationController 的子类，在这个子类中重写 <code>preferredStatusBarStyle</code> 这个方法，这样在 UIViewController 中就有效了，如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyNavigationController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIStatusBarStyle</span>)preferredStatusBarStyle &#123;</span><br><span class="line">    <span class="built_in">UIViewController</span> *topVC = <span class="keyword">self</span>.topViewController;</span><br><span class="line">    <span class="keyword">return</span> [topVC preferredStatusBarStyle];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<h3 id="2-设置-Status-Bar-的【背景部分】"><a href="#2-设置-Status-Bar-的【背景部分】" class="headerlink" title="2. 设置 Status Bar 的【背景部分】"></a>2. 设置 Status Bar 的【背景部分】</h3><p>背景部分，简单来说，就是状态栏的背景颜色，其实系统状态栏的背景颜色一直是透明的状态，当有导航栏时，导航栏背景是什么颜色，状态栏就是什么颜色，没有导航栏时，状态栏背后的视图时什么颜色，它就是什么颜色。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 这个方法是设置导航栏背景颜色，状态栏也会随之变色 */</span></span><br><span class="line">[<span class="keyword">self</span>.navigationController.navigationBar setBarTintColor:[<span class="built_in">UIColor</span> redColor]];</span><br></pre></td></tr></table></figure>

<p>如果想要单独设置状态栏颜色，可以添加以下方法来设置：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 设置状态栏背景颜色</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param color 设置颜色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setStatusBarBackgroundColor:(<span class="built_in">UIColor</span> *)color &#123;</span><br><span class="line">    <span class="built_in">UIView</span> *statusBar = [[[<span class="built_in">UIApplication</span> sharedApplication] valueForKey:<span class="string">@&quot;statusBarWindow&quot;</span>] valueForKey:<span class="string">@&quot;statusBar&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> ([statusBar respondsToSelector:<span class="keyword">@selector</span>(setBackgroundColor:)]) &#123;</span><br><span class="line">        statusBar.backgroundColor = color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>效果图：</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509160448.png" alt="单独设置状态栏背景颜色"></p>
<blockquote>
<p>好了，关于 Status Bar 状态栏的总结大概就这么多，其中说明了很多比较坑的细节，网上很多资料都没有说明清楚，希望对遇到这方面问题的朋友能有所帮助。</p>
</blockquote>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>状态栏</tag>
        <tag>Status Bar</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】AFNetworking 3.0 使用汇总（包括文件上传和文件下载）</title>
    <url>/2017/05/24/iOS/201705241759/</url>
    <content><![CDATA[<blockquote>
<p>由于自己公司的项目使用的还是老的 <code>AFNetworking 2.0</code> ，其中的网络请求使用的是 <code>AFHTTPRequestOperationManager</code> ，这个类在 <code>AFNetworking 3.0</code> 中已被废弃，所以需要将公司项目中的网络请求全部升级为 <code>AFNetworking 3.0</code> ，现在分享一下使用汇总。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h2><p><code>AFNetworking 3.0</code> 使用的是 <code>AFHTTPSessionManager </code> 来进行网络请求的，下面介绍一下参数的设置。</p>
<ul>
<li>关于 <code>requestSerializer</code> 它是 <code>AFNetworking</code> 参数编码的序列化器，它一共有三种编码格式，<code>responseSerializer</code> 同理，选择哪种看自己的需求。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> AFHTTPRequestSerializer <span class="comment">// 是普通的 HTTP 的编码格式的，也就是 mid=10&amp;method=userInfo&amp;dateInt=20160818 这种格式的。</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> AFJSONRequestSerializer <span class="comment">// 是 JSON 编码格式的，也就是 &#123;&quot;mid&quot;:&quot;11&quot;,&quot;method&quot;:&quot;userInfo&quot;,&quot;dateInt&quot;:&quot;20160818&quot;&#125; 这种格式的。</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> AFPropertyListRequestSerializer <span class="comment">// 这个没用过，但是看介绍说是编码成 plist 格式的参数。</span></span><br></pre></td></tr></table></figure>

<ul>
<li> <code>HTTPHeaderField</code> 请求头没有的话可以不用设置。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 创建网络请求对象 */</span></span><br><span class="line">AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置请求和接收的数据编码格式 */</span></span><br><span class="line">manager.requestSerializer = [AFJSONRequestSerializer serializer]; <span class="comment">// 设置请求数据为 JSON 数据</span></span><br><span class="line">manager.responseSerializer = [AFJSONResponseSerializer serializer]; <span class="comment">// 设置接收数据为 JSON 数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置请求头 */</span></span><br><span class="line">[manager.requestSerializer setValue:<span class="string">@&quot;application/json&quot;</span> forHTTPHeaderField:<span class="string">@&quot;Content-Type&quot;</span>];</span><br><span class="line">[manager.requestSerializer setValue:<span class="string">@&quot;xxx&quot;</span> forHTTPHeaderField:<span class="string">@&quot;xxx&quot;</span>];</span><br><span class="line">[manager.requestSerializer setValue:<span class="string">@&quot;xxx&quot;</span> forHTTPHeaderField:<span class="string">@&quot;xxx&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 请求地址 */</span></span><br><span class="line"><span class="built_in">NSString</span> *url = <span class="string">@&quot;http://xxx&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 请求参数 */</span></span><br><span class="line"><span class="built_in">NSDictionary</span> *parameters = @&#123; <span class="string">@&quot;xxx&quot;</span> : <span class="string">@&quot;xxx&quot;</span>, <span class="string">@&quot;xxx&quot;</span> : <span class="string">@&quot;xxx&quot;</span>, <span class="string">@&quot;xxx&quot;</span> : <span class="string">@&quot;xxx&quot;</span> &#125;;</span><br></pre></td></tr></table></figure>

<h2 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h2><p>网络请求有 <code>GET 请求、POST 请求、文件上传</code> 这几种，按自己需求选择相应请求的方法，参数设置使用上面的设置，<code>文件下载</code> 的话有点不一样，下面会单独说。</p>
<h3 id="1-GET-请求"><a href="#1-GET-请求" class="headerlink" title="1. GET 请求"></a>1. GET 请求</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[manager GET:url parameters:parameters progress:<span class="literal">nil</span> success:^(<span class="built_in">NSURLSessionDataTask</span> * _Nonnull task, <span class="keyword">id</span>  _Nullable responseObject) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;请求成功：%@&quot;</span>, responseObject);</span><br><span class="line">&#125; failure:^(<span class="built_in">NSURLSessionDataTask</span> * _Nullable task, <span class="built_in">NSError</span> * _Nonnull error) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;请求失败：%@&quot;</span>, error);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h3 id="2-POST-请求"><a href="#2-POST-请求" class="headerlink" title="2. POST 请求"></a>2. POST 请求</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[manager POST:url parameters:parameters progress:<span class="literal">nil</span> success:^(<span class="built_in">NSURLSessionDataTask</span> * _Nonnull task, <span class="keyword">id</span>  _Nullable responseObject) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;请求成功：%@&quot;</span>, responseObject);</span><br><span class="line">&#125; failure:^(<span class="built_in">NSURLSessionDataTask</span> * _Nullable task, <span class="built_in">NSError</span> * _Nonnull error) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;请求失败：%@&quot;</span>, error);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h3 id="3-文件上传"><a href="#3-文件上传" class="headerlink" title="3. 文件上传"></a>3. 文件上传</h3><p>下面以图片上传为例，其他文件的上传都是差不多的。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[manager POST:url parameters:parameters constructingBodyWithBlock:^(<span class="keyword">id</span>&lt;AFMultipartFormData&gt;  _Nonnull formData) &#123;</span><br><span class="line">    <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@&quot;test&quot;</span>];</span><br><span class="line">    <span class="built_in">NSData</span> *imageData = <span class="built_in">UIImageJPEGRepresentation</span>(image, <span class="number">1.0</span>); <span class="comment">// 将图片对象转成 data</span></span><br><span class="line">    [formData appendPartWithFileData:imageData name:<span class="string">@&quot;file&quot;</span> fileName:<span class="string">@&quot;test.png&quot;</span> mimeType:<span class="string">@&quot;image/png&quot;</span>]; <span class="comment">// 上传数据拼接</span></span><br><span class="line">&#125; progress:<span class="literal">nil</span> success:^(<span class="built_in">NSURLSessionDataTask</span> * _Nonnull task, <span class="keyword">id</span>  _Nullable responseObject) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;上传成功：%@&quot;</span>, responseObject);</span><br><span class="line">&#125; failure:^(<span class="built_in">NSURLSessionDataTask</span> * _Nullable task, <span class="built_in">NSError</span> * _Nonnull error) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;上传失败：%@&quot;</span>, error);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h2 id="请求结果的处理"><a href="#请求结果的处理" class="headerlink" title="请求结果的处理"></a>请求结果的处理</h2><ul>
<li>以下方法能够将获取到的 <code>responseObject </code> 数据直接转成 <code>NSString</code> 字符串或者 <code>NSDictionary </code> 字典，也可以使用 <code>MJExtension</code> 这个第三方库，能够将获取到的 <code>responseObject </code> 直接转换成对象，如果要转成字典或是对象， <code>responseObject </code> 必须是 <code>JSON</code> 格式的。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[manager POST:url parameters:parameters progress:<span class="literal">nil</span> success:^(<span class="built_in">NSURLSessionDataTask</span> * _Nonnull task, <span class="keyword">id</span>  _Nullable responseObject) &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *infoStr = [[<span class="built_in">NSString</span> alloc] initWithData:responseObject encoding:<span class="built_in">NSUTF8StringEncoding</span>]; <span class="comment">// 将得到的数据转换成 NSString 字符串</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;请求到的数据：%@&quot;</span>, infoStr);</span><br><span class="line">    <span class="built_in">NSDictionary</span> *resultDic = [<span class="built_in">NSJSONSerialization</span> JSONObjectWithData:responseObject options:<span class="built_in">NSJSONReadingMutableLeaves</span> error:<span class="literal">nil</span>]; <span class="comment">// 将得到的 JSON 数据转换成 NSDictionary 字典</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;请求到的数据：%@&quot;</span>, resultDic);</span><br><span class="line">&#125; failure:^(<span class="built_in">NSURLSessionDataTask</span> * _Nullable task, <span class="built_in">NSError</span> * _Nonnull error) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;请求失败：%@&quot;</span>, error);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<ul>
<li> <code>AFNetworking 2.0</code> 的返回参数是 <code>AFHTTPRequestOperation</code> ，而 <code>AFNetworking 3.0</code> 的返回参数是 <code>NSURLSessionDataTask </code> ，所以还是有些区别的，如果需要得到 <code>allHeaderFields</code> 这个参数需要强转一下。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[manager POST:url parameters:parameters progress:<span class="literal">nil</span> success:^(<span class="built_in">NSURLSessionDataTask</span> * _Nonnull task, <span class="keyword">id</span>  _Nullable responseObject) &#123;</span><br><span class="line">    <span class="built_in">NSHTTPURLResponse</span> *response = (<span class="built_in">NSHTTPURLResponse</span> *)task.response;</span><br><span class="line">    <span class="built_in">NSDictionary</span> *headerFields = response.allHeaderFields; <span class="comment">// allHeaderFields 参数获取</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;请求头：%@&quot;</span>, headerFields);</span><br><span class="line">&#125; failure:^(<span class="built_in">NSURLSessionDataTask</span> * _Nullable task, <span class="built_in">NSError</span> * _Nonnull error) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;请求失败：%@&quot;</span>, error);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><p>文件下载的话和上面三个不太一样，所以单独来说，上面那些设置的参数都不需要了，具体代码看下面。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 创建网络下载对象 */</span></span><br><span class="line">AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:[<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration]];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 下载地址 */</span></span><br><span class="line"><span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@&quot;http://xxx/test.mp4&quot;</span>];</span><br><span class="line"><span class="built_in">NSURLRequest</span> *request = [<span class="built_in">NSURLRequest</span> requestWithURL:url];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 下载路径 */</span></span><br><span class="line"><span class="built_in">NSString</span> *path = [<span class="built_in">NSHomeDirectory</span>() stringByAppendingPathComponent:<span class="string">@&quot;Documents&quot;</span>];</span><br><span class="line"><span class="built_in">NSString</span> *filePath = [path stringByAppendingPathComponent:url.lastPathComponent];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 开始请求下载 */</span></span><br><span class="line"><span class="built_in">NSURLSessionDownloadTask</span> *downloadTask = [manager downloadTaskWithRequest:request progress:^(<span class="built_in">NSProgress</span> * _Nonnull downloadProgress) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;下载进度：%.0f％&quot;</span>, downloadProgress.fractionCompleted * <span class="number">100</span>);</span><br><span class="line">&#125; destination:^<span class="built_in">NSURL</span> * _Nonnull(<span class="built_in">NSURL</span> * _Nonnull targetPath, <span class="built_in">NSURLResponse</span> * _Nonnull response) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSURL</span> fileURLWithPath:filePath]; <span class="comment">// 设定下载到的位置</span></span><br><span class="line">&#125; completionHandler:^(<span class="built_in">NSURLResponse</span> * _Nonnull response, <span class="built_in">NSURL</span> * _Nullable filePath, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;下载完成&quot;</span>);</span><br><span class="line">&#125;];</span><br><span class="line">[downloadTask resume];</span><br></pre></td></tr></table></figure>

<h2 id="监听网络状态"><a href="#监听网络状态" class="headerlink" title="监听网络状态"></a>监听网络状态</h2><p><code>AFNetWorking</code> 也可以用来监听网络状态，当网络状态发生改变的时候会自动调用以下 <code>Block</code> 回调，具体方法如下。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 监听网络状态 */</span></span><br><span class="line">AFNetworkReachabilityManager *manager = [AFNetworkReachabilityManager sharedManager];</span><br><span class="line">[manager setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) &#123;</span><br><span class="line">    <span class="keyword">if</span> (status == AFNetworkReachabilityStatusUnknown) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;当前网络：未知网络&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == AFNetworkReachabilityStatusNotReachable) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;当前网络：没有网络&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == AFNetworkReachabilityStatusReachableViaWWAN) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;当前网络：手机流量&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == AFNetworkReachabilityStatusReachableViaWiFi) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;当前网络：WiFi&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br><span class="line">[manager startMonitoring];</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>AFNetworking 3.0</code> 的大致使用方法都在这了，有需要的可以收藏一下。</p>
</blockquote>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>AFNetworking</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】创建 podspec 文件，给自己写的框架添加 CocoaPos 支持</title>
    <url>/2017/04/14/iOS/201704141546/</url>
    <content><![CDATA[<blockquote>
<p>最近想将自己写的框架支持 <code>CocoaPods</code> 集成，弄了好久，遇到了不少坑，所以想把方法记录下来，希望可以帮助大家少走一些坑，包括私有库的创建以及私有库依赖私有库的坑都已经写在下面了。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="1-将框架源码提交到-GitHub"><a href="#1-将框架源码提交到-GitHub" class="headerlink" title="1. 将框架源码提交到 GitHub"></a>1. 将框架源码提交到 GitHub</h2><p>想要添加 <code>CocoaPods</code> 支持必须将源码提交至 <code>GitHub</code> ，至于怎么提交相信大家都会，就不重复了。</p>
<p><strong>注意：</strong>在创建 <code>GitHub</code> 仓库的时候，下面的 <code>License 许可证</code> 必须选择 <code>MIT License</code> ，不能为 <code>None</code> ，否则验证会报错，在下面会用到。</p>
<p><img data-src="https://file.karise.cn/blog/20190509160507.png" alt="MIT License"></p>
<p>下图是我的项目目录结构，上面选择了 <code>MIT License</code> 后，项目目录中会多一个 <code>LICENSE</code> 的文件，没有就按照上面说的重新建一下仓库，这个文件必须要有，<code>GZZEditView</code> 目录中的文件就是我要添加 <code>CocoaPods</code> 支持的文件。</p>
<p><img data-src="https://file.karise.cn/blog/20190509160525.png" alt="目录结构"></p>
<h2 id="2-创建-podspec-文件"><a href="#2-创建-podspec-文件" class="headerlink" title="2. 创建 podspec 文件"></a>2. 创建 podspec 文件</h2><ul>
<li>用终端 <code>cd</code> 到你的项目目录并执行以下命令：（ <code>GZZEditView</code> 的位置换成你框架的名称，也是之后 <code>pod search</code> 的名称）</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pod spec create GZZEditView</span><br></pre></td></tr></table></figure>

<ul>
<li>这时候，项目目录中会生成一个 <code>.podspec</code> 的文件。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509160539.png" alt=" .podspec 文件"></p>
<h2 id="3-编辑-podspec-文件"><a href="#3-编辑-podspec-文件" class="headerlink" title="3. 编辑 podspec 文件"></a>3. 编辑 podspec 文件</h2><p>这一步非常重要，能不能验证通过就主要看这个文件的内容编辑是否正确了，作者就在这里耗了很久，总是验证报错。</p>
<ul>
<li>用编辑器打开 <code>.podspec</code> 的文件，将内容全部删除，然后将以下内容复制进去，这里只用到一部分必须的字段，如果需要设置更多字段，<a href="http://guides.cocoapods.org/syntax/podspec.html">点击这里</a>，以下部分字段并不是必须的，根据需求编辑即可。</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">Pod</span>:<span class="string">:Spec.new do |s|</span></span><br><span class="line">    <span class="meta">s.name</span>                       = <span class="string">&#x27;GZZEditView&#x27;</span></span><br><span class="line">    <span class="meta">s.version</span>                    = <span class="string">&#x27;1.0.0&#x27;</span></span><br><span class="line">    <span class="meta">s.summary</span>                    = <span class="string">&#x27;非常简单易用的轻量级编辑框。&#x27;</span></span><br><span class="line">    <span class="meta">s.homepage</span>                   = <span class="string">&#x27;https://github.com/karise-guo/GZZEditView&#x27;</span></span><br><span class="line">    <span class="meta">s.license</span>                    = <span class="string">&#123; :type =&gt; &#x27;MIT&#x27;, :file =&gt; &#x27;LICENSE&#x27; &#125;</span></span><br><span class="line">    <span class="meta">s.author</span>                     = <span class="string">&#123; &#x27;Karise&#x27; =&gt; &#x27;292710547@qq.com&#x27; &#125;</span></span><br><span class="line">    <span class="meta">s.social_media_url</span>           = <span class="string">&#x27;https://weibo.com/Jonzzs&#x27;</span></span><br><span class="line">    <span class="meta">s.platform</span>                   = <span class="string">:ios</span></span><br><span class="line">    <span class="meta">s.ios.deployment_target</span>      = <span class="string">&#x27;9.0&#x27;</span></span><br><span class="line">    <span class="meta">s.swift_version</span>            	 = <span class="string">&#x27;4.0&#x27;</span></span><br><span class="line">    <span class="meta">s.source</span>                     = <span class="string">&#123; :git =&gt; &#x27;https://github.com/karise-guo/GZZEditView.git&#x27;, :tag =&gt; s.version &#125;</span></span><br><span class="line">    <span class="meta">s.source_files</span>               = <span class="string">&#x27;GZZEditView/*.&#123;h,m&#125;&#x27;</span></span><br><span class="line">    <span class="meta">s.resource_bundle</span>            = <span class="string">&#123; &#x27;GZZEditView&#x27; =&gt; [&#x27;Resources/**/*.xcassets&#x27;] &#125;</span></span><br><span class="line">    <span class="meta">s.resource</span>                   = <span class="string">&#x27;xxx/xxx.bundle&#x27;</span></span><br><span class="line">    <span class="meta">s.ios.vendored_frameworks</span>    = <span class="string">&#x27;xxx/xxx.framework&#x27;</span></span><br><span class="line">    <span class="meta">s.frameworks</span>                 = <span class="string">&#x27;UIKit&#x27;</span></span><br><span class="line">    <span class="meta">s.static_framework</span>           = <span class="string">true</span></span><br><span class="line">    <span class="meta">s.dependency</span>                 <span class="string">&#x27;Masonry&#x27;</span></span><br><span class="line">    <span class="meta">s.subspec</span> <span class="string">&#x27;GroupName&#x27; do |s|</span></span><br><span class="line">        <span class="attr">...</span></span><br><span class="line">    <span class="attr">end</span></span><br><span class="line"><span class="attr">end</span></span><br></pre></td></tr></table></figure>

<ul>
<li>开始修改其中的内容，下面讲解一下各字段的含义，<code>xxx</code> 处就是需要修改的内容。</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">s.name</span> = <span class="string">&#x27;xxx&#x27; ：框架名称，也是 pod search 搜索的关键词，并且一定要和 .podspec 文件的名称一样，否则验证报错。（必须）</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">s.version</span> = <span class="string">&#x27;xxx&#x27; ：框架版本号。（必须）</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">s.summary</span> = <span class="string">&#x27;xxx&#x27; ： pod search 搜索框架时，显示的框架简介。（必须）</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">s.homepage</span> = <span class="string">&#x27;xxx&#x27; ：项目主页地址.（必须）</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">s.license</span> = <span class="string">&#123; :type =&gt; &#x27;MIT&#x27;, :file =&gt; &#x27;LICENSE&#x27; &#125; ：许可证，这里就这样写不用修改。（必须）</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">s.author</span> = <span class="string">&#123; &#x27;xxx&#x27; =&gt; &#x27;xxx&#x27; &#125; ：作者，前面填你的英文名，后面填你的个人邮箱。（必须）</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">s.social_media_url</span> = <span class="string">&#x27;xxx&#x27; ：社交网址，我填的是我的个人微博地址。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">s.platform</span> = <span class="string">:ios ：所属平台，这边不用更改。（必须）</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">s.ios.deployment_target</span> = <span class="string">&#x27;9.0&#x27; ：最低支持的 iOS 版本（必须）</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">s.swift_version</span> = <span class="string">&#x27;4.0&#x27; ：如果是 Swift 的话指定 Swift 编译版本</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">s.source</span> = <span class="string">&#123; :git =&gt; &#x27;xxx&#x27;, :tag =&gt; s.version &#125; ：GitHub 项目的仓库地址，这里只支持 HTTPS ，不支持 SSH 。（必须）</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">s.source_files</span> = <span class="string">&#x27;xxx/*.&#123;h,m&#125;&#x27; ：要添加 CocoaPods 支持的文件路径。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">几种写法：</span></span><br><span class="line"><span class="meta">s.source_files</span> = <span class="string">&#x27;xxx/*&#x27;</span></span><br><span class="line"><span class="meta">s.source_files</span> = <span class="string">&#x27;xxx/*.&#123;h,m&#125;&#x27;</span></span><br><span class="line"><span class="meta">s.source_files</span> = <span class="string">&#x27;xxx/**&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&#x27;*&#x27;：表示匹配所有文件</span></span><br><span class="line"><span class="meta">&#x27;*.&#123;h,m&#125;&#x27;：表示匹配所有以</span> <span class="string">.h 和 .m 结尾的文件</span></span><br><span class="line"><span class="attr">&#x27;**&#x27;：表示匹配所有子目录</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">s.resource_bundle</span> = <span class="string">&#123; &#x27;xxx&#x27; =&gt; [&#x27;xxx/**/*.xcassets&#x27;] &#125; ：要添加 CocoaPods 支持的图片资源，这个是我后补的所以 Demo 截图中没有这个，可以根据自己需求写。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">如果要在主工程中使用</span> <span class="string">pod 中的图片，方法如下：</span></span><br><span class="line"></span><br><span class="line"><span class="meta">//</span> <span class="string">假如 podspec 中定义的 Bundle 名字为 TestBundle</span></span><br><span class="line"><span class="meta">s.resource_bundle</span> = <span class="string">&#123; &#x27;TestBundle&#x27; =&gt; [&#x27;xxx/**/*.xcassets&#x27;] &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">//</span> <span class="string">这里就用 Swift 写一下，OC 方法是一样的</span></span><br><span class="line"><span class="attr">let</span> <span class="string">url = Bundle(for: View.self).resourceURL!</span></span><br><span class="line"><span class="attr">let</span> <span class="string">bundle = Bundle(url: url.appendingPathComponent(&quot;TestBundle.bundle&quot;))</span></span><br><span class="line"><span class="attr">let</span> <span class="string">image = UIImage(named: &quot;imageName&quot;, in: bundle, compatibleWith: nil)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">s.resource</span> = <span class="string">&#x27;xxx/xxx.bundle&#x27; ：用于引入自己打包的bundle</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">s.ios.vendored_frameworks</span> = <span class="string">&#x27;xxx/xxx.framework&#x27; ：用于引入自己打包的framework</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">s.frameworks</span> = <span class="string">&#x27;UIKit&#x27;：用于引入官方的 framework</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">s.static_framework</span> = <span class="string">true：用于声明包含静态库</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">s.dependency</span> <span class="string">&#x27;xxx&#x27; ：项目依赖的其他 pod 库，不能依赖未发布的库，版本号可以不写。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">多个依赖可以这样写：</span></span><br><span class="line"><span class="meta">s.dependency</span> <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="meta">s.dependency</span> <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="meta">s.dependency</span> <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">指定版本可以这样写：</span></span><br><span class="line"><span class="meta">s.dependency</span> <span class="string">&#x27;xxx&#x27;, &#x27;1.0.0&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">s.subspec</span> <span class="string">&#x27;xxx&#x27; do |s|</span></span><br><span class="line"></span><br><span class="line"><span class="attr">end</span></span><br><span class="line"></span><br><span class="line"><span class="meta">表示建立一个名字为</span> <span class="string">xxx 的子文件夹，可以将文件分类，我上面用 ... 跳过了，不需要可以不写，里面写法和外面是一样的，例如：</span></span><br><span class="line"></span><br><span class="line"><span class="meta">s.subspec</span> <span class="string">&#x27;xxx&#x27; do |s|</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">s.source_files</span>       = <span class="string">&#x27;xxx/*.&#123;h,m&#125;&#x27;</span></span><br><span class="line">    <span class="meta">s.resource_bundle</span>    = <span class="string">&#123; &#x27;xxx&#x27; =&gt; [&#x27;xxx/**/*.xcassets&#x27;] &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">end</span></span><br><span class="line"></span><br><span class="line"><span class="meta">注意：不同子文件夹下</span> <span class="string">source_files 中的文件是单独编译的，如果文件中引入了别的子文件夹下的代码是编译不通过的。</span></span><br></pre></td></tr></table></figure>

<h2 id="4-验证-podspec-文件"><a href="#4-验证-podspec-文件" class="headerlink" title="4. 验证 podspec 文件"></a>4. 验证 podspec 文件</h2><p><code>podspec</code> 文件修完完成以后，<code>command + s</code> 保存一下，接下来开始验证。</p>
<ul>
<li>依旧用终端 <code>cd</code> 到你的项目目录，刚才终端没关的话，就直接执行以下命令：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pod lib lint</span><br></pre></td></tr></table></figure>

<ul>
<li>如果是如下图提示只有 <code>warning</code> 错误，并提示 <code>but you can use &#39;--allow-warnings&#39; to ignore them</code> 的话，就执行以下命令忽略 <code>warning</code> 来验证：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pod lib lint --allow-warnings</span><br></pre></td></tr></table></figure>

<p><img data-src="https://file.karise.cn/blog/20190509160832.png" alt="验证 podspec 文件失败"></p>
<ul>
<li>如果提示有 <code>error</code> 错误的话，就必须按照提示将错误解决掉，大多数都是 <code>podspec</code> 文件信息编辑有误，解决完后重新进行验证，如果提示信息不足，可以执行以下命令以获取更多错误信息：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pod lib lint --verbose</span><br></pre></td></tr></table></figure>

<ul>
<li>如果出现如下图的 <code>GZZEditView passed validation.</code> 就是验证成功了。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509161013.jpg" alt="验证 podspec 文件成功"></p>
<h2 id="5-给项目打上-tag-版本"><a href="#5-给项目打上-tag-版本" class="headerlink" title="5. 给项目打上 tag 版本"></a>5. 给项目打上 tag 版本</h2><p>因为 <code>CocoaPods</code> 是依赖项目的 <code>tag</code> 版本的，所以必须打上 <code>tag</code> 版本。</p>
<ul>
<li><code>podspec</code> 文件验证成功后，先将改动后的文件 <code>commit</code> 提交，接着 <code>push</code> 推送到 <code>GitHub</code> 。</li>
<li>然后执行以下命令打上 <code>tag</code> 版本，版本名必须要和之前<code>podspec</code> 文件中的 <code>s.version</code> 一致。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git tag <span class="string">&quot;1.0.0&quot;</span> // 为 git 提交打上 tag</span><br><span class="line">git push --tags // 将 tag 推送到远程仓库</span><br></pre></td></tr></table></figure>

<h2 id="6-注册-trunk"><a href="#6-注册-trunk" class="headerlink" title="6. 注册 trunk"></a>6. 注册 trunk</h2><p>如果只想发布到私有 <code>CocoaPods</code> 仓库，可以跳过 <code>6、7、8</code> 步直接看第 <code>9</code> 步。</p>
<p><strong>注意：</strong> <code>trunk</code> 需要 <code>CocoaPods 0.33</code> 版本以上，如果版本太低，就先把 <code>CocoaPods</code> 版本升级一下，具体怎么升级这里就不说了。</p>
<ul>
<li>已经注册过 <code>trunk</code> 的就不需要注册了，执行以下命令查看自己有没有注册过：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pod trunk me</span><br></pre></td></tr></table></figure>

<ul>
<li>出现以下注册信息就代表已经注册过 <code>trunk</code> 了。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509161028.png" alt=" trunk 注册信息"></p>
<ul>
<li>如果没有就执行以下命令来注册 <code>trunk</code> ，前面填写你的个人邮箱地址，后面填写你的英文名字。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pod trunk register xxx <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>例如：</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pod trunk register 292710547@qq.com <span class="string">&quot;Karise&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>执行注册命令完成之后，会验证注册邮箱，给你填的邮箱地址发送一个邮件，进入邮件打开里面的链接，弹出网页后就注册成功了。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509161043.png" alt="注册邮箱验证"></p>
<h2 id="7-发布到-CocoaPods"><a href="#7-发布到-CocoaPods" class="headerlink" title="7. 发布到 CocoaPods"></a>7. 发布到 CocoaPods</h2><p>依旧先 <code>cd</code> 到你的项目目录，接着要注意的是，发布时会再次验证你的 <code>podspec</code> 文件，如果刚才验证时使用了 <code>--allow-warnings</code> ，那么发布的时候也应该使用，否则会出现相同的报错，<code>GZZEditView</code> 改成你自己 <code>podspec</code> 文件的名字。</p>
<ul>
<li>如果刚才是用 <code>pod lib lint</code> 验证成功的，就执行以下命令发布：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pod trunk push GZZEditView.podspec</span><br></pre></td></tr></table></figure>

<ul>
<li>如果刚才是用 <code>pod lib lint --allow-warnings</code> 验证成功的，就执行以下命令发布：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pod trunk push GZZEditView.podspec --allow-warnings</span><br></pre></td></tr></table></figure>

<ul>
<li>最后出现如下图所示，就表示发布成功了。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509161100.png" alt="发布成功"></p>
<h2 id="8-赶快验证一下吧"><a href="#8-赶快验证一下吧" class="headerlink" title="8. 赶快验证一下吧"></a>8. 赶快验证一下吧</h2><ul>
<li>执行以下命令搜索你的 <code>pods</code> 库：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pod search GZZEditView</span><br></pre></td></tr></table></figure>

<ul>
<li>不出意外的话就会显示出你刚才发布的框架：</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509161115.png" alt="GZZEditView"></p>
<ul>
<li>若是 <code>trunk push</code> 成功了，却搜索不到自己的框架，解决方法参考我的另一篇文章 <a href="http://www.jianshu.com/p/a12da9a64b29">传送门</a> 。</li>
</ul>
<h2 id="9-发布到私有仓库"><a href="#9-发布到私有仓库" class="headerlink" title="9. 发布到私有仓库"></a>9. 发布到私有仓库</h2><ul>
<li><p>发布之前需要先创建一个用来存放私有库的 <code>Git</code> 仓库，然后将仓库 <code>git clone</code> 到 <code>~/.CocoaPods/repo</code> 这个目录。</p>
</li>
<li><p>然后在终端输入 <code>pod repo</code> 就可以看到除了有一个 <code>master</code> 的官方库以外，还多了一个自己的私有仓库。</p>
</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509171841.jpg"></p>
<ul>
<li><p>然后依旧先 <code>cd</code> 到你的项目目录，接着要注意的是，发布时会再次验证你的 <code>podspec</code> 文件，如果刚才验证时使用了 <code>--allow-warnings</code> ，那么发布的时候也应该使用，否则会出现相同的报错，<code>fmone</code> 是我自己私有仓库的名字，需要改成你自己的名字，<code>GZZEditView</code> 改成你自己 <code>podspec</code> 文件的名字。</p>
</li>
<li><p>如果刚才是用 <code>pod lib lint</code> 验证成功的，就执行以下命令发布：</p>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pod repo push fmone GZZEditView.podspec</span><br></pre></td></tr></table></figure>

<ul>
<li>如果刚才是用 <code>pod lib lint --allow-warnings</code> 验证成功的，就执行以下命令发布：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pod repo push fmone GZZEditView.podspec --allow-warnings</span><br></pre></td></tr></table></figure>

<ul>
<li>最后出现如下图所示，就表示发布成功了。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509171856.jpg"></p>
<ul>
<li>如要项目中要使用私有仓库来 <code>pod install</code> ，必须在 <code>podfile</code> 开头指明私有仓库的地址和官方仓库地址，注意两个地址都要指定，例如：</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">source</span> <span class="string">&#x27;https://github.com/CocoaPods/Specs.git&#x27; # 公共仓库地址</span></span><br><span class="line"><span class="attr">source</span> <span class="string">&#x27;https://github.com/karise-guo/xxx.git&#x27;      # 私有仓库地址</span></span><br><span class="line"></span><br><span class="line"><span class="attr">target</span> <span class="string">&#x27;TestProject&#x27; do</span></span><br><span class="line"></span><br><span class="line"><span class="comment">    # 第三方库</span></span><br><span class="line">    <span class="attr">pod</span> <span class="string">&#x27;Masonry&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">    # 私有库</span></span><br><span class="line">    <span class="attr">pod</span> <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="attr">end</span></span><br></pre></td></tr></table></figure>

<h2 id="10-私有库依赖私有库"><a href="#10-私有库依赖私有库" class="headerlink" title="10. 私有库依赖私有库"></a>10. 私有库依赖私有库</h2><p>这个情况就比较特殊了，如果私有库中依赖了另一个私有库，<code>podspec</code> 文件中依旧要使用 <code>s.dependency &#39;xxx&#39;</code> 来指明依赖的私有库，但是在验证 <code>podspec</code> 时就不能使用 <code>pod lib lint</code> 来验证了，否则会找不到依赖的私有库，需要从远程验证并指定私有库的地址，下面是验证步骤。</p>
<ul>
<li><p><code>podspec</code> 文件的编辑没有区别，编辑完以后，由于需要远程验证而不是本地验证，所以需要先将编辑完的 <code>podspec</code> 文件 <code>git push</code> 再打上 <code>tag</code> 。</p>
</li>
<li><p>然后使用以下命令开始验证，后面指明私有仓库的地址和官方仓库地址，注意两个地址都要指定。</p>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pod spec lint --sources=<span class="string">&#x27;私有仓库地址,https://github.com/CocoaPods/Specs.git&#x27;</span> --allow-warnings</span><br></pre></td></tr></table></figure>

<ul>
<li>验证成功后发布到私有仓库时，也需要指明私有仓库的地址和官方仓库地址，如下。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pod repo push fmone xxx.podspec --sources=<span class="string">&#x27;私有仓库地址,https://github.com/CocoaPods/Specs.git&#x27;</span> --allow-warnings</span><br></pre></td></tr></table></figure>

<p><img data-src="https://file.karise.cn/blog/20190509171912.jpg"></p>
<blockquote>
<p>好了，大功告成，其实过程挺简单的，只要 <code>podspec</code> 文件编辑正确，就会少走很多坑，以后再次更新框架的话，只需要修改 <code>podspec</code> 文件中的 <code>s.version</code> 版本，然后把你的项目再打一个 <code>tag</code> 版本，接着再次提交到 <code>CocoaPods</code> 就可以了。</p>
</blockquote>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>CocoaPods</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】解决 &#39;XCTest/XCTest.h&#39; file not found 报错</title>
    <url>/2017/05/25/iOS/201705251556/</url>
    <content><![CDATA[<blockquote>
<p>今天在改项目的时候，突然遇到一个报错提示为 <code>&#39;XCTest/XCTest.h&#39; file not found</code> ，可能是我在该项目的时候误删了什么，这里记录一下错误的解决方法。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul>
<li>打开项目的 <code>Target</code> - <code>Build Settings</code> ，然后搜索 <code>Framework Search Paths</code> ，在该选项中加入以下设置：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$(PLATFORM_DIR)/Developer/Library/Frameworks</span><br></pre></td></tr></table></figure>

<ul>
<li><code>command + B</code> 重新编译一下，问题解决。</li>
</ul>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>iOS 开发问题</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】解决使用 CocoaPods 进行 pod install 时出现 Unable to add a source with url ... 报错</title>
    <url>/2017/05/18/iOS/201705181110/</url>
    <content><![CDATA[<blockquote>
<p>本来一直是好好的，直到我装了两个 <code>Xcode</code> ，然后又把另一个 <code>Xcode</code> 给删了，结果 <code>pod install</code> 的时候就出错了，下面分享一下解决方法。</p>
</blockquote>
<a id="more"></a>

<hr>
<ul>
<li>执行 <code>pod install</code> 时出现如下错误：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[!] Unable to add a <span class="built_in">source</span> with url `https://github.com/CocoaPods/Specs.git` named `master-1`.</span><br><span class="line">You can try adding it manually <span class="keyword">in</span> `~/.cocoapods/repos` or via `pod repo add`.</span><br></pre></td></tr></table></figure>

<p><img data-src="https://file.karise.cn/blog/20190509161443.png" alt="错误"></p>
<ul>
<li>网上说是因为装了多个 <code>Xcode</code> 导致路径变了的原因，网上的解决方法是：打开终端输入以下命令选择你当前使用的 <code>Xcode</code> 路径即可。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo xcode-select -switch /Applications/Xcode.app</span><br></pre></td></tr></table></figure>

<ul>
<li>但是本人使用以上方法并没有什么用，如果你们使用上面方法也没用的话，可以使用我的这个方法：打开终端输入以下命令进入到 <code>repos</code> 文件夹下。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.cocoapods/repos</span><br></pre></td></tr></table></figure>

<ul>
<li>输入以下命令安装 <code>source</code> 。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/CocoaPods/Specs.git master-1</span><br></pre></td></tr></table></figure>

<ul>
<li><code>clone</code> 完成后，接着再 <code>cd</code> 到你的项目下重新执行 <code>pod install</code> 试下，应该就可以了。</li>
</ul>
<blockquote>
<p>方法就是这样，如果各位使用这两种方法都不行的话，那就把 <code>CocoaPods</code> 删除再重装一下吧。</p>
</blockquote>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>iOS 开发问题</tag>
        <tag>CocoaPods</tag>
        <tag>CocoaPods 问题</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】将自己的框架打包成 Framework 的方法</title>
    <url>/2017/06/01/iOS/201706011323/</url>
    <content><![CDATA[<blockquote>
<p>最近需要将公司项目中的公共代码给提取出来，打包成 <code>Framework</code> 来使用，这样可以使得我们的公共代码易于分享，并且可以在多个工程中易于复用，而且将这些代码给别人使用时，可以隐藏实现细节，控制公开的头文件，下面分享一下打包成 <code>Framework</code> 的步骤。</p>
</blockquote>
<blockquote>
<p>如果你要打包的代码需要用到别的第三方库的话，可以转到我的另一篇文章：<a href="http://www.jianshu.com/p/6790fc295f48">【iOS 开发】打包 Framework 时使用 CocoaPods 引入第三方库的方法</a></p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="创建-Framework-工程"><a href="#创建-Framework-工程" class="headerlink" title="创建 Framework 工程"></a>创建 Framework 工程</h2><h3 id="1-创建打包工程"><a href="#1-创建打包工程" class="headerlink" title="1. 创建打包工程"></a>1. 创建打包工程</h3><ul>
<li>打开 <code>Xcode</code> 新建一个工程，选择 <code>Framework &amp; Libray</code> 选项中的 <code>Cocoa Touch Framework</code> ，这里说一下我的 <code>Xcode</code> 版本是 <code>8.3.2</code> 。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509161844.png" alt="创建工程"></p>
<ul>
<li>因为要打包所需的文件，所以这里我自己创建了一个测试类，在实际的打包过程中，直接把需要打包的所有文件拖到该工程中即可。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509161856.png" alt="测试类"></p>
<h3 id="2-添加公开头文件"><a href="#2-添加公开头文件" class="headerlink" title="2. 添加公开头文件"></a>2. 添加公开头文件</h3><ul>
<li>选中 <code>Target</code> ，选择 <code>Build Phases</code> - <code>Headers</code> ，可以看出有三个选项，分别是 <code>Public 、Private 、Project</code> ，把需要公开给别人的 <code>.h</code> 文件拖到 <code>Public</code> 中，把不想公开的，即为隐藏的 <code>.h</code> 文件拖到 <code>Project</code> 中。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509161909.png" alt="Headers"></p>
<ul>
<li>完成上述步骤之后，在默认生成的 <code>.h</code> 文件中，我的是 <code>TestFramework.h</code> ，把所有需要暴露的 <code>.h</code> 文件都用 <code>#import &lt;TestFramework/PublicHeader.h&gt; </code>引入，记住一定要将所有需要暴露的 <code>.h</code> 文件都引入，也就是上面 <code>Headers</code> - <code>Public</code> 中加的所有 <code>.h</code> 文件，不然编译后生成的 <code>.framework</code> 在引用的时候会有警告。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509161921.png" alt="引入头文件"></p>
<h3 id="3-更改设置参数"><a href="#3-更改设置参数" class="headerlink" title="3. 更改设置参数"></a>3. 更改设置参数</h3><ul>
<li>选中 <code>Target</code> ，选择 <code>Build Settings</code> ，在 <code>Architectures</code> 下增加 <code>armv7s</code> 。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509161933.png" alt="更改设置参数"></p>
<ul>
<li>选中 <code>Target</code> ，选择 <code>Build Settings</code> ，在搜索栏搜索 <code>Mach-O Type</code> ，将 <code>Mach-O Type</code> 修改为 <code>Static Library</code>。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509162032.png" alt="更改设置参数"></p>
<h2 id="工程打包成-Framework"><a href="#工程打包成-Framework" class="headerlink" title="工程打包成 Framework"></a>工程打包成 Framework</h2><h3 id="1-创建-Aggregate"><a href="#1-创建-Aggregate" class="headerlink" title="1. 创建 Aggregate"></a>1. 创建 Aggregate</h3><ul>
<li>新建一个 <code>Target</code> ，选择 <code>Cross-platform</code> - <code>Aggregate</code> ，名字随便起一个。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509162044.png" alt="创建 Aggregate"></p>
<ul>
<li>选中新建的 <code>Target</code> ，点击 <code>Build Pharas</code> 中的 <code>+</code> ，选择 <code>New Run Script Phase</code> 。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509162104.png" alt="New Run Script Phase"></p>
<ul>
<li>点开 <code>Run Script</code> ，添加以下的脚本代码。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sets the target folders and the final framework product.</span></span><br><span class="line"><span class="comment"># 如果工程名称和Framework的Target名称不一样的话，要自定义FMKNAME</span></span><br><span class="line"><span class="comment"># 例如: FMK_NAME = &quot;MyFramework&quot;</span></span><br><span class="line">FMK_NAME=<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line"><span class="comment"># Install dir will be the final output to the framework.</span></span><br><span class="line"><span class="comment"># The following line create it in the root folder of the current project.</span></span><br><span class="line">INSTALL_DIR=<span class="variable">$&#123;SRCROOT&#125;</span>/Products/<span class="variable">$&#123;FMK_NAME&#125;</span>.framework</span><br><span class="line"><span class="comment"># Working dir will be deleted after the framework creation.</span></span><br><span class="line">WRK_DIR=build</span><br><span class="line">DEVICE_DIR=<span class="variable">$&#123;WRK_DIR&#125;</span>/Release-iphoneos/<span class="variable">$&#123;FMK_NAME&#125;</span>.framework</span><br><span class="line">SIMULATOR_DIR=<span class="variable">$&#123;WRK_DIR&#125;</span>/Release-iphonesimulator/<span class="variable">$&#123;FMK_NAME&#125;</span>.framework</span><br><span class="line"><span class="comment"># -configuration $&#123;CONFIGURATION&#125;</span></span><br><span class="line"><span class="comment"># Clean and Building both architectures.</span></span><br><span class="line">xcodebuild -configuration <span class="string">&quot;Release&quot;</span> -target <span class="string">&quot;<span class="variable">$&#123;FMK_NAME&#125;</span>&quot;</span> -sdk iphoneos clean build</span><br><span class="line">xcodebuild -configuration <span class="string">&quot;Release&quot;</span> -target <span class="string">&quot;<span class="variable">$&#123;FMK_NAME&#125;</span>&quot;</span> -sdk iphonesimulator clean build</span><br><span class="line"><span class="comment"># Cleaning the oldest.</span></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="string">&quot;<span class="variable">$&#123;INSTALL_DIR&#125;</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">rm -rf <span class="string">&quot;<span class="variable">$&#123;INSTALL_DIR&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">mkdir -p <span class="string">&quot;<span class="variable">$&#123;INSTALL_DIR&#125;</span>&quot;</span></span><br><span class="line">cp -R <span class="string">&quot;<span class="variable">$&#123;DEVICE_DIR&#125;</span>/&quot;</span> <span class="string">&quot;<span class="variable">$&#123;INSTALL_DIR&#125;</span>/&quot;</span></span><br><span class="line"><span class="comment"># Uses the Lipo Tool to merge both binary files (i386 + armv6/armv7) into one Universal final product.</span></span><br><span class="line">lipo -create <span class="string">&quot;<span class="variable">$&#123;DEVICE_DIR&#125;</span>/<span class="variable">$&#123;FMK_NAME&#125;</span>&quot;</span> <span class="string">&quot;<span class="variable">$&#123;SIMULATOR_DIR&#125;</span>/<span class="variable">$&#123;FMK_NAME&#125;</span>&quot;</span> -output <span class="string">&quot;<span class="variable">$&#123;INSTALL_DIR&#125;</span>/<span class="variable">$&#123;FMK_NAME&#125;</span>&quot;</span></span><br><span class="line">rm -r <span class="string">&quot;<span class="variable">$&#123;WRK_DIR&#125;</span>&quot;</span></span><br><span class="line">open <span class="string">&quot;<span class="variable">$&#123;INSTALL_DIR&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://file.karise.cn/blog/20190509162118.png" alt="Run Script"></p>
<h3 id="2-编译所有文件"><a href="#2-编译所有文件" class="headerlink" title="2. 编译所有文件"></a>2. 编译所有文件</h3><ul>
<li>按照下图将编译的 <code>Target</code> 选择为刚才创建的 <code>Aggregate</code> ，<code>Device</code> 选择为 <code>Generic iOS Device</code> ，然后按下 <code>Command + B</code> 开始编译。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509162139.png" alt="编译文件"></p>
<ul>
<li>编译完成后会自动弹出已经创建完成的 <code>Framework</code> 包内容，最终打包完的 <code>.framework</code> 会在项目下的 <code>Products</code> 文件夹下。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509162249.png" alt="Products"></p>
<h2 id="测试打包完的-Framework"><a href="#测试打包完的-Framework" class="headerlink" title="测试打包完的 Framework"></a>测试打包完的 Framework</h2><ul>
<li>新建一个测试工程 <code>TestDemo</code> ，将打包完的 <code>TestFramework.framework</code> 拖到工程中，测试一下刚才创建的 <code>TestClass</code> 类，可以看到信息打印出来了，测试成功。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509162302.png" alt="测试工程"></p>
<ul>
<li>如果使用打包完的 <code>Framework</code> 有出现崩溃的情况，可以考虑在项目 <code>Other linker flags</code> 中加入一些参数，下面介绍三个常用参数：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-ObjC &#x2F;&#x2F; 加了这个参数后，链接器就会把静态库中所有的 Objective-C 类和分类都加载到最后的可执行文件中。</span><br><span class="line"></span><br><span class="line">-all_load &#x2F;&#x2F; 会让链接器把所有找到的目标文件都加载到可执行文件中，但是千万不要随便使用这个参数！假如你使用了不止一个静态库文件，然后又使用了这个参数，那么你很有可能会遇到 ld: duplicate symbol 错误，因为不同的库文件里面可能会有相同的目标文件，所以建议在遇到 -ObjC 失效的情况下使用 -force_load 参数。</span><br><span class="line"></span><br><span class="line">-force_load &#x2F;&#x2F; 所做的事情跟 -all_load 其实是一样的，但是 -force_load 需要指定要进行全部加载的库文件的路径，这样的话，你就只是完全加载了一个库文件，不影响其余库文件的按需加载。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】打包 Framework 时使用 CocoaPods 引入第三方库的方法</title>
    <url>/2017/06/02/iOS/201706021319/</url>
    <content><![CDATA[<blockquote>
<p>最近需要将自己项目的公共代码打包成 <code>Framework</code> 来使用，但是在打包过程中遇到一个问题，就是提取的公共代码中用到了一些第三方的库，比如 <code>AFNetworking</code> 等，怎么才能把第三方库集成进来让代码编译通过并打包成功呢，网上找了很久都没有找到一篇专门说这个的，让我走了不少坑，现在就分享一下在打包 <code>Framework</code> 时怎样使用 <code>CocoaPods</code> 引入第三方库。</p>
</blockquote>
<blockquote>
<p>这篇文章已经不适用，建议查看我的另一篇文章：<a href="https://www.jianshu.com/p/6e5491b72bad">【iOS 开发】利用 Carthage 将项目打包 Framework 并依赖 CocoaPods 第三方库的方法</a></p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="创建-Framework-工程"><a href="#创建-Framework-工程" class="headerlink" title="创建 Framework 工程"></a>创建 Framework 工程</h2><h3 id="1-创建打包工程"><a href="#1-创建打包工程" class="headerlink" title="1. 创建打包工程"></a>1. 创建打包工程</h3><ul>
<li>打开 <code>Xcode</code> 新建一个工程，选择 <code>Framework &amp; Libray</code> 选项中的 <code>Cocoa Touch Framework</code> ，这里说一下我的 <code>Xcode</code> 版本是 <code>8.3.2</code> 。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509162302.png" alt="创建工程"></p>
<ul>
<li>假设我的代码中要用到 <code>MBProgressHUD</code> 这个第三方库（比较好演示），然后使用 <code>CocoaPods</code> 在工程中集成 <code>MBProgressHUD</code> ，集成方法和普通项目一模一样。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509162302.png" alt="CocoaPods"></p>
<ul>
<li>然后选择工程下的 <code>TestFramework.xcworkspace</code> 重新打开工程。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509162344.png" alt="重新打开工程"></p>
<ul>
<li>因为要打包所需的文件，所以这里我自己创建了一个测试类，并在里面使用了 <code>MBProgressHUD</code> 这个库，在实际的打包过程中，直接把需要打包的所有文件拖到该工程中即可。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509162356.png" alt="测试类"></p>
<h3 id="2-添加公开头文件"><a href="#2-添加公开头文件" class="headerlink" title="2. 添加公开头文件"></a>2. 添加公开头文件</h3><ul>
<li>选中 <code>Target</code> ，选择 <code>Build Phases</code> - <code>Headers</code> ，可以看出有三个选项，分别是 <code>Public 、Private 、Project</code> ，把需要公开给别人的 <code>.h</code> 文件拖到 <code>Public</code> 中，把不想公开的，即为隐藏的 <code>.h</code> 文件拖到 <code>Project</code> 中。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509162412.png" alt="Headers"></p>
<ul>
<li>完成上述步骤之后，在默认生成的 <code>.h</code> 文件中，我的是 <code>TestFramework.h</code> ，把所有需要暴露的 <code>.h</code> 文件都用 <code>#import &lt;TestFramework/PublicHeader.h&gt; </code>引入，记住一定要将所有需要暴露的 <code>.h</code> 文件都引入，也就是上面 <code>Headers</code> - <code>Public</code> 中加的所有 <code>.h</code> 文件，不然编译后生成的 <code>.framework</code> 在引用的时候会有警告。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509162449.png" alt="引入头文件"></p>
<h3 id="3-更改设置参数"><a href="#3-更改设置参数" class="headerlink" title="3. 更改设置参数"></a>3. 更改设置参数</h3><ul>
<li>选中 <code>Target</code> ，选择 <code>Build Settings</code> ，在 <code>Architectures</code> 下增加 <code>armv7s</code> 。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509162520.png" alt="更改设置参数"></p>
<ul>
<li>选中 <code>Target</code> ，选择 <code>Build Settings</code> ，在搜索栏搜索 <code>Mach-O Type</code> ，将 <code>Mach-O Type</code> 修改为 <code>Static Library</code>。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509162632.png" alt="更改设置参数"></p>
<h2 id="工程打包成-Framework"><a href="#工程打包成-Framework" class="headerlink" title="工程打包成 Framework"></a>工程打包成 Framework</h2><h3 id="1-真机编译所有文件"><a href="#1-真机编译所有文件" class="headerlink" title="1. 真机编译所有文件"></a>1. 真机编译所有文件</h3><ul>
<li>按照下图将编译的 <code>Device</code> 选择为真机 ，然后按下 <code>Command + B</code> 开始编译，编译成功后右键 <code>Products</code> 文件夹下的 <code>.framework</code> 文件，点击 <code>show in Finder</code>。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509162712.png" alt="编译真机"></p>
<ul>
<li>打开后可以看到打包完成的真机 <code>Framework</code> 包。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509162755.png" alt="Framework"></p>
<h3 id="2-模拟器编译所有文件"><a href="#2-模拟器编译所有文件" class="headerlink" title="2. 模拟器编译所有文件"></a>2. 模拟器编译所有文件</h3><ul>
<li>按照下图将编译的 <code>Device</code> 选择为随便一个模拟器 ，然后按下 <code>Command + B</code> 开始编译，编译成功后右键 <code>Products</code> 文件夹下的 <code>.framework</code> 文件，点击 <code>show in Finder</code>。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509162834.png" alt="编译模拟器"></p>
<ul>
<li>打开后可以看到打包完成的模拟器 <code>Framework</code> 包。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509162850.png" alt="Framework"></p>
<h3 id="3-将两个-Framework-合成"><a href="#3-将两个-Framework-合成" class="headerlink" title="3. 将两个 Framework 合成"></a>3. 将两个 Framework 合成</h3><p>上面有两个 <code>Framework</code> ， 一个是 <code>Debug-iphoneos（真机）</code> 下的，一个是 <code>Debug-iphonesimulator（模拟器）</code> 下的，需要通过终端命令将两个 <code>Framework</code> 合为一个模拟器和真机都可使用的 <code>Framework</code> 。</p>
<ul>
<li>打开终端先输入 <code>lipo -create</code> ，然后输入 <code>空格</code> 。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509162916.png" alt="Framework 合成"></p>
<ul>
<li>接着将 <code>Debug-iphoneos（真机）</code> 下的 <code>TestFramework</code> 也就是上面框出来的空白文件直接拖到终端，终端会自动显示路径。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509162941.png" alt="Framework 合成"></p>
<ul>
<li>然后直接将 <code>Debug-iphonesimulator（模拟器）</code> 下的 <code>TestFramework</code> 也拖到终端。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509163003.png" alt="Framework 合成"></p>
<ul>
<li>接着输入 <code>-output</code> ，然后输入 <code>空格</code> 。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509163020.png" alt="Framework 合成"></p>
<ul>
<li>然后输入 <code>~/Desktop/NewTestFramework</code> 后直接回车。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509163031.png" alt="Framework 合成"></p>
<ul>
<li>这时候桌面上会多一个新的文件为 <code>NewTestFramework</code> ，这时候将真机下的 <code>.framework</code> 包文件复制出来，然后将 <code>NewTestFramework</code> 重命名为 <code>TestFramework</code> 也就是 <code>.framework</code> 包中那个空白文件的名字，如果有 <code>.lipo</code> 后缀就去掉，接着替换 <code>.framework</code> 包中的那个空白文件。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509163043.png" alt="Framework 合成"></p>
<ul>
<li>最终替换完成后的 <code>.framework</code> 包就是我们最后所需要的包了，但是可以发现打包完后的 <code>.framework</code> 包里面是没有 <code>CocoaPods</code> 集成的第三方库的，所以在使用 <code>.framework</code> 包时，工程中必须也要集成 <code>.framework</code> 包中用到的第三方库，否则会找不到文件而报错。</li>
</ul>
<h2 id="测试打包完的-Framework"><a href="#测试打包完的-Framework" class="headerlink" title="测试打包完的 Framework"></a>测试打包完的 Framework</h2><ul>
<li>新建一个测试工程 <code>TestDemo</code> ，将打包完的 <code>TestFramework.framework</code> 拖到工程中，测试一下刚才创建的 TestClass 类，可以看到 <code>MBProgressHUD</code> 加载框显示出来了，测试成功。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509163055.png" alt="测试工程"></p>
<ul>
<li>上面说了，测试工程中也要集成 <code>MBProgressHUD</code> ，否则会报错。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509163108.png" alt="第三方库"></p>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>CocoaPods</tag>
        <tag>Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】编译出现 Linker command failed with exit code 1（use -v to see invocation）报错的解决方法</title>
    <url>/2017/05/27/iOS/201705270946/</url>
    <content><![CDATA[<blockquote>
<p>这两天在整理公司项目代码的时候，由于之前项目目录比较凌乱，所以项目目录中存在很多的重复文件，在整理过程中碰到最多的报错就是 <code>Linker command failed with exit code 1 (use -v to see invocation)</code> ，在这里记录一下解决方法，留着以后看，也分享给有同样问题的你们。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="报错提示"><a href="#报错提示" class="headerlink" title="报错提示"></a>报错提示</h2><p><code>Linker command failed with exit code 1 (use -v to see invocation)</code> 这种报错一般点上去没什么反应，不会给出什么提示。</p>
<p><img data-src="https://file.karise.cn/blog/20190509161541.png" alt="报错"></p>
<p>可以点击别的警告，然后在拉到最下面，就能看到这个报错提示，提示说 <code>9 duplicate symbols for architecture arm64</code> ，意思就是编译过程中发现有重复文件，<code>9</code> 并不就是说有 9 个重复文件，但具体什么意思我也不明白，反正就是有重复文件就是了。</p>
<p><img data-src="https://file.karise.cn/blog/20190509161553.png" alt="报错提示"></p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul>
<li><p>当项目比较大的时候，项目中类的文件会非常的多，要让你找出哪些文件重复，简直想死的心都有了，所以这里推荐一个能够帮你查找重复文件的软件 <code>Gemini 2</code> ，下载链接点击 <a href="https://pan.baidu.com/s/1bprgNDH">这里</a> ，密码 <code>5bq7</code> ，文件打开密码 <code>xclient.info</code> 。</p>
</li>
<li><p>可以直接选择你的项目文件夹，会自动帮你查找出重复的类文件，但要记得在 <code>偏好设置</code> 中将 <code>忽略列表</code> 中的忽略后缀名给去掉。</p>
</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509161608.png" alt="偏好设置"></p>
<ul>
<li>查找出重复的文件后，将它删除就能解决这个问题了，如果并没有重复文件，那就去搜索别的解决方案吧，<code>Linker command failed with exit code 1 (use -v to see invocation)</code> 这种报错的原因其实有很多。</li>
</ul>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>iOS 开发问题</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】将图片、声音等资源文件打包为 Bundle 的方法</title>
    <url>/2017/06/05/iOS/201706051823/</url>
    <content><![CDATA[<blockquote>
<p>最近在将项目部分代码打包成 <code>Framework</code> 的时候，需要将其中的图片等资源文件打包为 <code>Bundle</code> 来使用，所以简单的了解了一下，事实上 <code>Bundle</code> 就是一个普通得不能再普通的文件夹, 只是加上了 <code>.bundle</code> 后缀而已，下面分享一下打包及使用方法。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="1-创建-Bundle-文件"><a href="#1-创建-Bundle-文件" class="headerlink" title="1. 创建 Bundle 文件"></a>1. 创建 Bundle 文件</h2><p>创建 <code>Bundle</code> 文件有两种方法，是没有区别的，用哪种方法自己选择。</p>
<ul>
<li>一种是在项目中按下 <code>command + N</code> ，或者右键项目文件夹点击 <code>New File</code> ，选择 <code>iOS</code> - <code>Resource</code> - <code>Settings Bundle</code> 。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509161659.png" alt="创建 Bundle 文件"></p>
<ul>
<li>另一种是在项目根目录创建一个文件夹，然后重命名文件夹为 <code>xxx.bundle</code> ，然后将 <code>Bundle</code> 文件拖进项目中即可，加上 <code>.bundle</code> 后缀的文件夹会被 <code>Mac</code> 自动识别为一个 <code>Bundle</code> 包。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509161712.png" alt="创建 Bundle 文件"></p>
<h2 id="2-添加资源文件"><a href="#2-添加资源文件" class="headerlink" title="2. 添加资源文件"></a>2. 添加资源文件</h2><p>这个文件在运行的时候不会被编译到，所以此文件中存储的内容必须是资源文件（比如图片、声音），不能是编译的文件（比如能编译运行的代码）。</p>
<ul>
<li>自带的 <code>en.lproj</code> 和 <code>Root.plist</code> 用不到的可以删除掉，将需要加入 <code>Bundle</code> 的资源文件直接拖进项目中的 <code>.bundle</code> 下。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509161809.png" alt="添加资源文件"></p>
<ul>
<li>或者去根目录下，右键 <code>Bundle</code> 点击 <code>显示包内容</code> ，将资源文件直接放进去即可。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509161821.png" alt="添加资源文件"></p>
<h2 id="3-使用-Bundle-文件内资源"><a href="#3-使用-Bundle-文件内资源" class="headerlink" title="3. 使用 Bundle 文件内资源"></a>3. 使用 Bundle 文件内资源</h2><ul>
<li>以图片为例，先获取 <code>Bundle</code> 文件路径，然后使用图片路径来引用图片。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *path = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@&quot;xxx&quot;</span> ofType:<span class="string">@&quot;bundle&quot;</span>];</span><br><span class="line"><span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageWithContentsOfFile:[path stringByAppendingPathComponent:<span class="string">@&quot;xxx.png&quot;</span>]];</span><br></pre></td></tr></table></figure>

<ul>
<li>如果想要获取 <code>Bundle</code> 对象，就使用以下方法：</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSBundle</span> *bundle = [<span class="built_in">NSBundle</span> bundleWithPath:[[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@&quot;xxx&quot;</span> ofType:<span class="string">@&quot;bundle&quot;</span>]];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>方法就是这样，别的项目中要使用的话直接将 <code>Bundle</code> 文件拖进去即可使用，和普通的文件夹没有什么区别。</p>
</blockquote>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>Bundle</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】SDWebImage 请求网络图片时设置请求头 Header</title>
    <url>/2017/06/06/iOS/201706062134/</url>
    <content><![CDATA[<blockquote>
<p><code>SDWebImage</code> 可以用来显示网络图片，但是由于我们公司的后台设置了图片的访问限制，需要在请求图片的路径中添加自定义 <code>Header</code> 请求头，在简单的查询后发现 <code>SDWebImage </code> 已经提供了这个接口能够设置 <code>Header</code> 请求头，下面就分享一下怎么设置。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="设置方法"><a href="#设置方法" class="headerlink" title="设置方法"></a>设置方法</h2><ul>
<li>只需要在 <code>AppDelegate</code> 中设置一次即可，设置方法如下：</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">SDWebImageDownloader *downloader = [SDWebImageManager sharedManager].imageDownloader;</span><br><span class="line">[downloader setValue:<span class="string">@&quot;xxx&quot;</span> forHTTPHeaderField:<span class="string">@&quot;xxx&quot;</span>];</span><br><span class="line">[downloader setValue:<span class="string">@&quot;xxx&quot;</span> forHTTPHeaderField:<span class="string">@&quot;xxx&quot;</span>];</span><br><span class="line">[downloader setValue:<span class="string">@&quot;xxx&quot;</span> forHTTPHeaderField:<span class="string">@&quot;xxx&quot;</span>];</span><br></pre></td></tr></table></figure>

<ul>
<li>设置完之后就正常使用如下方法来请求网络图片，之后每次使用 <code>SDWebImage</code> 来请求网络图片时都会自动使用 <code>AppDelegate</code> 中设置的请求头。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIImageView</span> *imageView = [[<span class="built_in">UIImageView</span> alloc] init];</span><br><span class="line">[imageView sd_setImageWithURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@&quot;xxx&quot;</span>]];</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>SDWebImage</tag>
        <tag>网络图片</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】AFNetworking 网络请求失败后通过 NSError 判断失败原因</title>
    <url>/2017/06/06/iOS/201706061741/</url>
    <content><![CDATA[<blockquote>
<p>最近在修改一个网络请求的 <code>bug</code> 时，由于一直请求失败，所以在寻找具体失败原因的时候，了解了一下请求失败的错误返回 <code>NSError</code> ，发现原来可以通过 <code>NSError</code> 中的 <code>code</code> 属性来判断请求失败的具体原因，就在这里记录顺便分享一下。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="判断方法"><a href="#判断方法" class="headerlink" title="判断方法"></a>判断方法</h2><p>通过判断 <code>NSError</code> 中的 <code>code</code> 错误码属性，可以判断具体失败原因，下面以 <code>NSURLErrorTimedOut</code> 请求超时为例。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 开始请求 */</span></span><br><span class="line">[manager POST:url parameters:parameters progress:<span class="literal">nil</span> success:^(<span class="built_in">NSURLSessionDataTask</span> * _Nonnull task, <span class="keyword">id</span>  _Nullable responseObject) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;网络请求成功！&quot;</span>);</span><br><span class="line">&#125; failure:^(<span class="built_in">NSURLSessionDataTask</span> * _Nullable task, <span class="built_in">NSError</span> * _Nonnull error) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;网络请求失败！&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (error.code == <span class="built_in">NSURLErrorTimedOut</span>) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;网络请求超时！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h2 id="错误码"><a href="#错误码" class="headerlink" title="错误码"></a>错误码</h2><p>这里给出苹果提供的所有网络请求的错误码，可以根据不同错误码来给出不同的错误提示以及给出相应的操作，想具体了解每个错误码对应什么意思可以自行查询一下官方文档。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">    @enum NSURL-related Error Codes</span></span><br><span class="line"><span class="comment">    @abstract Constants used by NSError to indicate errors in the NSURL domain</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSURLErrorUnknown</span> = 			<span class="number">-1</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorCancelled</span> = 			<span class="number">-999</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorBadURL</span> = 				<span class="number">-1000</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorTimedOut</span> = 			<span class="number">-1001</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorUnsupportedURL</span> = 			<span class="number">-1002</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorCannotFindHost</span> = 			<span class="number">-1003</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorCannotConnectToHost</span> = 		<span class="number">-1004</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorNetworkConnectionLost</span> = 		<span class="number">-1005</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorDNSLookupFailed</span> = 		<span class="number">-1006</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorHTTPTooManyRedirects</span> = 		<span class="number">-1007</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorResourceUnavailable</span> = 		<span class="number">-1008</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorNotConnectedToInternet</span> = 		<span class="number">-1009</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorRedirectToNonExistentLocation</span> = 	<span class="number">-1010</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorBadServerResponse</span> = 		<span class="number">-1011</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorUserCancelledAuthentication</span> = 	<span class="number">-1012</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorUserAuthenticationRequired</span> = 	<span class="number">-1013</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorZeroByteResource</span> = 		<span class="number">-1014</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorCannotDecodeRawData</span> =             <span class="number">-1015</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorCannotDecodeContentData</span> =         <span class="number">-1016</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorCannotParseResponse</span> =             <span class="number">-1017</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorAppTransportSecurityRequiresSecureConnection</span> <span class="built_in">NS_ENUM_AVAILABLE</span>(<span class="number">10</span>_11, <span class="number">9</span>_0) = <span class="number">-1022</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorFileDoesNotExist</span> = 		<span class="number">-1100</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorFileIsDirectory</span> = 		<span class="number">-1101</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorNoPermissionsToReadFile</span> = 	<span class="number">-1102</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorDataLengthExceedsMaximum</span> <span class="built_in">NS_ENUM_AVAILABLE</span>(<span class="number">10</span>_5, <span class="number">2</span>_0) =	<span class="number">-1103</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorFileOutsideSafeArea</span> API_AVAILABLE(macosx(<span class="number">10.12</span><span class="number">.4</span>), ios(<span class="number">10.3</span>), watchos(<span class="number">3.2</span>), tvos(<span class="number">10.2</span>)) = <span class="number">-1104</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SSL errors</span></span><br><span class="line">    <span class="built_in">NSURLErrorSecureConnectionFailed</span> = 		<span class="number">-1200</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorServerCertificateHasBadDate</span> = 	<span class="number">-1201</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorServerCertificateUntrusted</span> = 	<span class="number">-1202</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorServerCertificateHasUnknownRoot</span> = <span class="number">-1203</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorServerCertificateNotYetValid</span> = 	<span class="number">-1204</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorClientCertificateRejected</span> = 	<span class="number">-1205</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorClientCertificateRequired</span> =	<span class="number">-1206</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorCannotLoadFromNetwork</span> = 		<span class="number">-2000</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Download and file I/O errors</span></span><br><span class="line">    <span class="built_in">NSURLErrorCannotCreateFile</span> = 		<span class="number">-3000</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorCannotOpenFile</span> = 			<span class="number">-3001</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorCannotCloseFile</span> = 		<span class="number">-3002</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorCannotWriteToFile</span> = 		<span class="number">-3003</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorCannotRemoveFile</span> = 		<span class="number">-3004</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorCannotMoveFile</span> = 			<span class="number">-3005</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorDownloadDecodingFailedMidStream</span> = <span class="number">-3006</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorDownloadDecodingFailedToComplete</span> =<span class="number">-3007</span>,</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSURLErrorInternationalRoamingOff</span> <span class="built_in">NS_ENUM_AVAILABLE</span>(<span class="number">10</span>_7, <span class="number">3</span>_0) =         <span class="number">-1018</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorCallIsActive</span> <span class="built_in">NS_ENUM_AVAILABLE</span>(<span class="number">10</span>_7, <span class="number">3</span>_0) =                    <span class="number">-1019</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorDataNotAllowed</span> <span class="built_in">NS_ENUM_AVAILABLE</span>(<span class="number">10</span>_7, <span class="number">3</span>_0) =                  <span class="number">-1020</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorRequestBodyStreamExhausted</span> <span class="built_in">NS_ENUM_AVAILABLE</span>(<span class="number">10</span>_7, <span class="number">3</span>_0) =      <span class="number">-1021</span>,</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSURLErrorBackgroundSessionRequiresSharedContainer</span> <span class="built_in">NS_ENUM_AVAILABLE</span>(<span class="number">10</span>_10, <span class="number">8</span>_0) = <span class="number">-995</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorBackgroundSessionInUseByAnotherProcess</span> <span class="built_in">NS_ENUM_AVAILABLE</span>(<span class="number">10</span>_10, <span class="number">8</span>_0) = <span class="number">-996</span>,</span><br><span class="line">    <span class="built_in">NSURLErrorBackgroundSessionWasDisconnected</span> <span class="built_in">NS_ENUM_AVAILABLE</span>(<span class="number">10</span>_10, <span class="number">8</span>_0)= <span class="number">-997</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其实 <code>NSError</code> 还有很多别的错误码，这里只给出网络请求相关的，其他的以后遇到了再记录下来吧。</p>
</blockquote>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>AFNetworking</tag>
        <tag>NSError</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】ReactiveObjC（RAC）的使用汇总</title>
    <url>/2017/06/16/iOS/201706161157/</url>
    <content><![CDATA[<blockquote>
<p><code>RAC</code> 指的就是 <code>RactiveCocoa</code> ，是 <code>Github</code> 的一个开源框架，能够帮我们提供大量方便的事件处理方案，让我们更简单粗暴地去处理事件，现在分为 <code>ReactiveObjC</code> 和 <code>ReactiveSwift</code> ，两个框架的功能使用相似，由于正好在学习这个然后公司项目是用 <code>OC</code> 写的，所以将 <code>ReactiveObjC</code> 的使用方法记录一下。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="ReactiveObjC-的使用"><a href="#ReactiveObjC-的使用" class="headerlink" title="ReactiveObjC 的使用"></a>ReactiveObjC 的使用</h2><p><code>RAC</code> 的核心思想：<code>创建信号</code> - <code>订阅信号</code> - <code>发送信号</code> ，并且在 <code>RAC</code> 中我们会看到大量的 <code>block</code> ，所以在使用之前可以再重新温习一下 <code>block</code> 的使用。</p>
<h3 id="1-RACSignal-信号"><a href="#1-RACSignal-信号" class="headerlink" title="1. RACSignal 信号"></a>1. RACSignal 信号</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 创建信号 */</span></span><br><span class="line">RACSignal *signal = [RACSignal createSignal:^RACDisposable * _Nullable(<span class="keyword">id</span>&lt;RACSubscriber&gt;  _Nonnull subscriber) &#123;</span><br><span class="line">    [subscriber sendNext:<span class="string">@&quot;发送信号&quot;</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 订阅信号 */</span></span><br><span class="line">RACDisposable *disposable = [signal subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;信号内容：%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 取消订阅 */</span></span><br><span class="line">[disposable dispose];</span><br></pre></td></tr></table></figure>

<h3 id="2-RACSubject-信号"><a href="#2-RACSubject-信号" class="headerlink" title="2. RACSubject 信号"></a>2. RACSubject 信号</h3><p>和代理的用法类似，通常用来代替代理，有了它，就不必要定义代理了。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 创建信号 */</span></span><br><span class="line">RACSubject *subject = [RACSubject subject];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 发送信号 */</span></span><br><span class="line">[subject sendNext:<span class="string">@&quot;发送信号&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 订阅信号（通常在别的视图控制器中订阅，与代理的用法类似） */</span></span><br><span class="line">[subject subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;信号内容：%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h3 id="3-RACTuple-元祖"><a href="#3-RACTuple-元祖" class="headerlink" title="3. RACTuple 元祖"></a>3. RACTuple 元祖</h3><p><code>RAC</code> 的元祖，跟我们 <code>OC</code> 的数组其实是一样的，它其实就是封装了我们 <code>OC</code> 的数组。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 创建元祖 */</span></span><br><span class="line">RACTuple *tuple = [RACTuple tupleWithObjects:<span class="string">@&quot;1&quot;</span>, <span class="string">@&quot;2&quot;</span>, <span class="string">@&quot;3&quot;</span>, <span class="string">@&quot;4&quot;</span>, <span class="string">@&quot;5&quot;</span>, <span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 从别的数组中获取内容 */</span></span><br><span class="line">RACTuple *tuple = [RACTuple tupleWithObjectsFromArray:@[<span class="string">@&quot;1&quot;</span>, <span class="string">@&quot;2&quot;</span>, <span class="string">@&quot;3&quot;</span>, <span class="string">@&quot;4&quot;</span>, <span class="string">@&quot;5&quot;</span>]];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 利用 RAC 宏快速封装 */</span></span><br><span class="line">RACTuple *tuple = RACTuplePack(<span class="string">@&quot;1&quot;</span>, <span class="string">@&quot;2&quot;</span>, <span class="string">@&quot;3&quot;</span>, <span class="string">@&quot;4&quot;</span>, <span class="string">@&quot;5&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;取元祖内容：%@&quot;</span>, tuple[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;第一个元素：%@&quot;</span>, [tuple first]);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;最后一个元素：%@&quot;</span>, [tuple last]);</span><br></pre></td></tr></table></figure>

<h3 id="4-便利-Array-数组和-Dictionary-字典"><a href="#4-便利-Array-数组和-Dictionary-字典" class="headerlink" title="4. 便利 Array 数组和 Dictionary 字典"></a>4. 便利 Array 数组和 Dictionary 字典</h3><p>可以省去使用 <code>for</code> 循环来遍历。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 遍历数组 */</span></span><br><span class="line"><span class="built_in">NSArray</span> *array = @[<span class="string">@&quot;1&quot;</span>, <span class="string">@&quot;2&quot;</span>, <span class="string">@&quot;3&quot;</span>, <span class="string">@&quot;4&quot;</span>, <span class="string">@&quot;5&quot;</span>];</span><br><span class="line">[array.rac_sequence.signal subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;数组内容：%@&quot;</span>, x); <span class="comment">// x 可以是任何对象</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 遍历字典 */</span></span><br><span class="line"><span class="built_in">NSDictionary</span> *dictionary = @&#123;<span class="string">@&quot;key1&quot;</span>:<span class="string">@&quot;value1&quot;</span>, <span class="string">@&quot;key2&quot;</span>:<span class="string">@&quot;value2&quot;</span>, <span class="string">@&quot;key3&quot;</span>:<span class="string">@&quot;value3&quot;</span>&#125;;</span><br><span class="line">[dictionary.rac_sequence.signal subscribeNext:^(RACTuple * _Nullable x) &#123;</span><br><span class="line">    RACTupleUnpack(<span class="built_in">NSString</span> *key, <span class="built_in">NSString</span> *value) = x; <span class="comment">// x 是一个元祖，这个宏能够将 key 和 value 拆开</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;字典内容：%@:%@&quot;</span>, key, value);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>下面两个方法都是将数组内容全部换为 <code>0</code> ，第一个是单个操作，，第二个是一次性全部替换，两个方法都不会改变原数组内容，操作完后都会生成一个新的数组，省去了创建可变数组然后遍历出来单个添加的步骤。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 内容操作 */</span></span><br><span class="line"><span class="built_in">NSArray</span> *array = @[<span class="string">@&quot;1&quot;</span>, <span class="string">@&quot;2&quot;</span>, <span class="string">@&quot;3&quot;</span>, <span class="string">@&quot;4&quot;</span>, <span class="string">@&quot;5&quot;</span>];</span><br><span class="line"><span class="built_in">NSArray</span> *newArray = [[array.rac_sequence map:^<span class="keyword">id</span> _Nullable(<span class="keyword">id</span>  _Nullable value) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;数组内容：%@&quot;</span>, value);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">@&quot;0&quot;</span>; <span class="comment">// 将所有内容替换为 0</span></span><br><span class="line">&#125;] array];</span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 内容快速替换 */</span></span><br><span class="line"><span class="built_in">NSArray</span> *array = @[<span class="string">@&quot;1&quot;</span>, <span class="string">@&quot;2&quot;</span>, <span class="string">@&quot;3&quot;</span>, <span class="string">@&quot;4&quot;</span>, <span class="string">@&quot;5&quot;</span>];</span><br><span class="line"><span class="built_in">NSArray</span> *newArray = [[array.rac_sequence mapReplace:<span class="string">@&quot;0&quot;</span>] array]; <span class="comment">// 将所有内容替换为 0</span></span><br></pre></td></tr></table></figure>

<h3 id="5-监听-TextField-的输入改变"><a href="#5-监听-TextField-的输入改变" class="headerlink" title="5. 监听 TextField 的输入改变"></a>5. 监听 TextField 的输入改变</h3><p>可以省去设置 <code>delegate</code> 和实现代理方法的步骤。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 监听 TextField 的输入（内容改变就会调用） */</span></span><br><span class="line">[[textField rac_textSignal] subscribeNext:^(<span class="built_in">NSString</span> * _Nullable x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;输入框内容：%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 添加监听条件 */</span></span><br><span class="line">[[textField.rac_textSignal filter:^<span class="built_in">BOOL</span>(<span class="built_in">NSString</span> * _Nullable value) &#123;</span><br><span class="line">    <span class="keyword">return</span> value.length &gt; <span class="number">5</span>; <span class="comment">// 表示输入文字长度 &gt; 5 时才会调用下面的 block</span></span><br><span class="line">&#125;] subscribeNext:^(<span class="built_in">NSString</span> * _Nullable x) &#123;</span><br><span class="line">     <span class="built_in">NSLog</span>(<span class="string">@&quot;输入框内容：%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h3 id="6-监听-Button-点击事件"><a href="#6-监听-Button-点击事件" class="headerlink" title="6. 监听 Button 点击事件"></a>6. 监听 Button 点击事件</h3><p>可以省去 <code>addTarget</code> 添加事件和创建方法的步骤。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[[button rac_signalForControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>] subscribeNext:^(__kindof <span class="built_in">UIControl</span> * _Nullable x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@ 按钮被点击了&quot;</span>, x); <span class="comment">// x 是 button 按钮对象</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h3 id="7-登录按钮状态实时监听"><a href="#7-登录按钮状态实时监听" class="headerlink" title="7. 登录按钮状态实时监听"></a>7. 登录按钮状态实时监听</h3><p>下面表示只有 <code>用户名</code> 和 <code>密码</code> 输入框内容都大于 <code>0</code> 时，<code>登录</code> 按钮才可以点击，而且状态是实时监听的，一句代码就能完成这个功能。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">RAC(_loginButton, enabled) = [RACSignal combineLatest:@[_username.rac_textSignal, _password.rac_textSignal] reduce:^<span class="keyword">id</span> _Nullable(<span class="built_in">NSString</span> * username, <span class="built_in">NSString</span> * password)&#123;</span><br><span class="line">    <span class="keyword">return</span> @(username.length &amp;&amp; password.length);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h3 id="8-监听-Notification-通知事件"><a href="#8-监听-Notification-通知事件" class="headerlink" title="8. 监听 Notification 通知事件"></a>8. 监听 Notification 通知事件</h3><p>可省去在 <code>-(void)dealloc &#123;&#125;</code> 中清除通知和监听通知创建方法的步骤。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[[[<span class="built_in">NSNotificationCenter</span> defaultCenter] rac_addObserverForName:<span class="built_in">UIKeyboardDidShowNotification</span> object:<span class="literal">nil</span>] subscribeNext:^(<span class="built_in">NSNotification</span> * _Nullable x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@ 键盘弹起&quot;</span>, x); <span class="comment">// x 是通知对象</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h3 id="9-代替-Delegate-代理方法"><a href="#9-代替-Delegate-代理方法" class="headerlink" title="9. 代替 Delegate 代理方法"></a>9. 代替 Delegate 代理方法</h3><p>可以省去监听以及设置 <code>delegate</code> 的步骤，下面表示只要 <code>view</code> 中执行了 <code>btnClick</code> 这个方法，就会发送信号执行这个回调。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[[view rac_signalForSelector:<span class="keyword">@selector</span>(btnClick)] subscribeNext:^(RACTuple * _Nullable x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot; view 中的按钮被点击了&quot;</span>);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h3 id="10-代替-KVO-监听"><a href="#10-代替-KVO-监听" class="headerlink" title="10. 代替 KVO 监听"></a>10. 代替 KVO 监听</h3><p>可以代替 <code>KVO</code> 监听，下面表示把监听 <code>view</code> 的 <code>frame</code> 属性改变转换成信号，只要值改变就会发送信号。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[[view rac_valuesForKeyPath:<span class="string">@&quot;frame&quot;</span> observer:<span class="keyword">self</span>] subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;属性的改变：%@&quot;</span>, x); <span class="comment">// x 是监听属性的改变结果</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>还有一种更简单的写法，就是利用 <code>RAC</code> 的宏，和上面的效果是一样的。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[RACObserve(view, frame) subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;属性的改变：%@&quot;</span>, x); <span class="comment">// x 是监听属性的改变结果</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h3 id="11-代替-NSTimer-计时器"><a href="#11-代替-NSTimer-计时器" class="headerlink" title="11. 代替 NSTimer 计时器"></a>11. 代替 NSTimer 计时器</h3><p>可以代替 <code>NSTimer</code> 使用。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) RACDisposable *disposable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义计时器监听 */</span></span><br><span class="line"><span class="keyword">self</span>.disposable = [[RACSignal interval:<span class="number">1.0</span> onScheduler:[RACScheduler mainThreadScheduler]] subscribeNext:^(<span class="built_in">NSDate</span> * _Nullable x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;当前时间：%@&quot;</span>, x); <span class="comment">// x 是当前的系统时间</span></span><br><span class="line">    [_disposable dispose]; <span class="comment">// 关闭计时器</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>RAC</tag>
        <tag>RactiveCocoa</tag>
        <tag>ReactiveObjC</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】多线程 GCD 的使用汇总</title>
    <url>/2017/06/09/iOS/201706091323/</url>
    <content><![CDATA[<blockquote>
<p>在日常的 <code>iOS</code> 开发中，关于多线程使用的较多的就是 <code>Grand Central Dispatch（GCD）</code> 了，<code>GCD</code> 会自动利用更多的 <code>CPU</code> 内核，会自动管理线程的生命周期，总之 <code>GCD</code> 的好处还是非常之多的，下面就对 <code>GCD</code> 的使用进行一个汇总。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="GCD-的创建"><a href="#GCD-的创建" class="headerlink" title="GCD 的创建"></a>GCD 的创建</h2><p><code>GCD</code> 中两个核心概念：<code>队列</code> 和 <code>任务</code> ，一般基本的用法只需要创建这两步即可。</p>
<h3 id="1-队列的创建"><a href="#1-队列的创建" class="headerlink" title="1. 队列的创建"></a>1. 队列的创建</h3><p>队列有两种方式：<code>串行队列</code> 和 <code>并发队列</code> 。</p>
<ul>
<li><code>串行队列（Serial Dispatch Queue）</code> ：让任务一个接着一个地执行，一个任务执行完毕后，再执行下一个任务。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="literal">NULL</span>, DISPATCH_QUEUE_SERIAL);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>并发队列（Concurrent Dispatch Queue）</code> ：可以让多个任务同时一起执行，但是并发队列只有在 <code>异步（dispatch_async）</code> 函数下才有效。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="literal">NULL</span>, DISPATCH_QUEUE_CONCURRENT);</span><br></pre></td></tr></table></figure>

<h3 id="2-任务的创建"><a href="#2-任务的创建" class="headerlink" title="2. 任务的创建"></a>2. 任务的创建</h3><p>执行任务也有两种方式：<code>同步执行</code> 和 <code>异步执行</code> 。</p>
<ul>
<li><code>同步执行（sync）</code> ：等待线程任务完成之后，才会进行接下来的操作。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dispatch_sync</span>(queue, ^ &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;同步执行的任务&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>异步执行（async）</code> ：线程任务单独执行，不会影响接下来的操作。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dispatch_async</span>(queue, ^ &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;异步执行的任务&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="GCD-的使用"><a href="#GCD-的使用" class="headerlink" title="GCD 的使用"></a>GCD 的使用</h2><p>在 <code>iOS</code> 开发过程中，我们一般在 <code>主线程</code> 里边进行 <code>UI</code> 刷新，例如：<code>点击、滚动、拖拽</code> 等事件，而耗时的操作则会放在 <code>子线程</code> 里边进行。而当我们有时候在 <code>子线程</code> 完成了耗时操作时，需要回到主线程，那么就用到了下面这个方法。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^ &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;回到主线程&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="1-串行队列-同步执行"><a href="#1-串行队列-同步执行" class="headerlink" title="1. 串行队列 + 同步执行"></a>1. 串行队列 + 同步执行</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;----------- 开始 -----------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="literal">NULL</span>, DISPATCH_QUEUE_SERIAL);</span><br><span class="line"><span class="built_in">dispatch_sync</span>(queue, ^ &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;任务 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^ &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;任务 1 回到主线程&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">dispatch_sync</span>(queue, ^ &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;任务 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^ &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;任务 2 回到主线程&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;----------- 结束 -----------&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>因为 <code>串行队列</code> 是按顺序执行任务，而 <code>同步任务</code> 又是等待线程任务完成之后，才会进行接下来的操作，所以基本和不使用多线程的效果是相同的，下面是打印结果：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">----------- 开始 -----------</span><br><span class="line">任务 <span class="number">1</span></span><br><span class="line">任务 <span class="number">1</span></span><br><span class="line">任务 <span class="number">1</span></span><br><span class="line">任务 <span class="number">2</span></span><br><span class="line">任务 <span class="number">2</span></span><br><span class="line">任务 <span class="number">2</span></span><br><span class="line">----------- 结束 -----------</span><br><span class="line">任务 <span class="number">1</span> 回到主线程</span><br><span class="line">任务 <span class="number">2</span> 回到主线程</span><br></pre></td></tr></table></figure>

<h3 id="2-串行队列-异步执行"><a href="#2-串行队列-异步执行" class="headerlink" title="2. 串行队列 + 异步执行"></a>2. 串行队列 + 异步执行</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;----------- 开始 -----------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="literal">NULL</span>, DISPATCH_QUEUE_SERIAL);</span><br><span class="line"><span class="built_in">dispatch_async</span>(queue, ^ &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;任务 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^ &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;任务 1 回到主线程&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">dispatch_async</span>(queue, ^ &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;任务 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^ &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;任务 2 回到主线程&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;----------- 结束 -----------&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>由于 <code>异步任务</code> 是单独执行，所以不会影响到正常代码的执行，所以明显就和上面有区别了，下面是打印结果：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">----------- 开始 -----------</span><br><span class="line">----------- 结束 -----------</span><br><span class="line">任务 <span class="number">1</span></span><br><span class="line">任务 <span class="number">1</span></span><br><span class="line">任务 <span class="number">1</span></span><br><span class="line">任务 <span class="number">2</span></span><br><span class="line">任务 <span class="number">2</span></span><br><span class="line">任务 <span class="number">2</span></span><br><span class="line">任务 <span class="number">1</span> 回到主线程</span><br><span class="line">任务 <span class="number">2</span> 回到主线程</span><br></pre></td></tr></table></figure>

<h3 id="3-并发队列-异步执行"><a href="#3-并发队列-异步执行" class="headerlink" title="3. 并发队列 + 异步执行"></a>3. 并发队列 + 异步执行</h3><p>由于 <code>并发队列</code> 在 <code>同步任务</code> 中是无效的，<code>并发队列 + 同步执行</code> 和 <code>串行队列 + 同步执行</code> 没有任何区别，所以跳过直接看 <code>并发队列 + 异步执行</code> 。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;----------- 开始 -----------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="literal">NULL</span>, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line"><span class="built_in">dispatch_async</span>(queue, ^ &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;任务 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^ &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;任务 1 回到主线程&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">dispatch_async</span>(queue, ^ &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;任务 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^ &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;任务 2 回到主线程&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;----------- 结束 -----------&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>由于 <code>并发队列</code> 是多个任务同时执行的，所以可以看到 <code>任务1</code> 和 <code>任务2</code> 基本是同时执行的，下面是打印结果：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">----------- 开始 -----------</span><br><span class="line">----------- 结束 -----------</span><br><span class="line">任务 <span class="number">1</span></span><br><span class="line">任务 <span class="number">2</span></span><br><span class="line">任务 <span class="number">1</span></span><br><span class="line">任务 <span class="number">2</span></span><br><span class="line">任务 <span class="number">1</span></span><br><span class="line">任务 <span class="number">2</span></span><br><span class="line">任务 <span class="number">1</span> 回到主线程</span><br><span class="line">任务 <span class="number">2</span> 回到主线程</span><br></pre></td></tr></table></figure>

<h3 id="4-notification-队列组（异步-并发）"><a href="#4-notification-队列组（异步-并发）" class="headerlink" title="4. notification 队列组（异步 + 并发）"></a>4. notification 队列组（异步 + 并发）</h3><p>上面 <code>并发队列 + 异步执行</code> 是各自任务完成后各自回到 <code>主线程</code> 。但是有时候我们会有这样的需求：分别异步执行两个耗时操作，然后当两个耗时操作都执行完毕后再回到 <code>主线程</code> 执行操作，这时候我们可以用到 <code>GCD</code> 的 <code>notification</code> 队列组。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;----------- 开始 -----------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">dispatch_group_t group = dispatch_group_create();</span><br><span class="line">dispatch_group_async(group, queue, ^ &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;任务 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_group_async(group, queue, ^ &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;任务 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在组内的任务都运行完了之后再回到主线程 */</span></span><br><span class="line">dispatch_group_notify(group, dispatch_get_main_queue(), ^ &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;回到主线程&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;----------- 结束 -----------&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>notification</code> 队列组会等到两个任务都执行完才会回到主线程，下面是打印结果：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">----------- 开始 -----------</span><br><span class="line">----------- 结束 -----------</span><br><span class="line">任务 <span class="number">1</span></span><br><span class="line">任务 <span class="number">2</span></span><br><span class="line">任务 <span class="number">1</span></span><br><span class="line">任务 <span class="number">2</span></span><br><span class="line">任务 <span class="number">1</span></span><br><span class="line">任务 <span class="number">2</span></span><br><span class="line">回到主线程</span><br></pre></td></tr></table></figure>

<h3 id="5-wait-队列组（同步-并发）"><a href="#5-wait-队列组（同步-并发）" class="headerlink" title="5. wait 队列组（同步 + 并发）"></a>5. wait 队列组（同步 + 并发）</h3><p>上面说过 <code>并发队列</code> 在 <code>同步任务</code> 中时无效的，但是 <code>wait</code> 队列组就能实现这个 <code>同步 + 并发</code> 效果。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;----------- 开始 -----------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">dispatch_group_t group = dispatch_group_create();</span><br><span class="line">dispatch_group_async(group, queue, ^ &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;任务 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_group_async(group, queue, ^ &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;任务 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 等待组内的任务都完成后，继续运行 */</span></span><br><span class="line">dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 回到主线程 */</span></span><br><span class="line"><span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^ &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;回到主线程&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;----------- 结束 -----------&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>可以看到任务是并发执行的，并且 <code>结束</code> 的打印在任务完成之后，下面是打印结果：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">----------- 开始 -----------</span><br><span class="line">任务 <span class="number">2</span></span><br><span class="line">任务 <span class="number">1</span></span><br><span class="line">任务 <span class="number">2</span></span><br><span class="line">任务 <span class="number">1</span></span><br><span class="line">任务 <span class="number">2</span></span><br><span class="line">任务 <span class="number">1</span></span><br><span class="line">----------- 结束 -----------</span><br><span class="line">回到主线程</span><br></pre></td></tr></table></figure>

<h3 id="6-延时执行的代码"><a href="#6-延时执行的代码" class="headerlink" title="6. 延时执行的代码"></a>6. 延时执行的代码</h3><p>当我们需要延迟执行一段代码时，就可以用到 <code>GCD</code> 的 <code>dispatch_after</code> 方法。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;----------- 开始 -----------&quot;</span>);</span><br><span class="line"></span><br><span class="line">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">3</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^ &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;延迟 3 秒后执行的代码&quot;</span>); <span class="comment">// 更改秒数只要更改上面的数字 3 即可</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;----------- 结束 -----------&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这个方法是异步执行的，所以不会卡住界面，从时间可以看出延迟了 <code>3</code> 秒后才打印的，下面是打印结果：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">12</span>:<span class="number">28</span>:<span class="number">44.307</span> ----------- 开始 -----------</span><br><span class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">12</span>:<span class="number">28</span>:<span class="number">44.307</span> ----------- 结束 -----------</span><br><span class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">12</span>:<span class="number">28</span>:<span class="number">47.560</span> 延迟 <span class="number">3</span> 秒后执行的代码</span><br></pre></td></tr></table></figure>

<h3 id="7-只执行一次的代码"><a href="#7-只执行一次的代码" class="headerlink" title="7. 只执行一次的代码"></a>7. 只执行一次的代码</h3><p>使用下面方法执行的代码，在整个程序运行过程中，只会被执行一次，执行过一次以后就再也不会被执行，使用的是 <code>GCD</code> 的 <code>dispatch_once</code> 方法。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line"><span class="built_in">dispatch_once</span>(&amp;onceToken, ^ &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;只执行一次的代码&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="8-同时执行多次的代码"><a href="#8-同时执行多次的代码" class="headerlink" title="8. 同时执行多次的代码"></a>8. 同时执行多次的代码</h3><p>通常我们会用 <code>for</code> 循环来使代码执行多次，但是 <code>GCD</code> 给我们提供了快速迭代的方法 <code>dispatch_apply</code> ，使我们可以将代码执行多次。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;----------- 开始 -----------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line">dispatch_apply(<span class="number">5</span>, queue, ^(size_t index) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;同时执行多次的代码 %zd&quot;</span>,index); <span class="comment">// 更改上面的数字 5 即可更改执行次数</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;----------- 结束 -----------&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>dispatch_apply</code> 和 <code>for</code> 循环是有区别的，<code>for</code> 循环是按顺序依次执行多次，而 <code>dispatch_apply</code> 是同时执行多次，可以看到下面的 <code>5</code> 次几乎是同一时间执行的，下面是打印结果：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">----------- 开始 -----------</span><br><span class="line">同时执行多次的代码 <span class="number">0</span></span><br><span class="line">同时执行多次的代码 <span class="number">2</span></span><br><span class="line">同时执行多次的代码 <span class="number">3</span></span><br><span class="line">同时执行多次的代码 <span class="number">1</span></span><br><span class="line">同时执行多次的代码 <span class="number">4</span></span><br><span class="line">----------- 结束 -----------</span><br></pre></td></tr></table></figure>

<h3 id="9-定时器"><a href="#9-定时器" class="headerlink" title="9. 定时器"></a>9. 定时器</h3><p>一般情况下，都是使用 <code>NSTimer</code> 来实现定时器，但是 <code>GCD</code> 其实也是可以实现定时器功能的，并且 <code>GCD</code> 定时器不受 <code>RunLoop</code> 约束，比 <code>NSTimer</code> 更加准时。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) dispatch_source_t timer; <span class="comment">// 定时器对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;----------- 开始 -----------&quot;</span>);</span><br><span class="line"></span><br><span class="line">__block <span class="built_in">NSInteger</span> time = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获得队列 */</span></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建定时器（dispatch_source_t 本质还是一个 OC 对象） */</span></span><br><span class="line"><span class="keyword">self</span>.timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, <span class="number">0</span>, <span class="number">0</span>, queue);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置定时器属性 */</span></span><br><span class="line">dispatch_time_t start = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1.0</span> * <span class="built_in">NSEC_PER_SEC</span>)); <span class="comment">// 1 秒后开始执行</span></span><br><span class="line">uint64_t interval = (uint64_t)(<span class="number">1.0</span> * <span class="built_in">NSEC_PER_SEC</span>); <span class="comment">// 每隔 1 秒执行一次</span></span><br><span class="line">dispatch_source_set_timer(<span class="keyword">self</span>.timer, start, interval, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 回调 */</span></span><br><span class="line">dispatch_source_set_event_handler(<span class="keyword">self</span>.timer, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;计时 %ld 秒&quot;</span>, ++time);</span><br><span class="line">    <span class="keyword">if</span> (time == <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="comment">/* 取消定时器 */</span></span><br><span class="line">        dispatch_cancel(<span class="keyword">self</span>.timer);</span><br><span class="line">        <span class="keyword">self</span>.timer = <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 启动定时器 */</span></span><br><span class="line">dispatch_resume(<span class="keyword">self</span>.timer);</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;----------- 结束 -----------&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>下面是打印结果：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">14</span>:<span class="number">55</span>:<span class="number">37.894</span> ----------- 开始 -----------</span><br><span class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">14</span>:<span class="number">55</span>:<span class="number">37.894</span> ----------- 结束 -----------</span><br><span class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">14</span>:<span class="number">55</span>:<span class="number">38.896</span> 计时 <span class="number">1</span> 秒</span><br><span class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">14</span>:<span class="number">55</span>:<span class="number">39.895</span> 计时 <span class="number">2</span> 秒</span><br><span class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">14</span>:<span class="number">55</span>:<span class="number">40.895</span> 计时 <span class="number">3</span> 秒</span><br><span class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">14</span>:<span class="number">55</span>:<span class="number">41.895</span> 计时 <span class="number">4</span> 秒</span><br><span class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">14</span>:<span class="number">55</span>:<span class="number">42.895</span> 计时 <span class="number">5</span> 秒</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>GCD</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】UICollectionView 集合视图使用汇总</title>
    <url>/2017/06/30/iOS/201706301801/</url>
    <content><![CDATA[<blockquote>
<p><code>UICollectionView</code> 和 <code>UITableView</code> 的用法非常的相似，但它要更加强大，下面就对于 <code>UICollectionView</code> 的基本用法进行一个汇总，以便之后方便查看。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="UICollectionView-的创建"><a href="#UICollectionView-的创建" class="headerlink" title="UICollectionView 的创建"></a>UICollectionView 的创建</h2><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 设置单元格布局 */</span></span><br><span class="line"><span class="built_in">UICollectionViewFlowLayout</span> *flow = [[<span class="built_in">UICollectionViewFlowLayout</span> alloc] init];</span><br><span class="line">flow.itemSize = <span class="built_in">CGSizeMake</span>(<span class="number">150</span>, <span class="number">120</span>); <span class="comment">// 单元格的尺寸</span></span><br><span class="line">flow.minimumLineSpacing = <span class="number">10.0</span>; <span class="comment">// 行之间间距</span></span><br><span class="line">flow.minimumInteritemSpacing = <span class="number">10.0</span>; <span class="comment">// 列之间的间距</span></span><br><span class="line">flow.headerReferenceSize = <span class="built_in">CGSizeMake</span>(<span class="number">100</span>, <span class="number">75</span>); <span class="comment">// 段头尺寸</span></span><br><span class="line">flow.footerReferenceSize = <span class="built_in">CGSizeMake</span>(<span class="number">100</span>, <span class="number">75</span>); <span class="comment">// 段尾尺寸</span></span><br><span class="line">flow.scrollDirection = <span class="built_in">UICollectionViewScrollDirectionVertical</span>; <span class="comment">// 滑动方向</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建集合视图 */</span></span><br><span class="line"><span class="built_in">UICollectionView</span> *collectionView = [[<span class="built_in">UICollectionView</span> alloc] initWithFrame:<span class="keyword">self</span>.view.bounds collectionViewLayout:flow];</span><br><span class="line">collectionView.delegate = <span class="keyword">self</span>; <span class="comment">// 代理</span></span><br><span class="line">collectionView.dataSource = <span class="keyword">self</span>; <span class="comment">// 数据源</span></span><br><span class="line">collectionView.backgroundColor = [<span class="built_in">UIColor</span> whiteColor]; <span class="comment">// 背景色</span></span><br><span class="line">collectionView.delaysContentTouches = <span class="literal">NO</span>; <span class="comment">// 默认为 YES ，设为 NO 可以解决点击单元格后高亮效果显示延迟的问题</span></span><br><span class="line">[<span class="keyword">self</span>.view addSubview:collectionView];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注册自定义单元格 */</span></span><br><span class="line">[collectionView registerClass:[CollectionViewCell <span class="keyword">class</span>] forCellWithReuseIdentifier:<span class="string">@&quot;Cell&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注册自定义段头 */</span></span><br><span class="line">[collectionView registerClass:[SectionHeader <span class="keyword">class</span>] forSupplementaryViewOfKind:<span class="built_in">UICollectionElementKindSectionHeader</span> withReuseIdentifier:<span class="string">@&quot;Header&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注册自定义段尾 */</span></span><br><span class="line">[collectionView registerClass:[SectionFooter <span class="keyword">class</span>] forSupplementaryViewOfKind:<span class="built_in">UICollectionElementKindSectionFooter</span> withReuseIdentifier:<span class="string">@&quot;Footer&quot;</span>];</span><br></pre></td></tr></table></figure>

<p>使用纯代码自定义 <code>UICollectionViewCell</code> 单元格或者 <code>UICollectionReusableView</code> 段头段尾视图时，只需要重写 <code>- (instancetype)initWithFrame:(CGRect)frame</code> 方法即可。</p>
<h2 id="UICollectionViewDataSource-数据源"><a href="#UICollectionViewDataSource-数据源" class="headerlink" title="UICollectionViewDataSource 数据源"></a>UICollectionViewDataSource 数据源</h2><h3 id="1-设置集合视图的段数"><a href="#1-设置集合视图的段数" class="headerlink" title="1. 设置集合视图的段数"></a>1. 设置集合视图的段数</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 设置集合视图的段数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param collectionView 集合视图对象</span></span><br><span class="line"><span class="comment"> @return 段数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSInteger</span>)numberOfSectionsInCollectionView:(<span class="built_in">UICollectionView</span> *)collectionView &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-设置集合视图单元格数量"><a href="#2-设置集合视图单元格数量" class="headerlink" title="2. 设置集合视图单元格数量"></a>2. 设置集合视图单元格数量</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 设置集合视图单元格数量</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param collectionView 集合视图对象</span></span><br><span class="line"><span class="comment"> @param section 哪一段</span></span><br><span class="line"><span class="comment"> @return 单元格数量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSInteger</span>)collectionView:(<span class="built_in">UICollectionView</span> *)collectionView numberOfItemsInSection:(<span class="built_in">NSInteger</span>)section &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">12</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-设置集合视图内容"><a href="#3-设置集合视图内容" class="headerlink" title="3. 设置集合视图内容"></a>3. 设置集合视图内容</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 设置集合视图内容</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param collectionView 集合视图对象</span></span><br><span class="line"><span class="comment"> @param indexPath 位置</span></span><br><span class="line"><span class="comment"> @return 单元格对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">UICollectionViewCell</span> *)collectionView:(<span class="built_in">UICollectionView</span> *)collectionView cellForItemAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</span><br><span class="line">    CollectionViewCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:<span class="string">@&quot;Cell&quot;</span> forIndexPath:indexPath]; <span class="comment">// 查找可复用的单元格，自定义需要注册</span></span><br><span class="line">    <span class="keyword">return</span> cell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-设置段头-段尾内容"><a href="#4-设置段头-段尾内容" class="headerlink" title="4. 设置段头/段尾内容"></a>4. 设置段头/段尾内容</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 设置段头/段尾内容</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param collectionView 集合视图对象</span></span><br><span class="line"><span class="comment"> @param kind 类型</span></span><br><span class="line"><span class="comment"> @param indexPath 位置</span></span><br><span class="line"><span class="comment"> @return 段头/段尾视图</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">UICollectionReusableView</span> *)collectionView:(<span class="built_in">UICollectionView</span> *)collectionView viewForSupplementaryElementOfKind:(<span class="built_in">NSString</span> *)kind atIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</span><br><span class="line">    <span class="keyword">if</span>([kind isEqualToString:<span class="built_in">UICollectionElementKindSectionHeader</span>]) &#123;</span><br><span class="line">        SectionHeader *header = [collectionView dequeueReusableSupplementaryViewOfKind:kind withReuseIdentifier:<span class="string">@&quot;Header&quot;</span> forIndexPath:indexPath]; <span class="comment">// 查找可复用的段头视图，自定义需要注册</span></span><br><span class="line">        <span class="keyword">return</span> header;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ([kind isEqualToString:<span class="built_in">UICollectionElementKindSectionFooter</span>]) &#123;</span><br><span class="line">        SectionFooter *footer = [collectionView dequeueReusableSupplementaryViewOfKind:kind withReuseIdentifier:<span class="string">@&quot;Footer&quot;</span> forIndexPath:indexPath]; <span class="comment">// 查找可复用的段尾视图，自定义需要注册</span></span><br><span class="line">        <span class="keyword">return</span> footer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="UICollectionViewDelegate-代理方法"><a href="#UICollectionViewDelegate-代理方法" class="headerlink" title="UICollectionViewDelegate 代理方法"></a>UICollectionViewDelegate 代理方法</h2><h3 id="1-设置单元格是否允许高亮"><a href="#1-设置单元格是否允许高亮" class="headerlink" title="1. 设置单元格是否允许高亮"></a>1. 设置单元格是否允许高亮</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 设置单元格是否允许高亮</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param collectionView 单元格对象</span></span><br><span class="line"><span class="comment"> @param indexPath 位置</span></span><br><span class="line"><span class="comment"> @return 是否允许</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)collectionView:(<span class="built_in">UICollectionView</span> *)collectionView shouldHighlightItemAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-单元格处于高亮状态时触发"><a href="#2-单元格处于高亮状态时触发" class="headerlink" title="2. 单元格处于高亮状态时触发"></a>2. 单元格处于高亮状态时触发</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 单元格处于高亮状态时触发</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param collectionView 单元格对象</span></span><br><span class="line"><span class="comment"> @param indexPath 位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)collectionView:(<span class="built_in">UICollectionView</span> *)collectionView didHighlightItemAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</span><br><span class="line">    CollectionViewCell *cell = (CollectionViewCell *)[collectionView cellForItemAtIndexPath:indexPath]; <span class="comment">// 得到当前选中单元格对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-单元格取消高亮状态时触发"><a href="#3-单元格取消高亮状态时触发" class="headerlink" title="3. 单元格取消高亮状态时触发"></a>3. 单元格取消高亮状态时触发</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 单元格取消高亮状态时触发</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param collectionView 单元格对象</span></span><br><span class="line"><span class="comment"> @param indexPath 位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)collectionView:(<span class="built_in">UICollectionView</span> *)collectionView didUnhighlightItemAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</span><br><span class="line">    CollectionViewCell *cell = (CollectionViewCell *)[collectionView cellForItemAtIndexPath:indexPath]; <span class="comment">// 得到当前选中单元格对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-设置单元格是否允许点击"><a href="#4-设置单元格是否允许点击" class="headerlink" title="4. 设置单元格是否允许点击"></a>4. 设置单元格是否允许点击</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 设置单元格是否允许点击</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param collectionView 单元格对象</span></span><br><span class="line"><span class="comment"> @param indexPath 位置</span></span><br><span class="line"><span class="comment"> @return 是否允许</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)collectionView:(<span class="built_in">UICollectionView</span> *)collectionView shouldSelectItemAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-设置单元格是否允许取消点击"><a href="#5-设置单元格是否允许取消点击" class="headerlink" title="5. 设置单元格是否允许取消点击"></a>5. 设置单元格是否允许取消点击</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 设置单元格是否允许取消点击</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param collectionView 单元格对象</span></span><br><span class="line"><span class="comment"> @param indexPath 位置</span></span><br><span class="line"><span class="comment"> @return 是否允许</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)collectionView:(<span class="built_in">UICollectionView</span> *)collectionView shouldDeselectItemAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-点击单元格触发"><a href="#6-点击单元格触发" class="headerlink" title="6. 点击单元格触发"></a>6. 点击单元格触发</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 点击单元格触发</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param collectionView 单元格对象</span></span><br><span class="line"><span class="comment"> @param indexPath 位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)collectionView:(<span class="built_in">UICollectionView</span> *)collectionView didSelectItemAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</span><br><span class="line">    [collectionView deselectItemAtIndexPath:indexPath animated:<span class="literal">YES</span>]; <span class="comment">// 取消单元格当前选中状态</span></span><br><span class="line">    CollectionViewCell *cell = (CollectionViewCell *)[collectionView cellForItemAtIndexPath:indexPath]; <span class="comment">// 得到当前选中单元格对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-设置上下左右间隔"><a href="#7-设置上下左右间隔" class="headerlink" title="7. 设置上下左右间隔"></a>7. 设置上下左右间隔</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 设置上下左右间隔</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param collectionView 集合视图对象</span></span><br><span class="line"><span class="comment"> @param collectionViewLayout 单元格布局</span></span><br><span class="line"><span class="comment"> @param section 哪一段</span></span><br><span class="line"><span class="comment"> @return 间隔</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">UIEdgeInsets</span>)collectionView:(<span class="built_in">UICollectionView</span> *)collectionView layout:(<span class="built_in">UICollectionViewLayout</span> *)collectionViewLayout insetForSectionAtIndex:(<span class="built_in">NSInteger</span>)section &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">UIEdgeInsetsMake</span>(<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>); <span class="comment">// 分别为上、左、下、右</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>UICollectionView</tag>
        <tag>集合视图</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】修改 Navigation 导航栏的页面切换动画</title>
    <url>/2017/05/31/iOS/201705311721/</url>
    <content><![CDATA[<blockquote>
<p>下面的方法能够修改 <code>iOS</code> 自带的 <code>UINavigationController</code> 的页面切换动画。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="修改方法"><a href="#修改方法" class="headerlink" title="修改方法"></a>修改方法</h2><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 创建转场动画 */</span></span><br><span class="line"><span class="built_in">CATransition</span> *transition = [<span class="built_in">CATransition</span> animation];</span><br><span class="line">transition.duration = <span class="number">1.0</span>; <span class="comment">// 动画时间</span></span><br><span class="line">transition.type = kCATransitionPush; <span class="comment">// 动画样式</span></span><br><span class="line">transition.subtype = kCATransitionFromBottom; <span class="comment">// 动画方向</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 页面切换 */</span></span><br><span class="line">ViewController *vc = [[ViewController alloc] init];</span><br><span class="line">[<span class="keyword">self</span>.navigationController.view.layer addAnimation:transition forKey:kCATransition];</span><br><span class="line">[<span class="keyword">self</span>.navigationController pushViewController:vc animated:<span class="literal">NO</span>]; <span class="comment">// 注意这里 animated 必须设置为 NO</span></span><br></pre></td></tr></table></figure>

<p>下图为各个动画的切换效果，也就是上面的 <code>transition.type</code> 这个属性。</p>
<p><img data-src="https://file.karise.cn/blog/20190509161623.png" alt="动画样式"></p>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>导航栏</tag>
        <tag>UINavigationController</tag>
        <tag>转场动画</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】解决 Xcode 输出台打印 NSArray 数组和 NSDictionary 字典中文乱码的问题</title>
    <url>/2017/07/05/iOS/201707051210/</url>
    <content><![CDATA[<blockquote>
<p>最近在调试的时候发现 <code>Xcode</code> 直接打印 <code>NSArray</code> 数组和 <code>NSDictionary</code> 字典的时候，如果其中有中文，打印出来就变成乱码了，调试起来很不舒服，下面就分享一下解决办法。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>其实很简单，只要为 <code>NSArray</code> 数组和 <code>NSDictionary</code> 字典各创建一个分类即可，并且只需要创建，无需引用或者调用。</p>
<h3 id="1-NSArray-数组"><a href="#1-NSArray-数组" class="headerlink" title="1. NSArray 数组"></a>1. NSArray 数组</h3><h4 id="数组打印结果对比"><a href="#数组打印结果对比" class="headerlink" title="数组打印结果对比"></a>数组打印结果对比</h4><ul>
<li>打印以下数组内容：</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *array = @[<span class="string">@&quot;张三&quot;</span>, <span class="string">@&quot;李四&quot;</span>, <span class="string">@&quot;王五&quot;</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, array);</span><br></pre></td></tr></table></figure>

<ul>
<li>未创建分类之前的数组打印结果：</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="number">2017</span><span class="number">-07</span><span class="number">-05</span> <span class="number">11</span>:<span class="number">38</span>:<span class="number">30.058</span> Test[<span class="number">8402</span>:<span class="number">224709</span>] (</span><br><span class="line">    <span class="string">&quot;\U5f20\U4e09&quot;</span>,</span><br><span class="line">    <span class="string">&quot;\U674e\U56db&quot;</span>,</span><br><span class="line">    <span class="string">&quot;\U738b\U4e94&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>创建分类后的数组打印结果：</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="number">2017</span><span class="number">-07</span><span class="number">-05</span> <span class="number">11</span>:<span class="number">44</span>:<span class="number">23.009</span> test[<span class="number">8528</span>:<span class="number">231831</span>] (</span><br><span class="line">	张三,</span><br><span class="line">	李四,</span><br><span class="line">	王五</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="数组分类创建内容"><a href="#数组分类创建内容" class="headerlink" title="数组分类创建内容"></a>数组分类创建内容</h4><h5 id="NSArray-Log-h"><a href="#NSArray-Log-h" class="headerlink" title="NSArray+Log.h"></a>NSArray+Log.h</h5><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSArray</span> (<span class="title">Log</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<h5 id="NSArray-Log-m"><a href="#NSArray-Log-m" class="headerlink" title="NSArray+Log.m"></a>NSArray+Log.m</h5><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&quot;NSArray+Log.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSArray</span> (<span class="title">Log</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 解决数组输出中文乱码的问题</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return 输出结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)descriptionWithLocale:(<span class="keyword">id</span>)locale &#123;</span><br><span class="line">    <span class="built_in">NSMutableString</span> *string = [<span class="built_in">NSMutableString</span> stringWithString:<span class="string">@&quot;(\n&quot;</span>];</span><br><span class="line">    [<span class="keyword">self</span> enumerateObjectsUsingBlock:^(<span class="keyword">id</span> obj, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> *stop) &#123;</span><br><span class="line">        [string appendFormat:<span class="string">@&quot;\t%@,\n&quot;</span>, obj];</span><br><span class="line">    &#125;];</span><br><span class="line">    <span class="keyword">if</span> ([string hasSuffix:<span class="string">@&quot;,\n&quot;</span>]) &#123;</span><br><span class="line">        [string deleteCharactersInRange:<span class="built_in">NSMakeRange</span>(string.length - <span class="number">2</span>, <span class="number">1</span>)]; <span class="comment">// 删除最后一个逗号</span></span><br><span class="line">    &#125;</span><br><span class="line">    [string appendString:<span class="string">@&quot;)\n&quot;</span>];</span><br><span class="line">    <span class="keyword">return</span> string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<h3 id="2-NSDictionary-字典"><a href="#2-NSDictionary-字典" class="headerlink" title="2. NSDictionary 字典"></a>2. NSDictionary 字典</h3><h4 id="字典打印结果对比"><a href="#字典打印结果对比" class="headerlink" title="字典打印结果对比"></a>字典打印结果对比</h4><ul>
<li>打印以下字典内容：</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSDictionary</span> *dictionary = @&#123;<span class="string">@&quot;姓名1&quot;</span> : <span class="string">@&quot;张三&quot;</span>,</span><br><span class="line">                             <span class="string">@&quot;姓名2&quot;</span> : <span class="string">@&quot;李四&quot;</span>,</span><br><span class="line">                             <span class="string">@&quot;姓名3&quot;</span> : <span class="string">@&quot;王五&quot;</span>&#125;;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, dictionary);</span><br></pre></td></tr></table></figure>

<ul>
<li>未创建分类之前的字典打印结果：</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="number">2017</span><span class="number">-07</span><span class="number">-05</span> <span class="number">11</span>:<span class="number">38</span>:<span class="number">30.059</span> test[<span class="number">8402</span>:<span class="number">224709</span>] &#123;</span><br><span class="line">    <span class="string">&quot;\U59d3\U540d1&quot;</span> = <span class="string">&quot;\U5f20\U4e09&quot;</span>;</span><br><span class="line">    <span class="string">&quot;\U59d3\U540d2&quot;</span> = <span class="string">&quot;\U674e\U56db&quot;</span>;</span><br><span class="line">    <span class="string">&quot;\U59d3\U540d3&quot;</span> = <span class="string">&quot;\U738b\U4e94&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建分类后的字典打印结果：</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="number">2017</span><span class="number">-07</span><span class="number">-05</span> <span class="number">11</span>:<span class="number">44</span>:<span class="number">23.009</span> test[<span class="number">8528</span>:<span class="number">231831</span>] &#123;</span><br><span class="line">	姓名<span class="number">1</span> = 张三;</span><br><span class="line">	姓名<span class="number">2</span> = 李四;</span><br><span class="line">	姓名<span class="number">3</span> = 王五;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="字典分类创建内容"><a href="#字典分类创建内容" class="headerlink" title="字典分类创建内容"></a>字典分类创建内容</h4><h5 id="NSDictionary-Log-h"><a href="#NSDictionary-Log-h" class="headerlink" title="NSDictionary+Log.h"></a>NSDictionary+Log.h</h5><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSDictionary</span> (<span class="title">Log</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<h5 id="NSDictionary-Log-m"><a href="#NSDictionary-Log-m" class="headerlink" title="NSDictionary+Log.m"></a>NSDictionary+Log.m</h5><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&quot;NSDictionary+Log.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSDictionary</span> (<span class="title">Log</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 解决字典输出中文乱码的问题</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return 输出结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)descriptionWithLocale:(<span class="keyword">id</span>)locale &#123;</span><br><span class="line">    <span class="built_in">NSMutableString</span> *string = [<span class="built_in">NSMutableString</span> stringWithString:<span class="string">@&quot;&#123;\n&quot;</span>];</span><br><span class="line">    [<span class="keyword">self</span> enumerateKeysAndObjectsUsingBlock:^(<span class="keyword">id</span> key, <span class="keyword">id</span> obj, <span class="built_in">BOOL</span> *stop) &#123;</span><br><span class="line">        [string appendFormat:<span class="string">@&quot;\t%@ = %@;\n&quot;</span>, key, obj];</span><br><span class="line">    &#125;];</span><br><span class="line">    [string appendString:<span class="string">@&quot;&#125;\n&quot;</span>];</span><br><span class="line">    <span class="keyword">return</span> string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>iOS 开发问题</tag>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】Swift 把 Struct 作为数据模型的注意事项</title>
    <url>/2017/07/17/iOS/201707171542/</url>
    <content><![CDATA[<blockquote>
<p>本文为转载，附上 <a href="https://segmentfault.com/a/1190000006048015#articleHeader0">原文链接</a>。</p>
</blockquote>
<blockquote>
<p>很高兴见到 <code>Objective-C</code> 的老司机对于 <code>Swift</code> 的新鲜语法结构和新思维方式感到如此兴奋。作为开发者，我们应该永远努力拓展我们的技能，并在新的范式出现的时候乐于改变我们的心态。</p>
</blockquote>
<blockquote>
<p>一个类似的例子就是处理数据结构的时候，拥抱不可变性，尽量使用常量，这是一个很好的建议而且完全应该被采用。另一个例子是把我们的数据模型转换为 <code>Struct（结构体）</code>。这是听起来很美好，但在实际运用中，彻底地使用 <code>Struct</code> 来代替 <code>Class（类）</code>，还是给开发者带来很多困难。</p>
</blockquote>
<blockquote>
<p>不要误会我的意思，用 <code>Struct</code> 作为数据模型确实带来了非常大的好处。 只是这并不是完美的办法。在这篇文章中，我会详细说明一下当你把数据模型从 <code>Class</code> 转换成 <code>Struct</code> 时会遇到的麻烦。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="Struct-的缺点"><a href="#Struct-的缺点" class="headerlink" title="Struct 的缺点"></a>Struct 的缺点</h2><ul>
<li><p><strong>Objective-C：</strong> <code>Struct</code> 不是 <code>Objective-C</code> 的好朋友。</p>
<p>当你的项目的代码是 <code>Swift</code> 和 <code>Objective-C</code> 混合开发时，你会发现在 <code>Objective-C</code> 的代码里无法调用 <code>Swift</code> 的 <code>Struct</code>。因为要在 <code>Objective-C</code> 里调用 <code>Swift</code> 代码的话，对象需要继承于 <code>NSObject</code>。</p>
</li>
<li><p><strong>继承：</strong> <code>Struct</code> 不能相互继承。</p>
<p>继承是面向对象编程的四大支柱之一，这深深地植入了我们的思维方式。当我们可以使用继承时，为什么还要重复地写某一段代码？我很喜欢把我的数据模型设为可继承的，这让我不用给共享一个抽象的类重复 <code>JSON</code> 解析代码，这能让我的模型保持统一。</p>
</li>
<li><p><strong>NSUserDefaults：</strong> <code>Struct</code> 不能被序列化成 <code>NSData</code> 对象。</p>
<p>我敢打包票大家都会在某些时候对把数据存在 <code>NSUserDefaults</code> 里面感到有罪恶感。这种想法很正常，因为不是每个人都喜欢跟 <code>CoreData</code> 打交道，特别是仅仅要存很少的对象的时候。 技术上这是可行的，但是要用 <code>Struct</code> 实现的话，这还有几个小坑要踩。因此你可能最好还是用 <code>Class</code> 来实现。</p>
</li>
</ul>
<h2 id="Struct-的优点"><a href="#Struct-的优点" class="headerlink" title="Struct 的优点"></a>Struct 的优点</h2><p>我不希望你们认为我不喜欢使用 <code>Struct</code> 是因为结构体伤了我的感情。使用 <code>Struct</code> 来代替 <code>Class</code> 作为数据模型有很多好处。<code>值类型（value type）</code> 是非常有优势的：</p>
<ul>
<li><p><strong>安全性</strong></p>
<p>因为 <code>Struct</code> 是用值类型传递的，它们没有引用计数。</p>
</li>
<li><p><strong>内存</strong></p>
<p>由于他们没有引用数，他们不会因为循环引用导致内存泄漏。</p>
</li>
<li><p><strong>速度</strong></p>
<p>值类型通常来说是以栈的形式分配的，而不是用堆。因此他们比 <code>Class</code> 要快很多，真的很多！在 <a href="http://stackoverflow.com/a/24243626/596821">StackOverflow</a> 给 <code>Struct</code> 和 <code>Class</code> 进行相同操作的表现做了基准测试，<code>Struct</code> 比 <code>Class</code> 要快九百倍。（注：在 <code>2016-05-07</code> 的测试中，<code>Struct</code> 的速度为 <code>Class</code> 的三千七百万倍，详见 <a href="http://stackoverflow.com/a/24243626/596821">StackOverflow</a> ）</p>
</li>
<li><p><strong>拷贝</strong></p>
<p>你有在 <code>Objective-C</code> 里试图过拷贝一个对象吗？你必须选用正确的拷贝类型（深拷贝、浅拷贝），这是非常烦人的，因为每次尝试你都不记得自己上次是怎么写的。 值类型的拷贝则非常轻松！</p>
</li>
<li><p><strong>线程安全</strong></p>
<p>值类型是自动线程安全的。无论你从哪个线程去访问你的 <code>Struct</code> ，都非常简单。</p>
</li>
</ul>
<blockquote>
<p>大概就是那么多，我已经点出了 <code>Struct</code> 的不足，同时也列出了一些 <code>Struct</code> 的优点去帮助你判断是否使用 <code>Struct</code> 类型作为数据模型。</p>
</blockquote>
<blockquote>
<p>然而，你们完全可以搭配使用两者。在我自己的项目里，如果模型较小，并且无需继承、无需储存到 <code>NSUserDefault</code> 或者无需 <code>Objective-C</code> 使用时，我会使用 <code>Struct</code> 。</p>
</blockquote>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>Swift</tag>
        <tag>Struct</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】解决使用 CocoaPods 执行 pod install 时出现 - Use the `$（inherited）` flag ... 警告</title>
    <url>/2017/05/25/iOS/201705251536/</url>
    <content><![CDATA[<blockquote>
<p>公司项目在执行 <code>pod install</code> 的时候总是出现很多黄色的警告，因为是警告并不会影响项目的正常编译，一直没有在意，但是总是有很多警告看起来很不舒服，于是就花了点时间解决掉了，下面将解决方法记录下来分享给有同样问题的你们。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="警告信息"><a href="#警告信息" class="headerlink" title="警告信息"></a>警告信息</h2><p>产生此警告的原因是项目 <code>Target</code> 中的一些设置，<code>CocoaPods</code> 也做了默认的设置，如果两个设置结果不一致，就会造成问题，显示的警告信息如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[!] The `client_ios_fm_a [Debug]` target overrides the `FRAMEWORK_SEARCH_PATHS` build setting defined <span class="keyword">in</span> `Pods/Target Support Files/Pods-client_ios_fm_a/Pods-client_ios_fm_a.debug.xcconfig<span class="string">&#x27;. This can lead to problems with the CocoaPods installation</span></span><br><span class="line"><span class="string">    - Use the `$(inherited)` flag, or</span></span><br><span class="line"><span class="string">    - Remove the build settings from the target.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[!] The `client_ios_fm_a [Debug]` target overrides the `ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES` build setting defined in `Pods/Target Support Files/Pods-client_ios_fm_a/Pods-client_ios_fm_a.debug.xcconfig&#x27;</span>. This can lead to problems with the CocoaPods installation</span><br><span class="line">    - Use the `$(inherited)` flag, or</span><br><span class="line">    - Remove the build settings from the target.</span><br><span class="line"></span><br><span class="line">[!] The `client_ios_fm_a [Debug]` target overrides the `OTHER_CFLAGS` build setting defined <span class="keyword">in</span> `Pods/Target Support Files/Pods-client_ios_fm_a/Pods-client_ios_fm_a.debug.xcconfig<span class="string">&#x27;. This can lead to problems with the CocoaPods installation</span></span><br><span class="line"><span class="string">    - Use the `$(inherited)` flag, or</span></span><br><span class="line"><span class="string">    - Remove the build settings from the target.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[!] The `client_ios_fm_a [Debug]` target overrides the `HEADER_SEARCH_PATHS` build setting defined in `Pods/Target Support Files/Pods-client_ios_fm_a/Pods-client_ios_fm_a.debug.xcconfig&#x27;</span>. This can lead to problems with the CocoaPods installation</span><br><span class="line">    - Use the `$(inherited)` flag, or</span><br><span class="line">    - Remove the build settings from the target.</span><br><span class="line"></span><br><span class="line">[!] The `client_ios_fm_a [Release]` target overrides the `FRAMEWORK_SEARCH_PATHS` build setting defined <span class="keyword">in</span> `Pods/Target Support Files/Pods-client_ios_fm_a/Pods-client_ios_fm_a.release.xcconfig<span class="string">&#x27;. This can lead to problems with the CocoaPods installation</span></span><br><span class="line"><span class="string">    - Use the `$(inherited)` flag, or</span></span><br><span class="line"><span class="string">    - Remove the build settings from the target.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[!] The `client_ios_fm_a [Release]` target overrides the `ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES` build setting defined in `Pods/Target Support Files/Pods-client_ios_fm_a/Pods-client_ios_fm_a.release.xcconfig&#x27;</span>. This can lead to problems with the CocoaPods installation</span><br><span class="line">    - Use the `$(inherited)` flag, or</span><br><span class="line">    - Remove the build settings from the target.</span><br><span class="line"></span><br><span class="line">[!] The `client_ios_fm_a [Release]` target overrides the `OTHER_CFLAGS` build setting defined <span class="keyword">in</span> `Pods/Target Support Files/Pods-client_ios_fm_a/Pods-client_ios_fm_a.release.xcconfig<span class="string">&#x27;. This can lead to problems with the CocoaPods installation</span></span><br><span class="line"><span class="string">    - Use the `$(inherited)` flag, or</span></span><br><span class="line"><span class="string">    - Remove the build settings from the target.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[!] The `client_ios_fm_a [Release]` target overrides the `HEADER_SEARCH_PATHS` build setting defined in `Pods/Target Support Files/Pods-client_ios_fm_a/Pods-client_ios_fm_a.release.xcconfig&#x27;</span>. This can lead to problems with the CocoaPods installation</span><br><span class="line">    - Use the `$(inherited)` flag, or</span><br><span class="line">    - Remove the build settings from the target.</span><br></pre></td></tr></table></figure>

<p><img data-src="https://file.karise.cn/blog/20190509161505.png" alt="警告信息"></p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul>
<li><p>打开项目 <code>Target </code> - <code>Build Settings</code> ，搜索 <code>Other Linker Flags</code> ，在这个设置上加入 <code>$(inherited)</code> 。</p>
</li>
<li><p>打开项目 <code>Target </code> - <code>Build Settings</code>，依次搜索如下图所示的警告上提示的设置名称，将这些设置选项全部改为 <code>$(inherited)</code> ，或者选中这些设置按下 <code>delete</code> 键恢复原设置。</p>
</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509161518.png" alt="设置名称"></p>
<ul>
<li><p>如果有 <code>FRAMEWORK_SEARCH_PATHS</code> 这个设置的警告的话，最好先把当前的设置项记录下来，然后选中设置按下 <code>delete</code> 以后，再把之前的设置加进去，否则编译可能会出现很多报错。</p>
</li>
<li><p>然后重新执行 <code>pod install</code> 或者 <code>pod update</code> 就会发现警告消失了。</p>
</li>
<li><p>如果我的方法不能够解决你的问题的话，可以试一下网上的另一种方法，就是点击项目文件 <code>project.xcodeproj</code> ，右键显示包内容，用文本编辑器打开 <code>project.pbxproj</code> ，<code>command + F</code> 搜索 <code>OTHER_LDFLAGS</code> ，删除搜索到的设置，<code>command + S</code> 保存，然后重新执行 <code>pod install</code> 或者 <code>pod update</code> 。</p>
</li>
</ul>
<blockquote>
<p>方法就是这样，希望我的方法能够解决你的问题。</p>
</blockquote>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>iOS 开发问题</tag>
        <tag>CocoaPods</tag>
        <tag>CocoaPods 问题</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】Realm Swift 数据库使用汇总</title>
    <url>/2017/07/21/iOS/201707211728/</url>
    <content><![CDATA[<blockquote>
<p>由于最近公司需要将项目用 <code>Swift</code> 改写，项目中需要大量使用数据库，之前 <code>OC</code> 使用的是 <code>Core Data</code> ，<code>Core Data</code> 使用起来确实十分的繁琐，故决定在 <code>Swift</code> 中弃用，改用 <code>Realm</code> 数据库，下面将使用方法记录下来方便以后查看。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="Realm-的优点"><a href="#Realm-的优点" class="headerlink" title="Realm 的优点"></a>Realm 的优点</h2><p><code>Realm</code> 不是基于 <code>Core Data</code>，也不是基于 <code>SQLite</code> 封装构建的。它有自己的数据库存储引擎，下面说一下 <code>Realm</code> 的一些优点。</p>
<ul>
<li><p><strong>跨平台：</strong> 现在很多应用都是要兼顾 <code>iOS</code> 和 <code>Android</code> 两个平台同时开发。如果两个平台都能使用相同的数据库，那就不用考虑内部数据的架构不同，使用 <code>Realm</code> 提供的 <code>API</code>，可以使数据持久化层在两个平台上无差异化的转换。代码可以使用 <code>Swift</code> 、<code>Objective-C</code> 以及 <code>Java</code> 语言来编写。</p>
</li>
<li><p><strong>简单易用：</strong> <code>Core Data</code> 和 <code>SQLite</code> 冗余、繁杂的知识和代码足以吓退绝大多数刚入门的开发者，而换用 <code>Realm</code>，则可以极大地减少学习成本，立即学会本地化存储的方法。大部分常用的功能（比如插入、查询等）都可以用一行简单的代码轻松完成，毫不吹嘘的说，把官方最新文档完整看一遍，就完全可以上手开发了，这是 <a href="https://realm.io/cn/docs/swift/latest/">中文官方文档地址</a>。</p>
</li>
<li><p><strong>可视化：</strong> <code>Realm</code> 还提供了一个轻量级的数据库查看工具，在 <code>Mac Appstore</code> 可以下载 <code>Realm Browser</code> 这个工具，开发者可以查看数据库当中的内容，执行简单的插入和删除数据的操作。</p>
</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509163244.jpg" alt="Realm Browser"></p>
<h2 id="Realm-Swift-的安装"><a href="#Realm-Swift-的安装" class="headerlink" title="Realm Swift 的安装"></a>Realm Swift 的安装</h2><p>这是 <code>Realm</code> 的 <a href="https://github.com/realm/realm-cocoa">GitHub 地址</a> ，其他方法我就不说了，我是用 <code>CocoaPods</code> 方式安装的，所以就只说 <code>CocoaPods</code> 的安装方法了。</p>
<ul>
<li><p><a href="https://guides.cocoapods.org/using/getting-started">安装 CocoaPods 0.39.0 或者更高版本</a> 。</p>
</li>
<li><p>运行 <code>pod repo update</code> ，以确保 <code>CocoaPods</code> 能够获取到 <code>Realm</code> 的最新版本。</p>
</li>
<li><p>在你的 <code>Podfile</code> 中，添加 <code>use_frameworks!</code> 和 <code>pod &#39;RealmSwift&#39;</code> 到你的主要和测试目标。</p>
</li>
<li><p>如果你使用的是 <code>Xcode 8</code>，那么将下面代码复制到你的 <code>Podfile</code> 底部，以便在必要的时候更新 <code>Swift</code> 的版本。</p>
</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_install</span> <span class="string">do |installer|</span></span><br><span class="line">  <span class="meta">installer.pods_project.targets.each</span> <span class="string">do |target|</span></span><br><span class="line">    <span class="meta">target.build_configurations.each</span> <span class="string">do |config|</span></span><br><span class="line">      <span class="meta">config.build_settings[&#x27;SWIFT_VERSION&#x27;]</span> = <span class="string">&#x27;3.0&#x27;</span></span><br><span class="line">    <span class="attr">end</span></span><br><span class="line">  <span class="attr">end</span></span><br><span class="line"><span class="attr">end</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>在终端运行 <code>pod install</code> 。</p>
</li>
<li><p>采用 <code>CocoaPods</code> 生成的 <code>.xcworkspace</code> 来运行工程。</p>
</li>
<li><p>在需要使用 <code>Realm Swift</code> 的地方加入 <code>import RealmSwift</code> 。</p>
</li>
</ul>
<h2 id="Realm-Browser-的使用"><a href="#Realm-Browser-的使用" class="headerlink" title="Realm Browser 的使用"></a>Realm Browser 的使用</h2><p>先说一下 <code>Realm Browser</code> 这个数据库查看工具的使用方法。</p>
<h3 id="1-模拟器调试"><a href="#1-模拟器调试" class="headerlink" title="1. 模拟器调试"></a>1. 模拟器调试</h3><ul>
<li>如果是使用模拟器进行调试，首先通过以下代码打印出 <code>Realm</code> 数据库地址。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> realm = <span class="keyword">try</span>! <span class="type">Realm</span>()</span><br><span class="line"><span class="built_in">print</span>(realm.configuration.fileURL!)</span><br></pre></td></tr></table></figure>

<ul>
<li>然后打开 <code>Finder</code> 按下 <code>command + shift + G</code> 跳转到对应路径下，用 <code>Realm Browser</code> 打开对应的 <code>.realm</code> 文件就可以看到数据了。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509163308.png" alt=".realm 文件"></p>
<h3 id="2-真机调试"><a href="#2-真机调试" class="headerlink" title="2. 真机调试"></a>2. 真机调试</h3><ul>
<li>如果是真机调试的话，打开 <code>Xcode</code> ，选择菜单 <code>Window</code> 下的 <code>Devices</code> 。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509163322.png" alt="Devices"></p>
<ul>
<li>选择对应的设备与项目，点击 <code>Download Container</code>。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509163334.png" alt="Download Container"></p>
<ul>
<li>导出 <code>xcappdata</code> 文件后，显示包内容，进到 <code>AppData</code> 下的 <code>Documents</code> ，使用 <code>Realm Browser</code> 打开 <code>.realm</code> 文件即可。</li>
</ul>
<h2 id="Realm-Swift-的使用"><a href="#Realm-Swift-的使用" class="headerlink" title="Realm Swift 的使用"></a>Realm Swift 的使用</h2><h3 id="1-配置-Realm-数据库"><a href="#1-配置-Realm-数据库" class="headerlink" title="1. 配置 Realm 数据库"></a>1. 配置 Realm 数据库</h3><ul>
<li>将以下代码写在 <code>AppDelegate</code> 的 <code>didFinishLaunchingWithOptions</code> 方法中，这个方法主要用于数据模型属性增加或删除时的数据迁移，每次模型属性变化时，将 <code>schemaVersion </code> 加 <code>1</code> 即可，<code>Realm</code> 会自行检测新增和需要移除的属性，然后自动更新硬盘上的数据库架构，移除属性的数据将会被删除。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Realm 数据库配置，用于数据库的迭代更新 */</span></span><br><span class="line"><span class="keyword">let</span> schemaVersion: <span class="type">UInt64</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> config = <span class="type">Realm</span>.<span class="type">Configuration</span>(schemaVersion: schemaVersion, migrationBlock: &#123; migration, oldSchemaVersion <span class="keyword">in</span></span><br><span class="line">    <span class="comment">/* 什么都不要做！Realm 会自行检测新增和需要移除的属性，然后自动更新硬盘上的数据库架构 */</span></span><br><span class="line">    <span class="keyword">if</span> (oldSchemaVersion &lt; schemaVersion) &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="type">Realm</span>.<span class="type">Configuration</span>.defaultConfiguration = config</span><br><span class="line"><span class="type">Realm</span>.asyncOpen &#123; (realm, error) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="number">_</span> = realm &#123; <span class="comment">// Realm 成功打开，迁移已在后台线程中完成</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Realm 数据库配置成功&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> error = error &#123; <span class="comment">// 处理打开 Realm 时所发生的错误</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Realm 数据库配置失败：\(error.localizedDescription)&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果属性改变后，想要保留原来已存在的数据来更新新的属性值，在属性变化后将 <code>schemaVersion</code> 加 <code>1</code> ，并将 <code>config</code> 改为如下，其余不变。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> config = <span class="type">Realm</span>.<span class="type">Configuration</span>(schemaVersion: schemaVersion, migrationBlock: &#123; migration, oldSchemaVersion <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> (oldSchemaVersion &lt; schemaVersion) &#123;</span><br><span class="line">        migration.enumerateObjects(ofType: <span class="type">Dog</span>.className()) &#123; oldObject, newObject <span class="keyword">in</span></span><br><span class="line">            <span class="comment">/* 将 Dog 表中旧的 firstName 和 lastName 属性删除，数据保留合并为 fullName 属性 */</span></span><br><span class="line">            <span class="keyword">let</span> firstName = oldObject![<span class="string">&quot;firstName&quot;</span>] <span class="keyword">as</span>! <span class="type">String</span></span><br><span class="line">            <span class="keyword">let</span> lastName = oldObject![<span class="string">&quot;lastName&quot;</span>] <span class="keyword">as</span>! <span class="type">String</span></span><br><span class="line">            newObject![<span class="string">&quot;fullName&quot;</span>] = <span class="string">&quot;\(firstName) \(lastName)&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>如果是只是属性重命名，想保留原来已经存在的数据，重命名以后将 <code>schemaVersion</code> 加 <code>1</code> ，并将 <code>config</code> 改为如下，其余不变，并且重命名操作应该在调用上面 <code>enumerateObjects(ofType: _:)</code> 之外完成。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> config = <span class="type">Realm</span>.<span class="type">Configuration</span>(schemaVersion: schemaVersion, migrationBlock: &#123; migration, oldSchemaVersion <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> (oldSchemaVersion &lt; schemaVersion) &#123;</span><br><span class="line">        <span class="comment">/* 将 Dog 表的 name 属性重命名为 fullName */</span></span><br><span class="line">        migration.renameProperty(onType: <span class="type">Dog</span>.className(), from: <span class="string">&quot;name&quot;</span>, to: <span class="string">&quot;fullName&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-Model-数据模型"><a href="#2-Model-数据模型" class="headerlink" title="2. Model 数据模型"></a>2. Model 数据模型</h3><p><code>Realm</code> 数据模型是基于标准 <code>Swift</code> 类来进行定义的，使用属性来完成模型的具体定义，<code>Realm</code> 模型对象在形式上基本上与其他 <code>Swift</code> 对象相同，你可以给它们添加您自己的方法和协议，和在其他对象中使用类似。</p>
<h4 id="Realm-支持的属性类"><a href="#Realm-支持的属性类" class="headerlink" title="Realm 支持的属性类"></a>Realm 支持的属性类</h4><p><code>Realm</code> 支持这几种属性类型：<code>Bool</code>、<code>Int8</code>、<code>Int16</code>、<code>Int32</code>、<code>Int64</code>、<code>Double</code>、<code>Float</code>、<code>String</code>、<code>NSDate</code> 以及 <code>NSData</code> ，下面的表格提供了关于声明模型属性的简易参考。</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">非可选值形式</th>
<th align="left">可选值形式</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>Bool</strong></td>
<td align="left"><code>dynamic var value = false</code></td>
<td align="left"><code>let value = RealmOptional&lt;Bool&gt;()</code></td>
</tr>
<tr>
<td align="left"><strong>Int</strong></td>
<td align="left"><code>dynamic var value = 0</code></td>
<td align="left"><code>let value = RealmOptional&lt;Int&gt;()</code></td>
</tr>
<tr>
<td align="left"><strong>Float</strong></td>
<td align="left"><code>dynamic var value: Float = 0.0</code></td>
<td align="left"><code>let value = RealmOptional&lt;Float&gt;()</code></td>
</tr>
<tr>
<td align="left"><strong>Double</strong></td>
<td align="left"><code>dynamic var value: Double = 0.0</code></td>
<td align="left"><code>let value = RealmOptional&lt;Double&gt;()</code></td>
</tr>
<tr>
<td align="left"><strong>String</strong></td>
<td align="left"><code>dynamic var value = &quot;&quot;</code></td>
<td align="left"><code>dynamic var value: String? = nil</code></td>
</tr>
<tr>
<td align="left"><strong>Data</strong></td>
<td align="left"><code>dynamic var value = NSData()</code></td>
<td align="left"><code>dynamic var value: NSData? = nil</code></td>
</tr>
<tr>
<td align="left"><strong>Date</strong></td>
<td align="left"><code>dynamic var value = NSDate()</code></td>
<td align="left"><code>dynamic var value: NSDate? = nil</code></td>
</tr>
<tr>
<td align="left"><strong>Object</strong></td>
<td align="left"><code>必须是可选值</code></td>
<td align="left"><code>dynamic var value: Class?</code></td>
</tr>
<tr>
<td align="left"><strong>List</strong></td>
<td align="left"><code>let value = List&lt;Class&gt;()</code></td>
<td align="left"><code>必须是非可选值</code></td>
</tr>
<tr>
<td align="left"><strong>LinkingObjects</strong></td>
<td align="left"><code>let value = LinkingObjects(fromType: Class.self, property: &quot;property&quot;)</code></td>
<td align="left"><code>必须是非可选值</code></td>
</tr>
</tbody></table>
<h4 id="Model-数据模型创建"><a href="#Model-数据模型创建" class="headerlink" title="Model 数据模型创建"></a>Model 数据模型创建</h4><p>下面以 <code>Dog</code> 和 <code>Person</code> 为例，通过简单的继承 <code>Object</code> 或者一个已经存在的模型类，你就可以创建一个新的 <code>Realm</code> 数据模型对象。</p>
<h5 id="普通的数据模型"><a href="#普通的数据模型" class="headerlink" title="普通的数据模型"></a>普通的数据模型</h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 狗狗的数据模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>: <span class="title">Object</span> </span>&#123;</span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> name: <span class="type">String?</span></span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> age = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 狗狗主人的数据模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">Object</span> </span>&#123;</span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> name: <span class="type">String?</span></span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> birthdate = <span class="type">NSDate</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="关系绑定"><a href="#关系绑定" class="headerlink" title="关系绑定"></a>关系绑定</h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 狗狗的数据模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>: <span class="title">Object</span> </span>&#123;</span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> name: <span class="type">String?</span></span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> age = <span class="number">0</span></span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> owner: <span class="type">Person?</span>  <span class="comment">// 对一关系</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 狗狗主人的数据模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">Object</span> </span>&#123;</span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> name: <span class="type">String?</span></span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> birthdate = <span class="type">NSDate</span>()</span><br><span class="line">    <span class="keyword">let</span> dogs = <span class="type">List</span>&lt;<span class="type">Dog</span>&gt;()  <span class="comment">// 对多关系</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="反向关系"><a href="#反向关系" class="headerlink" title="反向关系"></a>反向关系</h5><p>如果对多关系属性 <code>Person.dogs</code> 链接了一个 <code>Dog</code> 实例，而这个实例的对一关系属性 <code>Dog.owner</code> 又链接到了对应的这个 <code>Person</code> 实例，那么实际上这些链接仍然是互相独立的。</p>
<p>为 <code>Person</code> 实例的 <code>dogs</code> 属性添加一个新的 <code>Dog</code> 实例，并不会将这个 <code>Dog</code> 实例的 <code>owner</code> 属性自动设置为该 <code>Person</code>。</p>
<p>但是由于手动同步双向关系会很容易出错，并且这个操作还非常得复杂、冗余，因此 <code>Realm</code> 提供了 <code>链接对象 (linking objects)</code> 属性来表示这些反向关系。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 狗狗的数据模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>: <span class="title">Object</span> </span>&#123;</span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> name: <span class="type">String?</span></span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> age = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> owner = <span class="type">LinkingObjects</span>(fromType: <span class="type">Person</span>.<span class="keyword">self</span>, property: <span class="string">&quot;dogs&quot;</span>) <span class="comment">// 反向关系</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 狗狗主人的数据模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">Object</span> </span>&#123;</span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> name: <span class="type">String?</span></span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> birthdate = <span class="type">NSDate</span>()</span><br><span class="line">    <span class="keyword">let</span> dogs = <span class="type">List</span>&lt;<span class="type">Dog</span>&gt;()  <span class="comment">// 对多关系</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="索引属性（Indexed-Properties）"><a href="#索引属性（Indexed-Properties）" class="headerlink" title="索引属性（Indexed Properties）"></a>索引属性（Indexed Properties）</h5><p>重写 <code>Object.indexedProperties()</code> 方法可以为数据模型中需要添加索引的属性建立索引。<code>Realm</code> 支持<code>字符串</code>、<code>整数</code>、<code>布尔值</code> 以及 <code>NSDate</code> 属性作为索引。对属性进行索引可以减少插入操作的性能耗费，加快比较检索的速度（比如说 <code>=</code> 以及 <code>IN</code> 操作符）</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 狗狗的数据模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>: <span class="title">Object</span> </span>&#123;</span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> name: <span class="type">String?</span></span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> age = <span class="number">0</span></span><br><span class="line">    <span class="keyword">override</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">indexedProperties</span>() -&gt; [<span class="title">String</span>] </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&quot;name&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="主键（Primary-Keys）"><a href="#主键（Primary-Keys）" class="headerlink" title="主键（Primary Keys）"></a>主键（Primary Keys）</h5><p>重写 <code>Object.primaryKey()</code> 可以设置模型的主键。声明主键之后，对象将允许进行查询，并且更新速度更加高效，而这也会要求每个对象保持唯一性。 一旦带有主键的对象被添加到 <code>Realm</code> 之后，该对象的主键将不可修改。</p>
<p><code>Realm</code> 可以将 <code>Int</code> 和 <code>String</code> 类型的属性设为主键，但是不支持自增长属性，所以只能自己给主键生成一个唯一的标识，可以使用 <code>UUID().uuidString</code> 方法生成唯一主键。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 狗狗的数据模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>: <span class="title">Object</span> </span>&#123;</span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> id = <span class="type">UUID</span>().uuidString</span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> name: <span class="type">String?</span></span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> age = <span class="number">0</span></span><br><span class="line">    <span class="keyword">override</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">primaryKey</span>() -&gt; <span class="title">String</span>? </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;id&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="忽略属性（Ignored-Properties）"><a href="#忽略属性（Ignored-Properties）" class="headerlink" title="忽略属性（Ignored Properties）"></a>忽略属性（Ignored Properties）</h5><p>重写 <code>Object.ignoredProperties()</code> 可以防止 <code>Realm</code> 存储数据模型的某个属性。<code>Realm</code> 将不会干涉这些属性的常规操作，它们将由成员变量提供支持，并且您能够轻易重写它们的 <code>setter</code> 和 <code>getter</code> 。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 狗狗的数据模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>: <span class="title">Object</span> </span>&#123;</span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> name: <span class="type">String?</span></span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> age = <span class="number">0</span></span><br><span class="line">    <span class="keyword">override</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">ignoredProperties</span>() -&gt; [<span class="title">String</span>]? </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&quot;name&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-创建数据模型对象"><a href="#3-创建数据模型对象" class="headerlink" title="3. 创建数据模型对象"></a>3. 创建数据模型对象</h3><ul>
<li>可以用多种方法创建一个新的对象：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* (1) 创建一个狗狗对象，然后设置其属性 */</span></span><br><span class="line"><span class="keyword">var</span> myDog = <span class="type">Dog</span>()</span><br><span class="line">myDog.name = <span class="string">&quot;大黄&quot;</span></span><br><span class="line">myDog.age = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* (2) 通过字典创建狗狗对象 */</span></span><br><span class="line"><span class="keyword">let</span> myOtherDog = <span class="type">Dog</span>(value: [<span class="string">&quot;name&quot;</span> : <span class="string">&quot;豆豆&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">/* (3) 通过数组创建狗狗对象 */</span></span><br><span class="line"><span class="keyword">let</span> myThirdDog = <span class="type">Dog</span>(value: [<span class="string">&quot;豆豆&quot;</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure>

<ul>
<li>即使是数组以及字典的多重嵌套，<code>Realm</code> 也能够轻松完成对象的创建。注意 <code>List</code> 只能够包含 <code>Object</code> 类型，不能包含诸如 <code>String</code> 之类的基础类型。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 这里我们就可以使用已存在的狗狗对象来完成初始化 */</span></span><br><span class="line"><span class="keyword">let</span> aPerson = <span class="type">Person</span>(value: [<span class="string">&quot;李四&quot;</span>, <span class="number">30</span>, [aDog, anotherDog]])</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 还可以使用多重嵌套 */</span></span><br><span class="line"><span class="keyword">let</span> anotherPerson = <span class="type">Person</span>(value: [<span class="string">&quot;李四&quot;</span>, <span class="number">30</span>, [[<span class="string">&quot;小黑&quot;</span>, <span class="number">5</span>], [<span class="string">&quot;旺财&quot;</span>, <span class="number">6</span>]]])</span><br></pre></td></tr></table></figure>

<h3 id="4-数据库操作（增删改查）"><a href="#4-数据库操作（增删改查）" class="headerlink" title="4. 数据库操作（增删改查）"></a>4. 数据库操作（增删改查）</h3><p>任何操作都需要获取 <code>Realm</code> 实例，每个线程只需要使用一次即可。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 获取默认的 Realm 实例，每个线程只需要使用一次即可 */</span></span><br><span class="line"><span class="keyword">let</span> realm = <span class="keyword">try</span>! <span class="type">Realm</span>()</span><br></pre></td></tr></table></figure>

<h4 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 创建一个 Dog 对象 */</span></span><br><span class="line"><span class="keyword">let</span> dog = <span class="type">Dog</span>(value: [<span class="string">&quot;name&quot;</span> : <span class="string">&quot;豆豆&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建一个 Dog 对象数组 */</span></span><br><span class="line"><span class="keyword">let</span> dogs = [<span class="type">Dog</span>(value: [<span class="string">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">1</span>]), <span class="type">Dog</span>(value: [<span class="string">&quot;name&quot;</span>: <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">2</span>]), <span class="type">Dog</span>(value: [<span class="string">&quot;name&quot;</span>: <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">3</span>])]</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 通过事务将数据添加到 Realm 中 */</span></span><br><span class="line"><span class="keyword">try</span>! realm.write &#123;</span><br><span class="line">    realm.add(dog) <span class="comment">// 增加单个数据</span></span><br><span class="line">    realm.add(dogs) <span class="comment">// 增加多个数据</span></span><br><span class="line">    realm.create(<span class="type">Dog</span>.<span class="keyword">self</span>, value: [<span class="string">&quot;name&quot;</span> : <span class="string">&quot;豆豆&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">3</span>], update: <span class="literal">true</span>) <span class="comment">// 直接根据 JSON 数据增加</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// let dog = ... 存储在 Realm 中的 Dog 对象</span></span><br><span class="line"><span class="comment">// let dogs = ... 存储在 Realm 中的多个 Dog 对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在事务中删除数据 */</span></span><br><span class="line"><span class="keyword">try</span>! realm.write &#123;</span><br><span class="line">    realm.delete(dog) <span class="comment">// 删除单个数据</span></span><br><span class="line">    realm.delete(dogs) <span class="comment">// 删除多个数据</span></span><br><span class="line">    realm.deleteAll() <span class="comment">// 从 Realm 中删除所有数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><ul>
<li><strong>内容直接更新：</strong> 在事务中直接修改某一条数据。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// let dog = ... 存储在 Realm 中的 Dog 对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在一个事务中修改数据 */</span></span><br><span class="line"><span class="keyword">try</span>! realm.write &#123;</span><br><span class="line">    dog.name = <span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>** 通过主键更新： ** 如果你的数据模型中设置了主键的话，那么你可以使用 <code>Realm().add(_:update:)</code> 来更新数据，如果数据不存在时会自动插入新的数据。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// let dog = ... 存储在 Realm 中的 Dog 对象（有主键）</span></span><br><span class="line"><span class="comment">// let dogs = ... 存储在 Realm 中的多个 Dog 对象（有主键）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在一个事务中修改数据 */</span></span><br><span class="line"><span class="keyword">try</span>! realm.write &#123;</span><br><span class="line">    realm.add(dog, update: <span class="literal">true</span>) <span class="comment">// 更新单个数据</span></span><br><span class="line">    realm.add(dogs, update: <span class="literal">true</span>) <span class="comment">// 更新多个数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>键值编码：</strong> <code>Object</code>、<code>Result</code> 以及 <code>List</code> 都遵守 <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueCoding/">键值编码(Key-Value Coding)</a> 机制。 当你在运行时才能决定哪个属性需要更新的时候，这个方法是最有用的。将 <code>KVC</code> 应用在集合当中是大量更新对象的极佳方式，这样就可以不用经常遍历集合，为每个项目创建一个访问器了。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// let dogs = ... 存储在 Realm 中的多个 Dog 对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在一个事务中修改数据 */</span></span><br><span class="line"><span class="keyword">try</span>! realm.write &#123;</span><br><span class="line">    dogs.first?.setValue(<span class="string">&quot;张三&quot;</span>, forKeyPath: <span class="string">&quot;name&quot;</span>) <span class="comment">// 将第一个狗狗名字改为张三</span></span><br><span class="line">    dogs.setValue(<span class="string">&quot;张三&quot;</span>, forKeyPath: <span class="string">&quot;name&quot;</span>) <span class="comment">// 将所有狗狗名字都改为张三</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><ul>
<li><strong>普通查询：</strong> 查询数据库中某张表的所有数据。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 从数据库中查询所有狗狗 */</span></span><br><span class="line"><span class="keyword">let</span> dogs = realm.objects(<span class="type">Dog</span>.<span class="keyword">self</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>主键查询：</strong> 根据 <code>主键</code> 查询某张表的某条数据，模型必须包含主键，否则会崩溃。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 从数据库中查询主键为 1 的狗狗 */</span></span><br><span class="line"><span class="keyword">let</span> dog = realm.object(ofType: <span class="type">Dog</span>.<span class="keyword">self</span>, forPrimaryKey: <span class="string">&quot;1&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>条件查询：</strong> 根据 <code>断言字符串</code> 或者 <code> NSPredicate 谓词</code> 查询某张表中的符合条件数据。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 根据断言字符串从数据库查询 name 为 张三 的狗狗 */</span></span><br><span class="line"><span class="keyword">var</span> dogs = realm.objects(<span class="type">Dog</span>.<span class="keyword">self</span>).<span class="built_in">filter</span>(<span class="string">&quot;name = %@&quot;</span>, <span class="string">&quot;张三&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 根据 NSPredicate 谓词从数据库查询 age 小于 5 并且 name 以 ‘张’ 开头的狗狗 */</span></span><br><span class="line"><span class="keyword">let</span> predicate = <span class="type">NSPredicate</span>(format: <span class="string">&quot;age &lt; 5 AND name BEGINSWITH &#x27;张&#x27;&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> dogs = realm.objects(<span class="type">Dog</span>.<span class="keyword">self</span>).<span class="built_in">filter</span>(predicate)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>排序查询：</strong> 将查询结果进行排序，可以和条件查询配合使用。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 将查询到的狗狗根据名字升序进行排序 */</span></span><br><span class="line"><span class="keyword">let</span> dogs = realm.objects(<span class="type">Dog</span>.<span class="keyword">self</span>).sorted(byKeyPath: <span class="string">&quot;name&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将查询到的狗狗根据名字降序进行排序 */</span></span><br><span class="line"><span class="keyword">let</span> dogs = realm.objects(<span class="type">Dog</span>.<span class="keyword">self</span>).sorted(byKeyPath: <span class="string">&quot;name&quot;</span>, ascending: <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将查询到的狗狗根据名字和年龄升序进行排序 */</span></span><br><span class="line"><span class="keyword">let</span> dogs = realm.objects(<span class="type">Dog</span>.<span class="keyword">self</span>).sorted(by: [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>])</span><br></pre></td></tr></table></figure>

<blockquote>
<p>想要了解更多可以查看  <a href="https://realm.io/cn/docs/swift/latest/">中文官方文档地址</a> ，有不足之处之后会补充，<code>OC</code> 版本的话可以看这篇文章：<a href="http://www.jianshu.com/p/50e0efb66bdf">Realm数据库 从入门到“放弃”</a> ，写的非常详细，也参考了不少这篇文章的内容。</p>
</blockquote>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>Swift</tag>
        <tag>Realm</tag>
        <tag>RealmSwift</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】Swift 中文转换拼音以及中文数组排序</title>
    <url>/2017/09/15/iOS/201709151218/</url>
    <content><![CDATA[<blockquote>
<p>在开发过程中特别是做通讯录一类功能时经常要用到 <code>中文转换拼音</code> 以及 <code>中文数组排序</code> ，下面记录一下方法，方便以后查看，有需要的可以收藏一下。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="中文转换拼音"><a href="#中文转换拼音" class="headerlink" title="中文转换拼音"></a>中文转换拼音</h2><p>只需要为 <code>String</code> 类写一个扩展即可，下面方法全部写在 <code>extension String &#123; &#125;</code> 中。</p>
<ul>
<li><strong>判断字符串中是否有中文</strong></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 判断字符串中是否有中文</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isIncludeChinese</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> <span class="keyword">self</span>.unicodeScalars &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0x4e00</span> &lt; ch.value  &amp;&amp; ch.value &lt; <span class="number">0x9fff</span>) &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125; <span class="comment">// 中文字符范围：0x4e00 ~ 0x9fff</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;张三&quot;</span>.isIncludeChinese() <span class="comment">// 输出结果 true</span></span><br><span class="line"><span class="string">&quot;zhangsan&quot;</span>.isIncludeChinese() <span class="comment">// 输出结果 false</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>将中文字符串转换为拼音</strong></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 将中文字符串转换为拼音</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Parameter hasBlank: 是否带空格（默认不带空格）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">transformToPinyin</span><span class="params">(hasBlank: Bool = <span class="literal">false</span>)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> stringRef = <span class="type">NSMutableString</span>(string: <span class="keyword">self</span>) <span class="keyword">as</span> <span class="type">CFMutableString</span></span><br><span class="line">    <span class="type">CFStringTransform</span>(stringRef,<span class="literal">nil</span>, kCFStringTransformToLatin, <span class="literal">false</span>) <span class="comment">// 转换为带音标的拼音</span></span><br><span class="line">    <span class="type">CFStringTransform</span>(stringRef, <span class="literal">nil</span>, kCFStringTransformStripCombiningMarks, <span class="literal">false</span>) <span class="comment">// 去掉音标</span></span><br><span class="line">    <span class="keyword">let</span> pinyin = stringRef <span class="keyword">as</span> <span class="type">String</span></span><br><span class="line">    <span class="keyword">return</span> hasBlank ? pinyin : pinyin.replacingOccurrences(of: <span class="string">&quot; &quot;</span>, with: <span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;张三&quot;</span>.transformToPinyin() <span class="comment">// 输出结果 &quot;zhangsan&quot;</span></span><br><span class="line"><span class="string">&quot;张三&quot;</span>.transformToPinyin(hasBlank: <span class="literal">true</span>) <span class="comment">// 输出结果 &quot;zhang san&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>获取中文首字母</strong></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 获取中文首字母</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Parameter lowercased: 是否小写（默认大写）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">transformToPinyinHead</span><span class="params">(lowercased: Bool = <span class="literal">false</span>)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> pinyin = <span class="keyword">self</span>.transformToPinyin(hasBlank: <span class="literal">true</span>).capitalized <span class="comment">// 字符串转换为首字母大写</span></span><br><span class="line">    <span class="keyword">var</span> headPinyinStr = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> pinyin.characters &#123;</span><br><span class="line">        <span class="keyword">if</span> ch &lt;= <span class="string">&quot;Z&quot;</span> &amp;&amp; ch &gt;= <span class="string">&quot;A&quot;</span> &#123;</span><br><span class="line">            headPinyinStr.append(ch) <span class="comment">// 获取所有大写字母</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lowercased ? headPinyinStr.lowercased() : headPinyinStr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;张三&quot;</span>.transformToPinyinHead() <span class="comment">// 输出结果 &quot;ZS&quot;</span></span><br><span class="line"><span class="string">&quot;张三&quot;</span>.transformToPinyinHead(lowercased: <span class="literal">true</span>) <span class="comment">// 输出结果 &quot;zs&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="中文数组排序"><a href="#中文数组排序" class="headerlink" title="中文数组排序"></a>中文数组排序</h2><p>只需要为 <code>Array</code> 类写一个扩展即可，必须为 <code>Array&lt;String&gt;</code> 类型才能排序。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 数组内中文按拼音字母排序</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// - Parameter ascending: 是否升序（默认升序）</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sortedByPinyin</span><span class="params">(ascending: Bool = <span class="literal">true</span>)</span></span> -&gt; <span class="type">Array</span>&lt;<span class="type">String</span>&gt;? &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span> <span class="keyword">is</span> <span class="type">Array</span>&lt;<span class="type">String</span>&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">self</span> <span class="keyword">as</span>! <span class="type">Array</span>&lt;<span class="type">String</span>&gt;).sorted &#123; (value1, value2) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">let</span> pinyin1 = value1.transformToPinyin()</span><br><span class="line">                <span class="keyword">let</span> pinyin2 = value2.transformToPinyin()</span><br><span class="line">                <span class="keyword">return</span> pinyin1.compare(pinyin2) == (ascending ? .orderedAscending : .orderedDescending)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">[<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>, <span class="string">&quot;钱七&quot;</span>].sortedByPinyin()</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// 0 : &quot;李四&quot;</span></span><br><span class="line"><span class="comment">// 1 : &quot;钱七&quot;</span></span><br><span class="line"><span class="comment">// 2 : &quot;王五&quot;</span></span><br><span class="line"><span class="comment">// 3 : &quot;张三&quot;</span></span><br><span class="line"><span class="comment">// 4 : &quot;赵六&quot;</span></span><br><span class="line"></span><br><span class="line">[<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>, <span class="string">&quot;钱七&quot;</span>].sortedByPinyin(ascending: <span class="literal">false</span>)</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// 0 : &quot;赵六&quot;</span></span><br><span class="line"><span class="comment">// 1 : &quot;张三&quot;</span></span><br><span class="line"><span class="comment">// 2 : &quot;王五&quot;</span></span><br><span class="line"><span class="comment">// 3 : &quot;钱七&quot;</span></span><br><span class="line"><span class="comment">// 4 : &quot;李四&quot;</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>].sortedByPinyin() <span class="comment">// 输出结果 nil</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>Swift</tag>
        <tag>拼音</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】Objective-C 中 Charts 的 CombinedChart 使用汇总</title>
    <url>/2017/08/10/iOS/201708101503/</url>
    <content><![CDATA[<blockquote>
<p>最近公司项目中要做一个报表功能，需要用到图表，于是就使用了 <a href="https://github.com/danielgindi/Charts">Charts</a> 这个框架，这个框架可以说是图表中用的最多的框架了，由于 <code>Charts</code> 只有 <code>Swift</code> 版本，公司项目是用 <code>OC</code> 写的，所以先整理一下 <code>OC</code> 的使用方法，<code>Swift</code> 等以后项目转了在整理。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="1-创建-CombinedChartView-并设置属性"><a href="#1-创建-CombinedChartView-并设置属性" class="headerlink" title="1. 创建 CombinedChartView 并设置属性"></a>1. 创建 CombinedChartView 并设置属性</h2><p>下面列出一些常用的设置属性，可以根据需求自行设置。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CombinedChartViewController</span>()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) CombinedChartView *combinedChartView; <span class="comment">// 柱状折线组合图</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">CombinedChartViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置图表的属性 */</span></span><br><span class="line">    _combinedChartView = [[CombinedChartView alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">self</span>.view.frame.size.width, <span class="number">350</span>)];</span><br><span class="line">    _combinedChartView.drawOrder = @[@(CombinedChartDrawOrderBar), @(CombinedChartDrawOrderLine)]; <span class="comment">// 绘制顺序（折线图在柱状图上面）</span></span><br><span class="line">    _combinedChartView.noDataText = <span class="string">@&quot;暂无数据&quot;</span>; <span class="comment">// 无数据时显示的文字</span></span><br><span class="line">    _combinedChartView.descriptionText = <span class="string">@&quot;&quot;</span>; <span class="comment">// 描述文字</span></span><br><span class="line">    _combinedChartView.legend.enabled = <span class="literal">NO</span>; <span class="comment">// 隐藏图例</span></span><br><span class="line">    _combinedChartView.pinchZoomEnabled = <span class="literal">NO</span>; <span class="comment">// 触控放大</span></span><br><span class="line">    _combinedChartView.doubleTapToZoomEnabled = <span class="literal">NO</span>; <span class="comment">// 双击放大</span></span><br><span class="line">    _combinedChartView.scaleXEnabled = <span class="literal">NO</span>; <span class="comment">// X 轴缩放</span></span><br><span class="line">    _combinedChartView.scaleYEnabled = <span class="literal">NO</span>; <span class="comment">// Y 轴缩放</span></span><br><span class="line">    _combinedChartView.scaleEnabled = <span class="literal">NO</span>; <span class="comment">// 缩放</span></span><br><span class="line">    _combinedChartView.highlightPerTapEnabled = <span class="literal">NO</span>; <span class="comment">// 单击高亮</span></span><br><span class="line">    _combinedChartView.highlightPerDragEnabled = <span class="literal">NO</span>; <span class="comment">// 拖拽高亮</span></span><br><span class="line">    _combinedChartView.dragEnabled = <span class="literal">YES</span>; <span class="comment">// 拖拽图表</span></span><br><span class="line">    _combinedChartView.dragDecelerationEnabled = <span class="literal">YES</span>; <span class="comment">// 拖拽后是否有惯性效果</span></span><br><span class="line">    _combinedChartView.dragDecelerationFrictionCoef = <span class="number">0.5</span>; <span class="comment">// 拖拽后惯性效果的摩擦系数(0~1)，数值越小，惯性越不明显</span></span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:_combinedChartView];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置 X 轴显示的值的属性 */</span></span><br><span class="line">    ChartXAxis *xAxis = _combinedChartView.xAxis;</span><br><span class="line">    xAxis.labelPosition = XAxisLabelPositionBottom; <span class="comment">// 显示位置</span></span><br><span class="line">    xAxis.drawGridLinesEnabled = <span class="literal">NO</span>; <span class="comment">// 网格绘制</span></span><br><span class="line">    xAxis.axisLineColor = [<span class="built_in">UIColor</span> lightGrayColor]; <span class="comment">// X 轴颜色</span></span><br><span class="line">    xAxis.axisLineWidth = <span class="number">0.5</span>f; <span class="comment">// X 轴线宽</span></span><br><span class="line">    xAxis.labelFont = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">10</span>]; <span class="comment">// 字号</span></span><br><span class="line">    xAxis.labelTextColor = [<span class="built_in">UIColor</span> lightGrayColor]; <span class="comment">// 颜色</span></span><br><span class="line">    xAxis.labelRotationAngle = <span class="number">30</span>; <span class="comment">// 文字倾斜角度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置左侧 Y 轴显示的值的属性 */</span></span><br><span class="line">    ChartYAxis *leftAxis = _combinedChartView.leftAxis;</span><br><span class="line">    leftAxis.labelPosition = YAxisLabelPositionOutsideChart; <span class="comment">// 显示位置</span></span><br><span class="line">    leftAxis.drawGridLinesEnabled = <span class="literal">YES</span>; <span class="comment">// 网格绘制</span></span><br><span class="line">    leftAxis.gridColor = [<span class="built_in">UIColor</span> lightGrayColor]; <span class="comment">// 网格颜色</span></span><br><span class="line">    leftAxis.gridLineWidth = <span class="number">0.5</span>f; <span class="comment">// 网格线宽</span></span><br><span class="line">    leftAxis.drawAxisLineEnabled = <span class="literal">NO</span>; <span class="comment">// 是否显示轴线</span></span><br><span class="line">    leftAxis.labelFont = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">10</span>]; <span class="comment">// 字号</span></span><br><span class="line">    leftAxis.labelTextColor = [<span class="built_in">UIColor</span> lightGrayColor]; <span class="comment">// 颜色</span></span><br><span class="line">    leftAxis.axisMinimum = <span class="number">0</span>; <span class="comment">// 最小值</span></span><br><span class="line">    leftAxis.axisMaximum = <span class="number">500</span>; <span class="comment">// 最大值（不设置会根据数据自动设置）</span></span><br><span class="line">    [leftAxis setLabelCount:<span class="number">6</span> force:<span class="literal">YES</span>]; <span class="comment">// Y 轴段数（会自动分成对应段数）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置右侧 Y 轴显示的值的属性 */</span></span><br><span class="line">    ChartYAxis *rightAxis = _combinedChartView.rightAxis;</span><br><span class="line">    rightAxis.labelPosition = YAxisLabelPositionOutsideChart; <span class="comment">// 显示位置</span></span><br><span class="line">    rightAxis.drawGridLinesEnabled = <span class="literal">NO</span>; <span class="comment">// 网格绘制</span></span><br><span class="line">    rightAxis.drawAxisLineEnabled = <span class="literal">NO</span>; <span class="comment">// 是否显示轴线</span></span><br><span class="line">    rightAxis.labelFont = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">10</span>]; <span class="comment">// 字号</span></span><br><span class="line">    rightAxis.labelTextColor = [<span class="built_in">UIColor</span> lightGrayColor]; <span class="comment">// 颜色</span></span><br><span class="line">    rightAxis.axisMinimum = <span class="number">0</span>; <span class="comment">// 最小值</span></span><br><span class="line">    rightAxis.axisMaximum = <span class="number">100</span>; <span class="comment">// 最大值（不设置会根据数据自动设置）</span></span><br><span class="line">    [rightAxis setLabelCount:<span class="number">6</span> force:<span class="literal">YES</span>]; <span class="comment">// Y 轴段数（会自动分成对应段数）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<h2 id="2-设置柱状图属性"><a href="#2-设置柱状图属性" class="headerlink" title="2. 设置柱状图属性"></a>2. 设置柱状图属性</h2><p>下面将设置柱状图属性与数据进行了封装。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 柱状图的数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param bar1Values 第一段的数据</span></span><br><span class="line"><span class="comment"> @param bar2Values 第二段的数据</span></span><br><span class="line"><span class="comment"> @return 柱状图的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (BarChartData *)getBarData:(<span class="built_in">NSArray</span> *)bar1Values bar2Values:(<span class="built_in">NSArray</span> *)bar2Values &#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *barEntries = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    <span class="keyword">if</span> (bar1Values.count == bar2Values.count) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;bar1Values.count; i++) &#123;</span><br><span class="line">            BarChartDataEntry *barEntry = [[BarChartDataEntry alloc] initWithX:i yValues:@[bar1Values[i], bar2Values[i]]];</span><br><span class="line">            [barEntries addObject:barEntry];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    BarChartDataSet *dataSet = [[BarChartDataSet alloc] initWithValues:barEntries];</span><br><span class="line">    dataSet.colors = @[[<span class="built_in">UIColor</span> greenColor], [<span class="built_in">UIColor</span> blueColor]];</span><br><span class="line">    dataSet.axisDependency = AxisDependencyLeft; <span class="comment">// 根据左边数据显示</span></span><br><span class="line">    dataSet.drawValuesEnabled = <span class="literal">NO</span>; <span class="comment">// 是否显示数据</span></span><br><span class="line">    BarChartData *data = [[BarChartData alloc] initWithDataSets:@[dataSet]];</span><br><span class="line">    data.barWidth = <span class="number">0.55</span>f; <span class="comment">// 柱状图宽度（数值范围 0 ~ 1）</span></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-设置折线图属性"><a href="#3-设置折线图属性" class="headerlink" title="3. 设置折线图属性"></a>3. 设置折线图属性</h2><p>下面将设置折线图属性与数据进行了封装。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取折线图的数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param lineValues 数据放入数组 NSNumber 类型</span></span><br><span class="line"><span class="comment"> @return 折线图的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (LineChartData *)getLineData:(<span class="built_in">NSArray</span> *)lineValues &#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *entries = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lineValues.count; i++) &#123;</span><br><span class="line">        ChartDataEntry *entry = [[ChartDataEntry alloc] initWithX:i y:[lineValues[i] floatValue]];</span><br><span class="line">        [entries addObject:entry];</span><br><span class="line">    &#125;</span><br><span class="line">    LineChartDataSet *dataSet = [[LineChartDataSet alloc] initWithValues:entries];</span><br><span class="line">    dataSet.colors = @[[<span class="built_in">UIColor</span> orangeColor]]; <span class="comment">// 线的颜色</span></span><br><span class="line">    dataSet.lineWidth = <span class="number">0.5</span>f; <span class="comment">// 线宽</span></span><br><span class="line">    dataSet.circleRadius = <span class="number">2.5</span>f; <span class="comment">// 圆点外圆半径</span></span><br><span class="line">    dataSet.circleHoleRadius = <span class="number">1.5</span>f; <span class="comment">// 圆点内圆半径</span></span><br><span class="line">    dataSet.circleColors = @[[<span class="built_in">UIColor</span> orangeColor]]; <span class="comment">// 圆点外圆颜色</span></span><br><span class="line">    dataSet.circleHoleColor = [<span class="built_in">UIColor</span> whiteColor]; <span class="comment">// 圆点内圆颜色</span></span><br><span class="line">    dataSet.axisDependency = AxisDependencyRight; <span class="comment">// 根据右边数据显示</span></span><br><span class="line">    dataSet.drawValuesEnabled = <span class="literal">NO</span>; <span class="comment">// 是否显示数据</span></span><br><span class="line">    dataSet.mode = LineChartModeCubicBezier; <span class="comment">// 折线图类型</span></span><br><span class="line">    dataSet.drawFilledEnabled = <span class="literal">YES</span>; <span class="comment">// 是否显示折线图阴影</span></span><br><span class="line">    <span class="built_in">NSArray</span> *shadowColors = @[(<span class="keyword">id</span>)[[<span class="built_in">UIColor</span> orangeColor] colorWithAlphaComponent:<span class="number">0</span>].CGColor, (<span class="keyword">id</span>)[[<span class="built_in">UIColor</span> orangeColor] colorWithAlphaComponent:<span class="number">0.7</span>].CGColor];</span><br><span class="line">    <span class="built_in">CGGradientRef</span> gradient = <span class="built_in">CGGradientCreateWithColors</span>(<span class="literal">nil</span>, (<span class="built_in">CFArrayRef</span>)shadowColors, <span class="literal">nil</span>);</span><br><span class="line">    dataSet.fill = [ChartFill fillWithLinearGradient:gradient angle:<span class="number">90.0</span>f]; <span class="comment">// 阴影渐变效果</span></span><br><span class="line">    dataSet.fillAlpha = <span class="number">1.0</span>f; <span class="comment">// 阴影透明度</span></span><br><span class="line">    LineChartData *lineData = [[LineChartData alloc] initWithDataSet:dataSet];</span><br><span class="line">    <span class="keyword">return</span> lineData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-设置图表数据"><a href="#4-设置图表数据" class="headerlink" title="4. 设置图表数据"></a>4. 设置图表数据</h2><p>最后通过以下方法就能够设置整个图表的数据。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 设置混合图表的数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param xValues X 轴的数据</span></span><br><span class="line"><span class="comment"> @param bar1Values 柱状图数据1</span></span><br><span class="line"><span class="comment"> @param bar2Values 柱状图数据2</span></span><br><span class="line"><span class="comment"> @param lineValues 折线图数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setXValues:(<span class="built_in">NSArray</span> *)xValues</span><br><span class="line">        bar1Values:(<span class="built_in">NSArray</span> *)bar1Values</span><br><span class="line">        bar2Values:(<span class="built_in">NSArray</span> *)bar2Values</span><br><span class="line">        lineValues:(<span class="built_in">NSArray</span> *)lineValues &#123;</span><br><span class="line">    CombinedChartData *data = [[CombinedChartData alloc] init];</span><br><span class="line">    data.barData = [<span class="keyword">self</span> getBarData:bar1Values bar2Values:bar2Values]; <span class="comment">// 柱状图数据</span></span><br><span class="line">    data.lineData = [<span class="keyword">self</span> getLineData:lineValues]; <span class="comment">// 折线图数据</span></span><br><span class="line">    [_combinedChartView setData:data]; <span class="comment">// 图表数据</span></span><br><span class="line">    ChartXAxis *xAxis = _combinedChartView.xAxis;</span><br><span class="line">    xAxis.axisMinimum = data.xMin - <span class="number">0.5</span>f; <span class="comment">// X 轴最小数量</span></span><br><span class="line">    xAxis.axisMaximum = data.xMax + <span class="number">0.5</span>f; <span class="comment">// X 轴最大数量</span></span><br><span class="line">    xAxis.valueFormatter = [[ChartIndexAxisValueFormatter alloc] initWithValues:xValues]; <span class="comment">// X 轴数据</span></span><br><span class="line">    [_combinedChartView setVisibleXRangeMaximum:<span class="number">7</span>]; <span class="comment">// X 轴最多显示数量（其余可滑动显示）</span></span><br><span class="line">    [_combinedChartView animateWithYAxisDuration:<span class="number">1.0</span>]; <span class="comment">// 添加 Y 轴动画</span></span><br><span class="line">    [_combinedChartView notifyDataSetChanged]; <span class="comment">// 通知数据改变</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外这里有一个坑，在设置 <code>X</code> 轴属性的时候，有个属性是 <code>xAxis.labelWidth</code> ，由于图表好像是自动计算 <code>label</code> 大小的，设置这个属性根本没有任何作用，所以就导致当 <code>X</code> 轴数据文字过长时，就全部挤在一块了，为了解决这个问题，可以在设置 <code>xAxis.valueFormatter</code> 的时候自定义一个 <code>valueFormatter</code> 来设定指定宽度截取，下面是我的自定义。</p>
<p><strong>CustomAxisValueFormatter.h</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CustomAxisValueFormatter</span> : <span class="title">NSObject</span> &lt;<span class="title">IChartAxisValueFormatter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithValues:(<span class="built_in">NSArray</span> *)values labelWidth:(<span class="built_in">CGFloat</span>)labelWidth;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<p><strong>CustomAxisValueFormatter.m</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CustomAxisValueFormatter</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSArray</span> *values;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> labelWidth;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">CustomAxisValueFormatter</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithValues:(<span class="built_in">NSArray</span> *)values labelWidth:(<span class="built_in">CGFloat</span>)labelWidth &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        _values = values;</span><br><span class="line">        _labelWidth = labelWidth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)stringForValue:(<span class="keyword">double</span>)value axis:(ChartAxisBase *)axis &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *result = <span class="string">@&quot;&quot;</span>; <span class="comment">// 根据设置的字符宽度自动截取字符长度</span></span><br><span class="line">    <span class="built_in">NSInteger</span> index = @(value).integerValue;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; _values.count) &#123;</span><br><span class="line">        result = _values[index];</span><br><span class="line">        <span class="keyword">if</span> (_labelWidth &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">UILabel</span> *label = [[<span class="built_in">UILabel</span> alloc] init];</span><br><span class="line">            label.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">10</span>]; <span class="comment">// 这里和 X 轴文字字号设置一样大</span></span><br><span class="line">            label.text = result;</span><br><span class="line">            <span class="keyword">while</span> ([label sizeThatFits:<span class="built_in">CGSizeMake</span>(MAXFLOAT, MAXFLOAT)].width &gt; _labelWidth) &#123;</span><br><span class="line">                result = [result substringToIndex:result.length - <span class="number">1</span>];</span><br><span class="line">                label.text = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%@...&quot;</span>, result];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> label.text;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<p>这是之前设置 <code>xAxis.valueFormatter</code> 的方法。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">xAxis.valueFormatter = [[ChartIndexAxisValueFormatter alloc] initWithValues:xValues];</span><br></pre></td></tr></table></figure>

<p>改为自定义的方法。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">xAxis.valueFormatter = [[CustomAxisValueFormatter alloc] initWithValues:xValues labelWidth:<span class="number">40</span>];</span><br></pre></td></tr></table></figure>

<h2 id="5-设置数据方法"><a href="#5-设置数据方法" class="headerlink" title="5. 设置数据方法"></a>5. 设置数据方法</h2><p>图表的数据全部放入数组中，数字用 <code>NSNumber</code> 类型。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">self</span> setXValues:@[<span class="string">@&quot;X轴数据1&quot;</span>, <span class="string">@&quot;X轴数据2&quot;</span>, <span class="string">@&quot;X轴数据3&quot;</span>] bar1Values:@[<span class="string">@&quot;10&quot;</span>, <span class="string">@&quot;20&quot;</span>, <span class="string">@&quot;30&quot;</span>] bar2Values:@[<span class="string">@&quot;30&quot;</span>, <span class="string">@&quot;20&quot;</span>, <span class="string">@&quot;10&quot;</span>] lineValues:@[<span class="string">@&quot;40&quot;</span>, <span class="string">@&quot;50&quot;</span>, <span class="string">@&quot;60&quot;</span>]];</span><br></pre></td></tr></table></figure>

<p>下面是我们项目做出来的显示效果：</p>
<p><img data-src="https://file.karise.cn/blog/20190509163350.png" alt="图表显示效果"></p>
<blockquote>
<p>其实 <code>CombinedChartView</code> 混合图表只是将 <code>BarChartView</code> 柱状图和 <code>LineChartView</code> 折线图合在一起了，设置还是分开设置的，所以不管是柱状图还是折线图，都可以参照上面来设置。</p>
</blockquote>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>Charts</tag>
        <tag>CombinedChart</tag>
        <tag>BarChart</tag>
        <tag>LineChart</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】Git 中无法忽略 .xcuserstate 的解决方法</title>
    <url>/2017/08/15/iOS/201708151124/</url>
    <content><![CDATA[<blockquote>
<p>在平时的 <code>iOS</code> 开发中使用 <code>Git</code> 时会遇到这样的问题，明明在 <code>.gitignore</code> 文件中添加了 <code>.xcuserstate</code> 忽略，之后每次 <code>push</code> 时文件改动中还是会出现 <code>UserInterfaceState.xcuserstate</code> 文件，下面是解决方法。</p>
</blockquote>
<a id="more"></a>

<hr>
<ul>
<li>打开终端，<code>cd</code> 到你的项目文件夹下，然后输入以下命令。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<ul>
<li>然后会显示 <code>UserInterfaceState.xcuserstate</code> 文件有改动，这时候复制 <code>modified:</code> 后面的地址。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509163409.png" alt="git status"></p>
<ul>
<li>接着输入 <code>git rm --cached 刚才复制的地址</code> ，如下。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git rm --cached client_swift_fm_a/client_swift_fm_a.xcworkspace/xcuserdata/Jonzzs.xcuserdatad/UserInterfaceState.xcuserstate</span><br></pre></td></tr></table></figure>

<ul>
<li>接着将代码提交推送到服务器。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;删除xcuserstate文件&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<ul>
<li>之后再提交时就不会出现 <code>UserInterfaceState.xcuserstate</code> 文件了，要注意路径不能弄错，否则会报错。</li>
</ul>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>iOS 开发</tag>
        <tag>iOS 开发问题</tag>
        <tag>gitignore</tag>
        <tag>xcuserstate</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】Swift 常用的 CocoaPods 开源库收集</title>
    <url>/2017/08/15/iOS/201708151653/</url>
    <content><![CDATA[<blockquote>
<p>在平时的 <code>iOS</code> 开发过程中，少不了要使用很多的框架，一个适合的框架能够将开发效率提高几倍，这里将一些不错的 <code>Swift</code> 框架收集起来，有需要的可以收藏一下。</p>
</blockquote>
<a id="more"></a>

<hr>
<h1 id="弹框提示"><a href="#弹框提示" class="headerlink" title="弹框提示"></a>弹框提示</h1><h2 id="XLActionController-选择框"><a href="#XLActionController-选择框" class="headerlink" title="XLActionController - 选择框"></a><a href="https://github.com/xmartlabs/XLActionController">XLActionController - 选择框</a></h2><p><strong>★ Star：2088</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509170038.png" alt="XLActionController"></p>
<p><code>XLActionController</code> 是一个支持各种自定义的底部选择框。</p>
<hr>
<h2 id="SCLAlertView-提示框"><a href="#SCLAlertView-提示框" class="headerlink" title="SCLAlertView - 提示框"></a><a href="https://github.com/vikmeup/SCLAlertView-Swift">SCLAlertView - 提示框</a></h2><p><strong>★ Star：3937</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509170052.png" alt="SCLAlertView"></p>
<p><code>SCLAlertView</code> 是一个非常漂亮的提示框，<code>Swift</code> 和 <code>OC</code> 都有，<code>OC</code> 版本点击 <a href="https://github.com/dogo/SCLAlertView">这里</a> 。</p>
<p><strong>参考文章：</strong></p>
<p><a href="http://www.jianshu.com/p/730f1eca2b4b"><em>SCLAlertView</em>(提醒框)的基本使用(swift)</a></p>
<hr>
<h2 id="PopupDialog-提示框"><a href="#PopupDialog-提示框" class="headerlink" title="PopupDialog - 提示框"></a><a href="https://github.com/Orderella/PopupDialog">PopupDialog - 提示框</a></h2><p><strong>★ Star：2056</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509170110.png" alt="PopupDialog"></p>
<p><img data-src="https://file.karise.cn/blog/20190509170127.png" alt="预览图"></p>
<p><code>PopupDialog</code> 是一个非常不错的 <code>AlertView</code> 框架，支持各种自定义。</p>
<hr>
<h2 id="SwiftMessages-信息提示"><a href="#SwiftMessages-信息提示" class="headerlink" title="SwiftMessages - 信息提示"></a><a href="https://github.com/SwiftKickMobile/SwiftMessages">SwiftMessages - 信息提示</a></h2><p><strong>★ Star：2293</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509170144.png" alt="SwiftMessages"></p>
<p><code>SwiftMessages</code> 是一个信息提示框架，可以自定义提示位置和样式。</p>
<hr>
<h2 id="AMPopTip-文字提示"><a href="#AMPopTip-文字提示" class="headerlink" title="AMPopTip - 文字提示"></a><a href="https://github.com/andreamazz/AMPopTip">AMPopTip - 文字提示</a></h2><p><strong>★ Star：1878</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509170200.png" alt="AMPopTip"></p>
<p><code>AMPopTip</code> 是一个漂亮的气泡文字提示框架，并且支持 <code>Objective-C</code> 和 <code>Swift</code> 。</p>
<hr>
<h2 id="EasyTipView-文字提示"><a href="#EasyTipView-文字提示" class="headerlink" title="EasyTipView - 文字提示"></a><a href="https://github.com/teodorpatras/EasyTipView">EasyTipView - 文字提示</a></h2><p><strong>★ Star：1621</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509170213.png" alt="EasyTipView"></p>
<p><code>EasyTipView</code> 是一个完全可自定义的提示视图框架。</p>
<hr>
<h1 id="动画框架"><a href="#动画框架" class="headerlink" title="动画框架"></a>动画框架</h1><h2 id="Hero-过渡动画"><a href="#Hero-过渡动画" class="headerlink" title="Hero - 过渡动画"></a><a href="https://github.com/lkzhao/Hero">Hero - 过渡动画</a></h2><p><strong>★ Star：10098</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509170227.png" alt="Hero"></p>
<p><code>Hero</code> 是为了构建 <code>iOS</code> 试图控制器过渡动画的库，它在 <code>UIKit</code> 繁琐的过渡动画 <code>API</code> 之上提供了一个层，使得自定义过渡动画对于开发人员来说是一个轻松的任务。</p>
<p><strong>参考文章：</strong></p>
<p><a href="http://www.jianshu.com/p/fdab69f7440a">(<em>IOS</em>) 向<em>Hero</em>致敬與分析 (一) - Double研究所</a></p>
<p><a href="http://www.jianshu.com/p/a7012ec2c5e5">(<em>IOS</em>) 向<em>Hero</em>致敬與分析 (二) - Double研究所</a></p>
<hr>
<h2 id="EasyAnimation-简单动画"><a href="#EasyAnimation-简单动画" class="headerlink" title="EasyAnimation - 简单动画"></a><a href="https://github.com/icanzilb/EasyAnimation">EasyAnimation - 简单动画</a></h2><p><strong>★ Star：2449</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509170241.png" alt="EasyAnimation"></p>
<p>在动画实现过程中，一个看似简单的效果往往需要大量的代码，尤其是作用于 <code>layer</code> 上的动画，为此有了 <code>EasyAnimation</code> 这个库，这个库可以将 <code>Layer Animations</code> 写成 <code>View Animations</code> 的样式。</p>
<p><strong>参考文章：</strong></p>
<p><a href="http://www.jianshu.com/p/6af8a7a8a15a">iOS动画指南 - 1.View Animations</a></p>
<p><a href="http://www.jianshu.com/p/1d5a528053aa">iOS动画指南 - 2.Layer Animations的基本使用</a></p>
<p><a href="http://www.jianshu.com/p/a539a5fd3000">iOS动画指南 - 3.Layer Animations的进阶使用</a></p>
<p><a href="http://www.jianshu.com/p/77386607fd32">iOS动画指南 - 4.右拉的3D抽屉效果</a></p>
<p><a href="http://www.jianshu.com/p/86d414ec8f3a">iOS动画指南 - 5.下雪的粒子效果、帧动画</a></p>
<p><a href="http://www.jianshu.com/p/802d47f0f311">iOS动画指南 - 6.可以很酷的转场动画</a></p>
<p><a href="http://www.jianshu.com/p/9ee292b5b695">iOS动画指南 - 7.简化动画实现的EasyAnimation库</a></p>
<hr>
<h2 id="Spring-动画框架"><a href="#Spring-动画框架" class="headerlink" title="Spring - 动画框架"></a><a href="https://github.com/MengTo/Spring">Spring - 动画框架</a></h2><p><strong>★ Star：11134</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509170306.png" alt="Spring"></p>
<p><code>Spring</code> 是一个使用非常简单的动画框架。</p>
<hr>
<h2 id="PeekPop-3D-Touch-动画"><a href="#PeekPop-3D-Touch-动画" class="headerlink" title="PeekPop - 3D Touch 动画"></a><a href="https://github.com/marmelroy/PeekPop">PeekPop - 3D Touch 动画</a></h2><p><strong>★ Star：1836</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509170320.png" alt="PeekPop"></p>
<p><code>PeekPop</code> 是一个 <code>3D Touch</code> 动画框架。</p>
<hr>
<h2 id="Animations-动画库"><a href="#Animations-动画库" class="headerlink" title="Animations - 动画库"></a><a href="https://github.com/YouXianMing/Swift-Animations">Animations - 动画库</a></h2><p><strong>★ Star：2184</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509170332.gif" alt="Animations"></p>
<p><code>Animations</code> 不是一个 <code>CocoaPods</code> 库，但是其中写了很多关于各种动画的 <code>Demo</code> 页面，很多都是经常用到的页面，页面效果写的非常棒，<code>Swift</code> 和 <code>Objective-C</code> 版本都有，<code>Objective-C</code> 版本点击 <a href="https://github.com/YouXianMing/Animations">这里</a> 。</p>
<hr>
<h1 id="图片显示"><a href="#图片显示" class="headerlink" title="图片显示"></a>图片显示</h1><h2 id="Kingfisher-网络图片"><a href="#Kingfisher-网络图片" class="headerlink" title="Kingfisher - 网络图片"></a><a href="https://github.com/onevcat/Kingfisher">Kingfisher - 网络图片</a></h2><p><strong>★ Star：9333</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509170345.png" alt="Kingfisher"></p>
<p><code>Kingfisher</code> 是一个轻量、纯 <code>Swift</code> 的库，可以从网络中异步下载和缓存图片，相当于 <code>Swift </code> 版的 <code>SDWebImage</code> 。</p>
<p><strong>参考文章：</strong></p>
<p><a href="http://project.onevcat.com/">Kingfisher 中文简介</a></p>
<p><a href="http://www.jianshu.com/p/a47fefeed7f0">Kingfisher 3.x 学习（一）</a></p>
<p><a href="http://www.jianshu.com/p/03b6b66b5103">Kingfisher 3.x 学习（二）</a></p>
<hr>
<h2 id="Onboard-导航页"><a href="#Onboard-导航页" class="headerlink" title="Onboard - 导航页"></a><a href="https://github.com/mamaral/Onboard">Onboard - 导航页</a></h2><p><strong>★ Star：5676</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509170400.gif" alt="Onboard"></p>
<p><code>Onboard</code> 是一个导航页框架，只需几行代码，即可轻松创建漂亮，引人入胜的用户指导页体验。</p>
<p><strong>参考文章：</strong></p>
<p><a href="https://segmentfault.com/a/1190000004039340">Onboard,迷人的引导页样式制作库</a></p>
<p><a href="http://www.jianshu.com/p/cb098ee6dc90">优美整洁的引导页大神框架<em>Onboard</em></a></p>
<hr>
<h2 id="FSPagerView-图片轮播"><a href="#FSPagerView-图片轮播" class="headerlink" title="FSPagerView - 图片轮播"></a><a href="https://github.com/WenchaoD/FSPagerView">FSPagerView - 图片轮播</a></h2><p><strong>★ Star：1816</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509170417.png" alt="FSPagerView"></p>
<p><code>FSPagerView</code> 是一款基于 <code>UICollectionView</code> 实现的多功能轮播器，具有以下特点：</p>
<ul>
<li>支持无限轮播和自动轮播。</li>
<li>丰富的内置 <code>3D / 2D</code> 切换效果。</li>
<li>带有预定义的轮播图单元格，支持完全自定义单元格。</li>
<li>支持在 <code>Swift</code> 和 <code>Objective-C</code> 两种语言中使用。</li>
<li>支持完全自定义的 <code>Page Control</code> 。</li>
</ul>
<hr>
<h2 id="TZImagePickerController-图片选择器"><a href="#TZImagePickerController-图片选择器" class="headerlink" title="TZImagePickerController - 图片选择器"></a><a href="https://github.com/banchichen/TZImagePickerController">TZImagePickerController - 图片选择器</a></h2><p><strong>★ Star：3808</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509170431.png" alt="TZImagePickerController"></p>
<p><code>TZImagePickerController</code> 是一个支持多选、选原图和视频的图片选择器，同时有预览、裁剪功能。</p>
<hr>
<h2 id="ZLPhotoBrowser-图片选择器"><a href="#ZLPhotoBrowser-图片选择器" class="headerlink" title="ZLPhotoBrowser - 图片选择器"></a><a href="https://github.com/longitachi/ZLPhotoBrowser">ZLPhotoBrowser - 图片选择器</a></h2><p><strong>★ Star：1276</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509170447.png" alt="ZLPhotoBrowser"></p>
<p><img data-src="https://file.karise.cn/blog/20190509170500.png" alt="预览图"></p>
<p><code>ZLPhotoBrowser </code> 是一个方便易用的相册多选框架，支持预览/相册内拍照、预览快速多选照片，<code>3DTouch</code> 预览照片，编辑裁剪图片，编辑视频，混合多选 <code>image、gif、Live Photo 及 video</code> ，相册混合选择，原图功能，支持多语言国际化（中文简/繁，英语，日语），在线下载 <code>iCloud</code> 端图片，自定义最大选择量及最大预览量，自定义照片升序降序排列，自定义照片显示圆角弧度，支持预览网络及本地图片。</p>
<p><strong>功能介绍：</strong></p>
<ul>
<li>支持横竖屏 (已适配 <code>iPhone X</code>)</li>
<li>预览快速选择、可设置预览最大数</li>
<li>直接进入相册选择</li>
<li>支持滑动多选</li>
<li>裁剪图片(可自定义裁剪比例)</li>
<li>编辑视频</li>
<li>查看、选择 <code>gif、LivePhoto(iOS9.0)、video</code></li>
<li><code>3D Touch</code> 预览 <code>image、gif、LivePhoto、video</code></li>
<li>混合选择 <code>image、gif、livePhoto、video</code></li>
<li>在线下载 <code>iCloud</code> 照片</li>
<li>控制选择 <code>video</code> 最大时长</li>
<li>多语言国际化(中文简/繁、英文、日文)</li>
<li>相册内拍照按钮实时显示镜头捕捉画面</li>
<li>已选择图片遮罩层标记</li>
<li>预览已选择照片</li>
<li>预览网络及本地照片(支持长按保存至相册)</li>
<li>相册内图片自定义圆角弧度</li>
<li>自定义升序降序排列</li>
<li>多张拍照</li>
</ul>
<hr>
<h2 id="CBPic2ker-图片选择器"><a href="#CBPic2ker-图片选择器" class="headerlink" title="CBPic2ker - 图片选择器"></a><a href="https://github.com/cbangchen/CBPic2ker">CBPic2ker - 图片选择器</a></h2><p><strong>★ Star：225</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509170521.gif" alt="CBPic2ker"></p>
<p><code>CBPic2ker</code> 是一个简单的 <code>iOS</code> 照片选择器，界面非常简洁。</p>
<hr>
<h2 id="PYPhotoBrowser-图片浏览器"><a href="#PYPhotoBrowser-图片浏览器" class="headerlink" title="PYPhotoBrowser - 图片浏览器"></a><a href="https://github.com/iphone5solo/PYPhotoBrowser">PYPhotoBrowser - 图片浏览器</a></h2><p><strong>★ Star：1574</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509170617.gif" alt="预览图"></p>
<p><code>PYPhotoBrowser</code> 是一个 <code>iOS</code> 中使用简单的图片浏览器，支持流水布局 、 线性布局，支持单击 、双击 、捏合 、旋转、拖拽、侧滑手势，主要用于社交  <code>App</code> ，用于呈现一组图片。</p>
<hr>
<h1 id="颜色管理"><a href="#颜色管理" class="headerlink" title="颜色管理"></a>颜色管理</h1><h2 id="Chameleon-颜色框架"><a href="#Chameleon-颜色框架" class="headerlink" title="Chameleon - 颜色框架"></a><a href="https://github.com/ViccAlexander/Chameleon">Chameleon - 颜色框架</a></h2><p><strong>★ Star：9722</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509170707.png" alt="Chameleon"></p>
<p><code>Chameleon</code> 是一个轻量却功能强大的 <code>iOS</code> （支持 <code>Objective-C</code> 和 <code>Swift</code>）颜色框架软件，它基于的理念是：软件应用程序应该可以不费力气且同时保持多个漂亮的界面，使用 <code>Chameleon</code> ，你不再需要调配 <code>RGB</code> 值，不用浪费时间去找你的 <code>APP</code> 合适的颜色组合，也不用担心你 <code>APP</code> 的文字是否能在不同背景色上可读。</p>
<p><strong>参考文章：</strong></p>
<p><a href="http://www.jianshu.com/p/15008c8eed4f"><em>Chameleon</em>——轻量级 iOS 颜色框架</a></p>
<hr>
<h2 id="DynamicColor-颜色框架"><a href="#DynamicColor-颜色框架" class="headerlink" title="DynamicColor - 颜色框架"></a><a href="https://github.com/yannickl/DynamicColor">DynamicColor - 颜色框架</a></h2><p><strong>★ Star：1664</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509170720.png" alt="DynamicColor"></p>
<p><code>DynamicColor</code> 是一个用于操作颜色的 <code>Swift</code> 扩展。</p>
<hr>
<h1 id="权限请求"><a href="#权限请求" class="headerlink" title="权限请求"></a>权限请求</h1><h2 id="PermissionScope-系统权限请求"><a href="#PermissionScope-系统权限请求" class="headerlink" title="PermissionScope - 系统权限请求"></a><a href="https://github.com/nickoneill/PermissionScope">PermissionScope - 系统权限请求</a></h2><p><strong>★ Star：4457</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509170735.png" alt="PermissionScope"></p>
<p><code>PermissionScope</code> 是一个请求权限的封装库，可以很方便的请求系统的权限。它不只包含简单的权限请求 <code>UI</code> ，还有统一的权限 <code>API</code> 可以告诉你任意给定的系统权限的状态，当然也可以轻松地请求它们。</p>
<p><strong>参考文章：</strong></p>
<p><a href="http://www.jianshu.com/p/c9aa0a0ae2c4">【第三方库初级使用系列】PermissionScope的使用方法</a></p>
<hr>
<h2 id="RequestPermission-权限请求"><a href="#RequestPermission-权限请求" class="headerlink" title="RequestPermission - 权限请求"></a><a href="https://github.com/IvanVorobei/RequestPermission">RequestPermission - 权限请求</a></h2><p><strong>★ Star：1556</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509170748.png" alt="RequestPermission"></p>
<p><img data-src="https://file.karise.cn/blog/20190509170803.gif" alt="预览图"></p>
<p><code>RequestPermission</code> 是关于使用可定制的视觉效果管理权限，美丽的对话增加了批准的机会，这在我们要求通知时很重要，该模块的简单控制可节省开发时间，您可以开始使用这个项目，只需两行代码就能轻松自定义。</p>
<hr>
<h1 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h1><h2 id="Alamofire-网络请求"><a href="#Alamofire-网络请求" class="headerlink" title="Alamofire - 网络请求"></a><a href="https://github.com/Alamofire/Alamofire">Alamofire - 网络请求</a></h2><p><strong>★ Star：24794</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509170838.png" alt="Alamofire"></p>
<ul>
<li><p><code>Alamofire</code> 的前身是 <code>AFNetworking</code> ，<code>AFNetworking</code> 是 <code>iOS</code> 和 <code>OS X</code> 上很受欢迎的第三方 <code>HTTP</code> 网络基础库。</p>
</li>
<li><p>其实 <code>AFNetworking </code> 的前缀 <code>AF</code> 便是 <code>Alamofire</code> 的缩写。</p>
</li>
<li><p><code>Swift</code> 发布后，<code>AFNetworking</code> 的作者又用 <code>Swift</code> 语言写了个相同功能的库，这便是 <code>Alamofire</code> 。</p>
</li>
<li><p><code>Alamofire</code> 本质是基于 <code>URLSession</code> ，并做了封装。使用 <code>Alamofire</code> 可以让我们网络请求相关代码（如 <code>获取数据</code> ，<code>提交数据</code> ，<code>上传文件</code> ，<code>下载文件</code> 等）更加简洁易用。</p>
</li>
</ul>
<p><strong>参考文章：</strong></p>
<p><a href="http://www.hangge.com/blog/cache/detail_970.html">Swift - HTTP网络操作库Alamofire使用详解1（配置，以及数据请求）</a></p>
<p><a href="http://www.hangge.com/blog/cache/detail_971.html">Swift - HTTP网络操作库Alamofire使用详解2（文件上传）</a></p>
<p><a href="http://www.hangge.com/blog/cache/detail_972.html">Swift - HTTP网络操作库Alamofire使用详解3（文件下载，断点续传）</a></p>
<p><a href="http://www.hangge.com/blog/cache/detail_973.html">Swift - HTTP网络操作库Alamofire使用详解4（用户权限认证）</a></p>
<hr>
<h2 id="HandyJSON-JSON-模型转化"><a href="#HandyJSON-JSON-模型转化" class="headerlink" title="HandyJSON - JSON 模型转化"></a><a href="https://github.com/alibaba/HandyJSON">HandyJSON - JSON 模型转化</a></h2><p><strong>★ Star：1231</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509170902.png" alt="JSON"></p>
<p><code>HandyJSON</code> 是一个用于 <code>Swift</code> 语言中的 <code>JSON</code> 序列化 / 反序列化库，相当于 <code>Swift</code> 版的 <code>MJExtension</code> 和 <code>YYModel</code> ，能够将 <code>JSON</code> 和 <code>模型</code> 相互转化，可以和 <code>Alamofire </code> 搭配使用。</p>
<p><strong>模型转 JSON（序列化）</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">HandyJSON</span> </span>&#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String!</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int!</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="type">Person</span>()</span><br><span class="line">person.name = <span class="string">&quot;张三&quot;</span></span><br><span class="line">person.age = <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(person.toJSON()!) <span class="comment">// 转换成 Dictionary 字典</span></span><br><span class="line"><span class="built_in">print</span>(person.toJSONString()!) <span class="comment">// 转换成 JSON 字符串</span></span><br><span class="line"><span class="built_in">print</span>(person.toJSONString(prettyPrint: <span class="literal">true</span>)!) <span class="comment">// 转换成有格式的 JSON 字符串</span></span><br></pre></td></tr></table></figure>

<p><strong>JSON 转模型（反序列化）</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> json: <span class="type">NSDictionary</span> = [<span class="string">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">20</span>]; <span class="comment">// 可以是 JSON 字符串，也可以是字典（只能 NSDictionary）</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> person = <span class="type">Person</span>.deserialize(from: json) &#123;</span><br><span class="line">    <span class="built_in">print</span>(person.name)</span><br><span class="line">    <span class="built_in">print</span>(person.age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="SwiftyJSON-JSON-解析"><a href="#SwiftyJSON-JSON-解析" class="headerlink" title="SwiftyJSON - JSON 解析"></a><a href="https://github.com/SwiftyJSON/SwiftyJSON">SwiftyJSON - JSON 解析</a></h2><p><strong>★ Star：15207</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509170915.png" alt="JSON"></p>
<p><code>SwiftyJSON</code> 是个使用 <code>Swift</code> 语言编写的开源库，可以让我们很方便地处理 <code>JSON</code> 数据（解析数据、生成数据），和 <code>HandyJSON</code> 有着完全不同的作用，是将 <code>iOS</code> 自带的 <code>JSONSerialization</code> 大大的简化了。</p>
<p><strong>JSONSerialization 复杂代码</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> dataArray = <span class="keyword">try</span>? <span class="type">JSONSerialization</span>.jsonObject(with: data, options: .allowFragments) <span class="keyword">as</span>? [[<span class="type">String</span>: <span class="type">Any</span>]],</span><br><span class="line">    <span class="keyword">let</span> user = dataArray[<span class="number">0</span>][<span class="string">&quot;user&quot;</span>] <span class="keyword">as</span>? [<span class="type">String</span>: <span class="type">Any</span>],</span><br><span class="line">    <span class="keyword">let</span> name = user[<span class="string">&quot;name&quot;</span>] <span class="keyword">as</span>? <span class="type">String</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>SwiftyJSON 简化代码</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> json = <span class="type">JSON</span>(data: data)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> name = json[<span class="number">0</span>][<span class="string">&quot;user&quot;</span>][<span class="string">&quot;name&quot;</span>].string &#123;</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>SwiftyJSON</code> 还有一个能够和 <code>Alamofire</code> 配套使用的库：<a href="https://github.com/SwiftyJSON/Alamofire-SwiftyJSON">Alamofire-SwiftyJSON</a> ，能够直接将 <code>Alamofire </code> 请求到的数据转换成 <code>SwiftyJSON </code> 。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Alamofire</span>.request(<span class="type">URL</span>, method: .<span class="keyword">get</span>, parameters: parameters, encoding: <span class="type">URLEncoding</span>.<span class="keyword">default</span>).responseSwiftyJSON &#123; dataResponse <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(dataResponse.request)</span><br><span class="line">    <span class="built_in">print</span>(dataResponse.response)</span><br><span class="line">    <span class="built_in">print</span>(dataResponse.error)</span><br><span class="line">    <span class="built_in">print</span>(dataResponse.value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>参考文章：</strong></p>
<p><a href="http://www.hangge.com/blog/cache/detail_968.html">Swift - SwiftyJSON的使用详解（附样例，用于JSON数据处理）</a></p>
<hr>
<h2 id="Moya-抽象网络层"><a href="#Moya-抽象网络层" class="headerlink" title="Moya - 抽象网络层"></a><a href="https://github.com/Moya/Moya">Moya - 抽象网络层</a></h2><p><strong>★ Star：6718</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509170936.png" alt="Moya"></p>
<p><code>Moya</code> 是你的 <code>App</code> 中缺失的网络层。不用再去想在哪儿或者如何安放网络请求，<code>Moya</code> 替你管理。<code>Moya</code> 是一个基于 <code>Alamofire</code> 的 <code>Networking library</code>，并且添加了对于 <code>ReactiveCocoa</code> 和 <code>RxSwift</code> 的接口支持，大大简化了开发过程，是 <code>Reactive Functional Programming</code> 的网络层首选。</p>
<p><strong>参考文章：</strong></p>
<p><a href="http://www.jianshu.com/p/c1494681400b">如何写出最简洁优雅的网络封装 Moya + RxSwift</a></p>
<p><a href="http://www.jianshu.com/p/178b6e24ba7e">用 RxSwift + Moya 写出优雅的网络请求代码</a></p>
<hr>
<h1 id="简化编程"><a href="#简化编程" class="headerlink" title="简化编程"></a>简化编程</h1><h2 id="ReactiveCocoa-响应式编程"><a href="#ReactiveCocoa-响应式编程" class="headerlink" title="ReactiveCocoa - 响应式编程"></a><a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa - 响应式编程</a></h2><p><strong>★ Star：17694</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509170947.png" alt="ReactiveCocoa"></p>
<p><code>RactiveCocoa</code> 简称 <code>RAC</code> ，是 <code>Github</code> 的一个开源框架，能够帮我们提供大量方便的事件处理方案，让我们更简单粗暴地去处理事件，现在分为 <a href="https://github.com/ReactiveCocoa/ReactiveObjC">ReactiveObjC</a> 和 <a href="https://github.com/ReactiveCocoa/ReactiveSwift">ReactiveSwift</a> ，两个框架的功能使用相似。</p>
<p><strong>参考文章：</strong></p>
<p><a href="http://www.jianshu.com/p/0845b1a07bfa">ReactiveObjC（RAC）的使用汇总</a></p>
<p><a href="http://www.jianshu.com/p/a9d92d8db828">Hello ReactiveSwift(1): 概述 ——(简译)</a></p>
<p><a href="http://www.jianshu.com/p/eeb12540405c">Hello ReactiveSwift(2): 示例：在线搜索 ——(简译)</a></p>
<p><a href="http://www.jianshu.com/p/e78770847cc8">Hello ReactiveSwift(3): 基本操作 ——(简译)</a></p>
<p><a href="http://www.jianshu.com/p/7a24488c94c4">Hello ReactiveSwift(4): 框架概述 ——(简译)</a></p>
<p><a href="http://www.jianshu.com/p/ec4e248a56a6">Hello ReactiveSwift(5): 调试技术 ——(简译)</a></p>
<hr>
<h2 id="RxSwift-响应式编程"><a href="#RxSwift-响应式编程" class="headerlink" title="RxSwift - 响应式编程"></a><a href="https://github.com/ReactiveX/RxSwift">RxSwift - 响应式编程</a></h2><p><strong>★ Star：10382</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171004.png" alt=" RxSwift"></p>
<p><code>RxSwift</code> 也是一个响应式编程的框架，想了解它与 <code>ReactiveCocoa</code> 的区别，可以看这篇文章：<a href="http://www.jianshu.com/p/2f83b766a081">iOS响应式编程：ReactiveCocoa vs RxSwift 选谁好</a> 。</p>
<p><strong>参考文章：</strong></p>
<p><a href="http://www.jianshu.com/p/76211eed0ab3">[整理]RxSwift完全入坑手册</a></p>
<p><a href="http://www.jianshu.com/p/992f8687fefd">RxSwift的学习之路（一）——Observable</a></p>
<p><a href="http://www.jianshu.com/p/6ce9cae4f410">RxSwift的学习之路（二）——Subjects</a></p>
<p><a href="http://www.jianshu.com/p/1a78c33e1e71">RxSwift文档翻译1-Creating and Subscribing to Observables</a></p>
<p><a href="http://www.jianshu.com/p/2e0fcaa29530">RxSwift文档翻译2–Working with Subjects</a></p>
<p><a href="http://www.jianshu.com/p/ea21ed8a7c84">RxSwift文档翻译3 –Combination Operators</a></p>
<p><a href="http://www.jianshu.com/p/c1fdc8f10c44">RxSwift文档翻译4– Transforming Operators</a></p>
<p><a href="http://www.jianshu.com/p/0c36b000a18f">RxSwift文档翻译5 – Filtering and Conditional Operators</a></p>
<p><a href="http://www.jianshu.com/p/1eff6bc93fd2">RxSwift文档翻译6 – Mathematical and Aggregate Operators</a></p>
<p><a href="http://www.jianshu.com/p/23eedb3951d3">RxSwift文档翻译7 - Connectable Operators【待定】</a></p>
<p><a href="http://www.jianshu.com/p/fcc71d94ae7a">RxSwift文档翻译8 - Error Handling Operators</a></p>
<p><a href="http://www.jianshu.com/p/75aefe7dc484">RxSwift文档翻译9 - Debugging Operators</a></p>
<hr>
<h2 id="PromiseKit-异步编程"><a href="#PromiseKit-异步编程" class="headerlink" title="PromiseKit - 异步编程"></a><a href="https://github.com/mxcl/PromiseKit">PromiseKit - 异步编程</a></h2><p><strong>★ Star：8060</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171021.png" alt="PromiseKit"></p>
<p><code>PromiseKit</code> 是一个异步编程类库，提供了很多实用的异步函数，让异步编程更简单。</p>
<p><strong>参考文章：</strong></p>
<p><a href="http://www.jianshu.com/p/18e35e1154a8"><em>PromiseKit</em> 使用</a></p>
<hr>
<h2 id="Material-材料设计库"><a href="#Material-材料设计库" class="headerlink" title="Material - 材料设计库"></a><a href="https://github.com/CosmicMind/Material">Material - 材料设计库</a></h2><p><strong>★ Star：8324</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171034.png" alt="Material"></p>
<p><code>Material</code> 是一个用于创建漂亮应用程序的材料设计库，就如同它的名字一样，其中包含了大多数开发中需要的控件，并且也提供了非常多基础类的扩展，能够大大的简化我们的代码。</p>
<hr>
<h2 id="EZSwiftExtensions-扩展"><a href="#EZSwiftExtensions-扩展" class="headerlink" title="EZSwiftExtensions - 扩展"></a><a href="https://github.com/goktugyil/EZSwiftExtensions">EZSwiftExtensions - 扩展</a></h2><p><strong>★ Star：2163</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171046.png" alt="EZSwiftExtensions"></p>
<p><code>EZSwiftExtensions</code> 对 <code>Swift</code> 标准库、 <code>Foundation</code> 、 <code>UIKit</code> 提供了很多高级扩展函数。</p>
<p>下面举几个例子，具体用法在 <code>GitHub</code> 上都有。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = [<span class="string">&quot;charmander&quot;</span>,<span class="string">&quot;bulbasaur&quot;</span>,<span class="string">&quot;squirtle&quot;</span>,<span class="string">&quot;charmander&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(myArray.<span class="keyword">get</span>(<span class="number">1</span>)) <span class="comment">// &quot;bulbasaur&quot;</span></span><br><span class="line"><span class="built_in">print</span>(myArray.random()) <span class="comment">// 数组中随机一个</span></span><br><span class="line"><span class="built_in">print</span>(myArray.indexesOf(<span class="string">&quot;charmander&quot;</span>)) <span class="comment">// [0,3]</span></span><br><span class="line"><span class="built_in">print</span>(myArray.containsArray([<span class="string">&quot;charmander&quot;</span>,<span class="string">&quot;bulbasaur&quot;</span>])) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">print</span>(myArray.containsArray([<span class="string">&quot;string&quot;</span>])) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myView = <span class="type">UIView</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, w: <span class="number">100</span>, h: <span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(myView.frame) <span class="comment">// (0.0, 0.0, 100.0, 100.0)</span></span><br><span class="line"><span class="built_in">print</span>(myView.x) <span class="comment">// 0.0</span></span><br><span class="line"><span class="built_in">print</span>(myView.y) <span class="comment">// 0.0</span></span><br><span class="line"><span class="built_in">print</span>(myView.w) <span class="comment">// 100.0</span></span><br><span class="line"><span class="built_in">print</span>(myView.h) <span class="comment">// 100.0</span></span><br><span class="line">myView.x = <span class="number">115</span> <span class="comment">// 还可以改变数值</span></span><br><span class="line"><span class="built_in">print</span>(myView.x) <span class="comment">// 115.0</span></span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myColor = <span class="type">UIColor</span>(r: <span class="number">100</span>, g: <span class="number">100</span>, b: <span class="number">100</span>) <span class="comment">// 默认 alpha 为 1</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="开发调试"><a href="#开发调试" class="headerlink" title="开发调试"></a>开发调试</h1><h2 id="Dotzu-调试工具"><a href="#Dotzu-调试工具" class="headerlink" title="Dotzu - 调试工具"></a><a href="https://github.com/remirobert/Dotzu">Dotzu - 调试工具</a></h2><p><strong>★ Star：1166</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171059.png" alt="Dotzu"></p>
<p><img data-src="https://file.karise.cn/blog/20190509171112.gif" alt="预览图"></p>
<p><code>Dotzu</code> 是一个应用内 <code>iOS</code> 调试工具，具有增强的日志记录，网络信息，崩溃报告等，并且也有 <code>Objective-C</code> 版本点击 <a href="https://github.com/remirobert/Dotzu-Objective-c">这里</a> 。</p>
<hr>
<h2 id="GDPerformanceView-实时-FPS-和-CPU-用量"><a href="#GDPerformanceView-实时-FPS-和-CPU-用量" class="headerlink" title="GDPerformanceView - 实时 FPS 和 CPU 用量"></a><a href="https://github.com/dani-gavrilov/GDPerformanceView-Swift">GDPerformanceView - 实时 FPS 和 CPU 用量</a></h2><p><strong>★ Star：1494</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171127.png" alt="GDPerformanceView"></p>
<p><code>GDPerformanceView</code> 可以在状态栏上方显示 <code>FPS</code> 、<code>CPU</code> 使用情况、<code>App</code> 和 <code>iOS</code> 版本，并通过 <code>Delegate</code> 报告 <code>FPS</code> 和 <code>CPU</code> 使用情况。</p>
<hr>
<h1 id="扫二维码"><a href="#扫二维码" class="headerlink" title="扫二维码"></a>扫二维码</h1><h2 id="swiftScan-二维码扫描"><a href="#swiftScan-二维码扫描" class="headerlink" title="swiftScan - 二维码扫描"></a><a href="https://github.com/MxABC/swiftScan">swiftScan - 二维码扫描</a></h2><p><strong>★ Star：569</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171142.png" alt="预览图"></p>
<p><code>swiftScan</code> 是一个二维码库，支持各种码识别、生成、以及界面效果。</p>
<p><strong>功能介绍：</strong></p>
<ul>
<li>扫码框周围区域背景色可设置</li>
<li>扫码框颜色可也设置</li>
<li>扫码框4个角的颜色可设置、大小可设置</li>
<li>可设置只识别扫码框内的图像区域</li>
<li>可设置扫码成功后，获取当前图片</li>
<li>根据扫码结果，截取码的部分图像(在模仿qq扫码界面，扫码成功后可看到)</li>
<li>动画效果选择：线条上下移动、网格形式移动、中间线条不移动（一般扫码条形码的效果）</li>
</ul>
<hr>
<h2 id="SGQRCode-二维码扫描"><a href="#SGQRCode-二维码扫描" class="headerlink" title="SGQRCode - 二维码扫描"></a><a href="https://github.com/kingsic/SGQRCode">SGQRCode - 二维码扫描</a></h2><p><strong>★ Star：624</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171159.png" alt="预览图"></p>
<p><code>SGQRCode</code> 是一个二维码库，支持各种码识别、生成、以及界面效果，是一个 <code>OC</code> 框架。</p>
<p><strong>功能介绍：</strong></p>
<ul>
<li>普通二维码生成</li>
<li>彩色二维码生成</li>
<li>带有小图标二维码生成</li>
<li>根据光线强弱开启手电筒</li>
<li>从相册中读取二维码</li>
<li>扫描成功之后提示音</li>
<li>扫描成功之后界面之间的跳转</li>
<li>扫描界面仿微信（请根据项目需求，自行布局或调整）</li>
<li>扫描界面可自定义（扫描线条以及网格样式）</li>
</ul>
<hr>
<h1 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h1><h2 id="Realm-数据库"><a href="#Realm-数据库" class="headerlink" title="Realm - 数据库"></a><a href="https://github.com/realm/realm-cocoa">Realm - 数据库</a></h2><p><strong>★ Star：11158</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171217.png" alt="Realm"></p>
<p><code>Realm</code> 于 <code>2014</code> 年 <code>7</code> 月发布，是一个跨平台的移动数据库引擎，专门为移动应用的数据持久化而生，其目的是要取代 <code>Core Data</code> 和 <code>SQLite</code> ，<code>Realm</code> 不是基于 <code>Core Data</code> ，也不是基于 <code>SQLite</code> 封装构建的，它有自己的数据库存储引擎，具有 <code>跨平台</code> 、<code>简单易用</code> 、<code>可视化</code> 等优点，这是 <a href="https://realm.io/cn/docs/swift/latest/">中文官方文档地址</a> 。</p>
<p><strong>参考文章：</strong></p>
<p><a href="http://www.jianshu.com/p/06782df0b901">Swift - Realm 数据库使用汇总</a></p>
<p><a href="http://www.hangge.com/blog/cache/detail_891.html">Swift - Realm 数据库的使用详解（附样例）</a></p>
<p><a href="http://www.jianshu.com/p/50e0efb66bdf">OC - Realm 数据库 从入门到“放弃”</a></p>
<hr>
<h2 id="Valet-钥匙串存储"><a href="#Valet-钥匙串存储" class="headerlink" title="Valet - 钥匙串存储"></a><a href="https://github.com/square/Valet">Valet - 钥匙串存储</a></h2><p><strong>★ Star：2681</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171231.png" alt="iCloud 钥匙串"></p>
<p><code>Valet</code> 允许你安全的在 <code>iOS</code> 或 <code>OS X</code> 钥匙链中存储数据，而不需要掌握任何钥匙链如何工作的知识。它支持在一台设备的多个应用（同一个开发者）间分享数据，以及在一个应用中在多个设备间利用 <code>iCloud</code> 进行分享，同时支持 <code>Touch ID</code> 。</p>
<hr>
<h2 id="SwiftyUserDefaults-UserDefaults-框架"><a href="#SwiftyUserDefaults-UserDefaults-框架" class="headerlink" title="SwiftyUserDefaults - UserDefaults 框架"></a><a href="https://github.com/radex/SwiftyUserDefaults">SwiftyUserDefaults - UserDefaults 框架</a></h2><p><strong>★ Star：2719</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171245.png" alt="SwiftyUserDefaults"></p>
<p><code>SwiftyUserDefaults</code> 让 <code>UserDefaults</code> 用起来很愉悦，通过结合意味深长的 <code>Swifty API</code> 和静态输入的益处，在一个地方定义键，轻松地使用值类型，获得额外的安全性和方便的编译时检查，这些都是免费的。</p>
<p><strong>参考文章：</strong></p>
<p><a href="https://segmentfault.com/a/1190000004090831">用 SwiftyUserDefaults 操作 NSUserDefaluts</a></p>
<hr>
<h2 id="GVUserDefaults-UserDefaults-框架"><a href="#GVUserDefaults-UserDefaults-框架" class="headerlink" title="GVUserDefaults - UserDefaults 框架"></a><a href="https://github.com/gangverk/GVUserDefaults">GVUserDefaults - UserDefaults 框架</a></h2><p><strong>★ Star：880</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171258.jpg" alt="GVUserDefaults"></p>
<p><code>GVUserDefaults</code> 让 <code>UserDefaults</code> 用起来更加简单，之前使用 <code>[[NSUserDefaults standardUserDefaults] objectForKey:@&quot;userName&quot;]</code> 而现在只需要使用 <code>[GVUserDefaults standardUserDefaults].userName</code> 就能完成，这是一个 <code>Objective-C</code> 框架，<code>Swift</code> 版还没有，可以用上面的 <a href="https://github.com/radex/SwiftyUserDefaults">SwiftyUserDefaults</a> 。</p>
<p><strong>参考文章：</strong></p>
<p><a href="http://www.jianshu.com/p/b686567ac73e">GVUserDefaults学习笔记</a></p>
<hr>
<h1 id="时间日期"><a href="#时间日期" class="headerlink" title="时间日期"></a>时间日期</h1><h2 id="FSCalendar-日历"><a href="#FSCalendar-日历" class="headerlink" title="FSCalendar - 日历"></a><a href="https://github.com/WenchaoD/FSCalendar">FSCalendar - 日历</a></h2><p><strong>★ Star：4882</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171313.png" alt="FSCalendar"></p>
<p><code>FSCalendar</code> 是一个完全自定义的 <code>iOS</code> 日历库，兼容 <code>Objective-C</code> 和 <code>Swift</code> ，支持横向、纵向滑动模式，全屏模式，带有子标题、事件设置等功能。</p>
<p><strong>参考文章：</strong></p>
<p><a href="http://www.jianshu.com/p/59c5d535a710">FSCalendar使用介绍(一) - Hello World</a></p>
<p><a href="http://www.jianshu.com/p/6f1592260d35">FSCalendar使用介绍(二) - 农历、事件</a></p>
<p><a href="http://www.jianshu.com/p/b2e330b60104">FSCalendar使用介绍(三) - 订制</a></p>
<hr>
<h2 id="Timepiece-时间日期"><a href="#Timepiece-时间日期" class="headerlink" title="Timepiece - 时间日期"></a><a href="https://github.com/naoty/Timepiece">Timepiece - 时间日期</a></h2><p><strong>★ Star：2206</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171327.png" alt="Timepiece"></p>
<p><code>Timepiece</code> 是一个直观的日期处理框架。</p>
<hr>
<h2 id="DateTools-日期工具"><a href="#DateTools-日期工具" class="headerlink" title="DateTools - 日期工具"></a><a href="https://github.com/MatthewYork/DateTools">DateTools - 日期工具</a></h2><p><strong>★ Star：5918</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171339.png" alt="DateTools"></p>
<p><code>DateTools</code> 是一个让时间日期处理起来更加简单的一个框架，并且 <code>Swift</code> 和 <code>Objective-C</code> 版本都有 。</p>
<p><strong>参考文章：</strong></p>
<p><a href="https://segmentfault.com/a/1190000009096792">DateTools使用「日期工具库」</a></p>
<p><a href="https://www.cnblogs.com/ios122/p/4839726.html">DateTools,可能是最好用的iOS日期工具库</a></p>
<hr>
<h1 id="界面显示"><a href="#界面显示" class="headerlink" title="界面显示"></a>界面显示</h1><h2 id="IGListKit-UICollectionView-框架"><a href="#IGListKit-UICollectionView-框架" class="headerlink" title="IGListKit - UICollectionView 框架"></a><a href="https://github.com/Instagram/IGListKit">IGListKit - UICollectionView 框架</a></h2><p><strong>★ Star：6452</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171351.png" alt="IGListKit"></p>
<p><code>IGListKit</code> 是 <code>Instagram</code> 推出的新的 <code>UICollectionView</code> 框架，使用数据驱动，旨在创造一个更快更灵活的列表控件。</p>
<p><strong>参考文章：</strong></p>
<p><a href="http://www.jianshu.com/p/30e4895b8790">Instagram 开源IGListKit学习</a></p>
<p><a href="http://www.jianshu.com/p/44bda1421757">Instagram/IGListKit实践谈</a></p>
<p><a href="http://www.jianshu.com/p/35981ce5541b">IGListKit 教程</a></p>
<hr>
<h2 id="DZNEmptyDataSet-空数据显示"><a href="#DZNEmptyDataSet-空数据显示" class="headerlink" title="DZNEmptyDataSet - 空数据显示"></a><a href="https://github.com/dzenbot/DZNEmptyDataSet">DZNEmptyDataSet - 空数据显示</a></h2><p><strong>★ Star：9042</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171404.png" alt="DZNEmptyDataSet"></p>
<p>在 <code>iOS</code> 开发中，经常会遇到页面无数据的情况，当没有数据时，页面一片空白，顿时令用户心情很不好，<code>DZNEmptyDataSet</code> 能够帮助你避免这个情况，不过 <code>DZNEmptyDataSet</code> 只有 <code>OC</code> 版本，在 <code>Swift</code> 中需要混编使用。</p>
<p><strong>参考文章：</strong></p>
<p><a href="http://www.jianshu.com/p/84308457527e">iOS开发之 - <em>DZNEmptyDataSet</em> 空白页占位图</a></p>
<p><a href="http://www.jianshu.com/p/f70dc3e0f436"><em>DZNEmptyDataSet</em>——空白数据集显示框架</a></p>
<p><a href="http://www.jianshu.com/p/77f6aca82564">[swift]使用<em>DZNEmptyDataSet</em>空数据占位图</a></p>
<hr>
<h2 id="Charts-图表"><a href="#Charts-图表" class="headerlink" title="Charts - 图表"></a><a href="https://github.com/danielgindi/Charts">Charts - 图表</a></h2><p><strong>★ Star：15438</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171417.png" alt="Charts"></p>
<p><code>Charts</code> 可以说是最好的图表库了，是 <a href="https://github.com/PhilJay/MPAndroidChart">MPAndroidChart</a> 在 <code>iOS</code> 上的移植，具有漂亮的线图、饼图、条形图、分布图、气泡图、雷达图还有更多种类。</p>
<p><strong>参考文章：</strong></p>
<p><a href="https://segmentfault.com/a/1190000003111508">如何在 Swift 语言下使用 iOS Charts API 制作漂亮图表？</a></p>
<p><a href="http://www.jianshu.com/p/e531d97dbb62">Objective-C 中 Charts 的 CombinedChart 使用汇总</a></p>
<hr>
<h2 id="DGElasticPullToRefresh-下拉刷新"><a href="#DGElasticPullToRefresh-下拉刷新" class="headerlink" title="DGElasticPullToRefresh - 下拉刷新"></a><a href="https://github.com/gontovnik/DGElasticPullToRefresh">DGElasticPullToRefresh - 下拉刷新</a></h2><p><strong>★ Star：2871</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171433.gif" alt="DGElasticPullToRefresh"></p>
<p><code>DGElasticPullToRefresh</code> 是一个下拉刷新控件，具有非常棒的动画效果。</p>
<hr>
<h2 id="JSBadgeView-角标控件"><a href="#JSBadgeView-角标控件" class="headerlink" title="JSBadgeView - 角标控件"></a><a href="https://github.com/JaviSoto/JSBadgeView">JSBadgeView - 角标控件</a></h2><p><strong>★ Star：1157</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171505.png" alt="JSBadgeView"></p>
<p><code>JSBadgeView</code> 是一个可以自由定制的角标控件，使用起来也非常简单，暂时只有 <code>Objective-C</code> 版本。</p>
<p><strong>参考文章：</strong></p>
<p><a href="http://www.jianshu.com/p/3bedc5d32674">角标 - JSBadgeView的基本使用</a></p>
<hr>
<h2 id="DACircularProgress-加载进度显示"><a href="#DACircularProgress-加载进度显示" class="headerlink" title="DACircularProgress - 加载进度显示"></a><a href="https://github.com/danielamitay/DACircularProgress">DACircularProgress - 加载进度显示</a></h2><p><strong>★ Star：2248</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171931.jpg" alt="DACircularProgress"></p>
<p><code>DACircularProgress</code> 是一个用来显示加载进度的控件，暂时只有 <code>Objective-C</code> 版本。</p>
<hr>
<h1 id="导航栏页"><a href="#导航栏页" class="headerlink" title="导航栏页"></a>导航栏页</h1><h2 id="WRNavigationBar-导航栏设置"><a href="#WRNavigationBar-导航栏设置" class="headerlink" title="WRNavigationBar - 导航栏设置"></a><a href="https://github.com/wangrui460/WRNavigationBar">WRNavigationBar - 导航栏设置</a></h2><p><strong>★ Star：1299</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171518.png" alt="WRNavigationBar"></p>
<p><code>WRNavigationBar</code> 是一个导航栏设置工具，能够一行代码设置状态栏、导航栏按钮、标题、颜色、透明度，移动等。</p>
<p><strong>参考文章：</strong></p>
<p><a href="http://www.jianshu.com/p/540a7e6f7b40">超简单！！！ iOS设置状态栏、导航栏按钮、标题、颜色、透明度，偏移等</a></p>
<hr>
<h2 id="KMNavigationBarTransition-导航栏过渡效果"><a href="#KMNavigationBarTransition-导航栏过渡效果" class="headerlink" title="KMNavigationBarTransition - 导航栏过渡效果"></a><a href="https://github.com/MoZhouqi/KMNavigationBarTransition">KMNavigationBarTransition - 导航栏过渡效果</a></h2><p><strong>★ Star：2317</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171535.gif" alt="KMNavigationBarTransition"></p>
<p><code>KMNavigationBarTransition</code> 是一个用来统一管理导航栏转场以及当 <code>push</code> 或者 <code>pop</code> 的时候使动画效果更加顺滑的通用库，并且同时支持竖屏和横屏。<br>使用时不用 <code>import</code> 任何头文件，全部通过 <code>Method Swizzling</code> 在底层做了处理，你不用为这个库写一行代码，所有的改变都悄然发生。<br>本库的设计理念是使用者只用关心当前 <code>view controller</code> 导航栏的背景样式，而不用在 <code>push</code> 或者 <code>pop</code> 的时候处理各种背景样式。<br>当 <code>push</code> 的时候本库会保存消失的 <code>view controller</code> 导航栏的背景样式，当 <code>pop</code> 回去后就会还原成以前的样式，因此你不用考虑 <code>pop</code> 后各种导航栏样式改变的情况。同时你也不必考虑 <code>push</code> 后的情况，因为这个是被 <code>push</code> 的 <code>view controller</code> 本身需要考虑的。</p>
<hr>
<h2 id="SAHistoryNavigationViewController-导航栏页面返回"><a href="#SAHistoryNavigationViewController-导航栏页面返回" class="headerlink" title="SAHistoryNavigationViewController - 导航栏页面返回"></a><a href="https://github.com/marty-suzuki/SAHistoryNavigationViewController">SAHistoryNavigationViewController - 导航栏页面返回</a></h2><p><strong>★ Star：1497</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171550.gif" alt="SAHistoryNavigationViewController"></p>
<p><code>SAHistoryNavigationViewController</code> 是一个导航栏页面返回的库，当你重按返回按钮的时候，你可以选择之前 <code>push</code> 过的任何一个页面来返回，效果非常酷炫。</p>
<hr>
<h2 id="TLYShyNavBar-导航栏滚动隐藏"><a href="#TLYShyNavBar-导航栏滚动隐藏" class="headerlink" title="TLYShyNavBar - 导航栏滚动隐藏"></a><a href="https://github.com/telly/TLYShyNavBar">TLYShyNavBar - 导航栏滚动隐藏</a></h2><p><strong>★ Star：3458</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509172845.jpg" alt="TLYShyNavBar"></p>
<p><img data-src="https://file.karise.cn/blog/20190509172901.gif" alt="TLYShyNavBar"></p>
<p><code>TLYShyNavBar</code> 可以帮助你在页面滚动时自动隐藏导航栏。</p>
<hr>
<h1 id="表格视图"><a href="#表格视图" class="headerlink" title="表格视图"></a>表格视图</h1><h2 id="MGSwipeTableCell-UITableViewCell-滑动菜单"><a href="#MGSwipeTableCell-UITableViewCell-滑动菜单" class="headerlink" title="MGSwipeTableCell - UITableViewCell 滑动菜单"></a><a href="https://github.com/MortimerGoro/MGSwipeTableCell">MGSwipeTableCell - UITableViewCell 滑动菜单</a></h2><p><strong>★ Star：5623</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171615.gif" alt="MGSwipeTableCell.gif"></p>
<p><code>MGSwipeTableCell</code> 是一个易于使用的 <code>UITableViewCell</code> 子类，允许显示带有多种转换的可滑动按钮。</p>
<p><strong>参考文章：</strong></p>
<p><a href="http://www.jianshu.com/p/25908a61f849"><em>MGSwipeTableCell</em>的使用</a></p>
<p><a href="http://www.jianshu.com/p/c14b85b62be6">继承<em>MGSwipeTableCell</em>无法滑动的问题</a></p>
<p><a href="http://www.jianshu.com/p/352ca6f2e3b1">有关UITableViewCell的侧滑删除以及使用相关大神框架<em>MGSwipeTableCell</em>遇到的小问题</a></p>
<hr>
<h2 id="SWTableViewCell-UITableViewCell-滑动菜单"><a href="#SWTableViewCell-UITableViewCell-滑动菜单" class="headerlink" title="SWTableViewCell - UITableViewCell 滑动菜单"></a><a href="https://github.com/CEWendel/SWTableViewCell">SWTableViewCell - UITableViewCell 滑动菜单</a></h2><p><strong>★ Star：6980</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509173136.gif" alt="SWTableViewCell"></p>
<p><code>SWTableViewCell</code> 也是一个易于使用的 <code>UITableViewCell</code> 子类，允许显示带有多种转换的可滑动按钮，是一个 <code>Objective-C</code> 框架。</p>
<hr>
<h2 id="SwipeCellKit-UITableViewCell-滑动菜单"><a href="#SwipeCellKit-UITableViewCell-滑动菜单" class="headerlink" title="SwipeCellKit - UITableViewCell 滑动菜单"></a><a href="https://github.com/SwipeCellKit/SwipeCellKit">SwipeCellKit - UITableViewCell 滑动菜单</a></h2><p><strong>★ Star：2668</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509173156.gif" alt="SwipeCellKit"></p>
<p><code>SwipeCellKit</code> 也是一个易于使用的 <code>UITableViewCell</code> 子类，允许显示带有多种转换的可滑动按钮。</p>
<hr>
<h1 id="滑动菜单"><a href="#滑动菜单" class="headerlink" title="滑动菜单"></a>滑动菜单</h1><h2 id="SwipeTableView-滑动菜单"><a href="#SwipeTableView-滑动菜单" class="headerlink" title="SwipeTableView - 滑动菜单"></a><a href="https://github.com/Roylee-ML/SwipeTableView">SwipeTableView - 滑动菜单</a></h2><p><strong>★ Star：1256</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509173223.jpg" alt="SwipeTableView"></p>
<p><img data-src="https://file.karise.cn/blog/20190509173243.gif" alt="SwipeTableView"></p>
<p><code>SwipeTableView</code> 可以实现不同菜单的左右滑动切换，同时支持类似 <code>tableview</code> 的顶部工具栏悬停（既可以左右滑动，又可以上下滑动），兼容下拉刷新，自定义 <code>collectionview</code> 实现自适应 <code>contentSize</code> 还可实现瀑布流功能，是一个 <code>Objective-C</code> 框架。</p>
<hr>
<h2 id="RKSwipeBetweenViewControllers-滑动菜单"><a href="#RKSwipeBetweenViewControllers-滑动菜单" class="headerlink" title="RKSwipeBetweenViewControllers - 滑动菜单"></a><a href="https://github.com/cwRichardKim/RKSwipeBetweenViewControllers">RKSwipeBetweenViewControllers - 滑动菜单</a></h2><p><strong>★ Star：1675</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509173302.gif" alt="RKSwipeBetweenViewControllers"></p>
<p><code>RKSwipeBetweenViewControllers</code> 能够实现在不同页面之间左右滑动切换，是一个 <code>Objective-C</code> 框架。</p>
<hr>
<h2 id="SwipeViewController-滑动菜单"><a href="#SwipeViewController-滑动菜单" class="headerlink" title="SwipeViewController - 滑动菜单"></a><a href="https://github.com/fortmarek/SwipeViewController">SwipeViewController - 滑动菜单</a></h2><p><strong>★ Star：462</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509173329.gif" alt="SwipeViewController"></p>
<p><code>SwipeViewController</code> 使你可以修改导航栏，并实现滑动按钮，用户可以切换页面，同时用户也可以很容易地看到他所使用的页面。<code>SwipeViewController</code> 是从 <a href="https://github.com/cwRichardKim/RKSwipeBetweenViewControllers">RKSwipeBetweenViewControllers</a> 这个库改造为 <code>Swift</code> 的，不仅将语法转换为 <code>Swift</code> ，还增加了一些功能和其他一些细微的变化。</p>
<hr>
<h2 id="SwipeMenuViewController-滑动菜单"><a href="#SwipeMenuViewController-滑动菜单" class="headerlink" title="SwipeMenuViewController - 滑动菜单"></a><a href="https://github.com/yysskk/SwipeMenuViewController">SwipeMenuViewController - 滑动菜单</a></h2><p><strong>★ Star：383</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509173349.jpg" alt="SwipeMenuViewController"></p>
<p><img data-src="https://file.karise.cn/blog/20190509173402.gif" alt="SwipeMenuViewController"></p>
<p><img data-src="https://file.karise.cn/blog/20190509173420.gif" alt="SwipeMenuViewController"></p>
<p><code>SwipeMenuViewController</code> 也是一个可以实现页面左右滑动的一个框架。</p>
<hr>
<h1 id="侧滑页面"><a href="#侧滑页面" class="headerlink" title="侧滑页面"></a>侧滑页面</h1><h2 id="MMDrawerController-侧滑页面"><a href="#MMDrawerController-侧滑页面" class="headerlink" title="MMDrawerController - 侧滑页面"></a><a href="https://github.com/mutualmobile/MMDrawerController">MMDrawerController - 侧滑页面</a></h2><p><strong>★ Star：6505</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509173437.jpg" alt="MMDrawerController"></p>
<p><code>MMDrawerController</code> 是一个侧滑视图控制器，它的设计目的是支持越来越多的应用程序来利用侧滑，是一个 <code>Objective-C</code> 框架。</p>
<hr>
<h2 id="REFrostedViewController-侧滑视图"><a href="#REFrostedViewController-侧滑视图" class="headerlink" title="REFrostedViewController - 侧滑视图"></a><a href="https://github.com/romaonthego/REFrostedViewController">REFrostedViewController - 侧滑视图</a></h2><p><strong>★ Star：3043</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509173451.gif" alt="REFrostedViewController"></p>
<p><code>REFrostedViewController</code> 是一个侧滑控制器，这个框架是将整个视图侧滑出来，而不是将原来的视图给推过去，可以满足一下不同的需求，是一个 <code>Objective-C</code> 框架。</p>
<hr>
<h2 id="MSDynamicsDrawerViewController-侧滑视图"><a href="#MSDynamicsDrawerViewController-侧滑视图" class="headerlink" title="MSDynamicsDrawerViewController - 侧滑视图"></a><a href="https://github.com/erichoracek/MSDynamicsDrawerViewController">MSDynamicsDrawerViewController - 侧滑视图</a></h2><p><strong>★ Star：3312</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509173508.gif" alt="MSDynamicsDrawerViewController"></p>
<p><code>MSDynamicsDrawerViewController</code> 也是一个侧滑控制器，并且侧滑过程中会有一个反弹的动画效果，是一个 <code>Objective-C</code> 框架。</p>
<hr>
<h2 id="JVFloatingDrawer-侧滑视图"><a href="#JVFloatingDrawer-侧滑视图" class="headerlink" title="JVFloatingDrawer - 侧滑视图"></a><a href="https://github.com/JVillella/JVFloatingDrawer">JVFloatingDrawer - 侧滑视图</a></h2><p><strong>★ Star：1430</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509173526.gif" alt="JVFloatingDrawer"></p>
<p><code>JVFloatingDrawer</code> 是一个浮动样式的侧滑页面，利用侧滑页面的应用程序越来越多，这个框架的侧滑效果看上去非常的棒。</p>
<hr>
<h2 id="CWLateralSlide-侧滑视图"><a href="#CWLateralSlide-侧滑视图" class="headerlink" title="CWLateralSlide - 侧滑视图"></a><a href="https://github.com/ChavezChen/CWLateralSlide">CWLateralSlide - 侧滑视图</a></h2><p><strong>★ Star：439</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509173543.gif" alt="CWLateralSlide"></p>
<p><code>CWLateralSlide</code> 是一个非常简单的侧滑抽屉框架，目前有一些侧滑框架适用场景的局限性很高，且固定死的模板，比如设置一个 <code>leftVC</code> ，<code>rightVC</code> ，<code>middleVC</code> 为 <code>TabbarVC</code>（根控制器），如果我要使用这种方式来实现侧滑，就必须根据它的要求来调整我们整个 <code>APP</code> 的架构，侵入型很高，新项目还好，老项目只能说，o shit！😁。假如界面要换交互方式，由于耦合高，替换成本是比较大的，而且侧滑的抽屉界面会一直存在内存里，展示在我们看不见的地方（屏幕外，或者根控制器下边）。</p>
<p>我们的优势: 没有所谓的 <code>leftVC</code> ，<code>rightVC</code> ，对整个项目没有任何限制和依赖，不需要设置啥 <code>XXXTabbarController</code> 这种根控制器，也没有任何需要继承自某某类～真正的0耦合、0侵入、0污染。使用极致简单，真正的大白话操作。侧滑的控制器拥有完整的生命周期函数调用。也就是说，侧滑的界面在隐藏的情况下，并不会对 <code>App</code> 产生额外的内存占用（正确的被释放）最重要的是简单：只要一行代码就能拥有一个侧滑抽屉。</p>
<hr>
<h2 id="FDFullscreenPopGesture-全屏侧滑返回"><a href="#FDFullscreenPopGesture-全屏侧滑返回" class="headerlink" title="FDFullscreenPopGesture - 全屏侧滑返回"></a><a href="https://github.com/forkingdog/FDFullscreenPopGesture">FDFullscreenPopGesture - 全屏侧滑返回</a></h2><p><strong>★ Star：4704</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509173600.gif" alt="FDFullscreenPopGesture"></p>
<p><code>FDFullscreenPopGesture</code> 是一个简单的全屏侧滑返回框架，低耦合十分的轻量级。</p>
<hr>
<h1 id="其他框架"><a href="#其他框架" class="headerlink" title="其他框架"></a>其他框架</h1><h2 id="SnapKit-自动布局"><a href="#SnapKit-自动布局" class="headerlink" title="SnapKit - 自动布局"></a><a href="https://github.com/SnapKit/SnapKit">SnapKit - 自动布局</a></h2><p><strong>★ Star：10488</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171638.png" alt="SnapKit.png"></p>
<p><code>SnapKit</code> 是一个优秀的第三方自适应布局库，它可以让 <code>iOS</code> 、<code>OS X</code> 应用更简单地实现自动布局（<code>Auto Layout</code>），<code>SnapKit</code> 的前身是 <a href="https://github.com/SnapKit/Masonry">Masonry</a> ，一个 <code>OC</code> 版的布局库。</p>
<p><strong>参考文章：</strong></p>
<p><a href="http://www.hangge.com/blog/cache/detail_1097.html">Swift - 自动布局库SnapKit的使用详解1（配置、使用方法、样例）</a></p>
<p><a href="http://www.hangge.com/blog/cache/detail_1110.html">Swift - 自动布局库SnapKit的使用详解2（约束的更新、移除、重做）</a></p>
<p><a href="http://www.hangge.com/blog/cache/detail_1114.html">Swift - 自动布局库SnapKit的使用详解3（约束优先级，约束做动画）</a></p>
<p><a href="http://www.hangge.com/blog/cache/detail_1112.html">Swift - 自动布局库SnapKit的使用详解4（样例1：实现一个登录页面）</a></p>
<p><a href="http://www.hangge.com/blog/cache/detail_1113.html">Swift - 自动布局库SnapKit的使用详解5（样例2：实现一个计算器界面）</a></p>
<hr>
<h2 id="AsyncDisplayKit-异步界面渲染"><a href="#AsyncDisplayKit-异步界面渲染" class="headerlink" title="AsyncDisplayKit - 异步界面渲染"></a><a href="https://github.com/facebook/AsyncDisplayKit">AsyncDisplayKit - 异步界面渲染</a></h2><p><strong>★ Star：11858</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171653.png" alt="AsyncDisplayKit"></p>
<p><code>AsyncDisplayKit</code> 是 <code>Facebook</code> 在 <code>2014</code> 年开源的一个异步界面渲染库，她是构筑于 <code>UIKit</code> 之上的一个封装库，与 <code>UIView</code> 是平级的关系（同时提供 <code>UIView bridge</code> 接口）。</p>
<p><strong>参考文章：</strong></p>
<p><a href="http://awhisper.github.io/2016/05/04/AsyncDisplayKit%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/">AsyncDisplayKit官方文档翻译</a></p>
<p><a href="http://www.jianshu.com/p/9e517e985145">AsyncDisplayKit 系列教程 —— 为什么要使用 AsyncDisplayKit</a></p>
<p><a href="http://www.jianshu.com/p/e5761e9a7850">AsyncDisplayKit 系列教程 —— 集成、示例</a></p>
<p><a href="http://www.jianshu.com/p/850359c06f88">AsyncDisplayKit 系列教程 —— ASTableView</a></p>
<p><a href="http://www.jianshu.com/p/d721803db92a">AsyncDisplayKit 坑友教路 —— TouchUpInside</a></p>
<p><a href="http://www.jianshu.com/p/25a53e87b099">AsyncDisplayKit 系列教程 —— 添加一个 UIActivityIndicatorView 到 ASCellNode</a></p>
<hr>
<h2 id="FileKit-文件管理"><a href="#FileKit-文件管理" class="headerlink" title="FileKit - 文件管理"></a><a href="https://github.com/nvzqz/FileKit">FileKit - 文件管理</a></h2><p><strong>★ Star：1540</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171706.png" alt="FileKit"></p>
<p><code>FileKit</code> 是一个 <code>Swift</code> 框架，可以用来简单而直观地进行文件管理。</p>
<p><strong>参考文章：</strong></p>
<p><a href="http://hao.jobbole.com/filekit/">FileKit：Swift 实现简单快捷的文件管理工具</a></p>
<hr>
<h2 id="DeviceKit-设备信息"><a href="#DeviceKit-设备信息" class="headerlink" title="DeviceKit - 设备信息"></a><a href="https://github.com/dennisweissmann/DeviceKit">DeviceKit - 设备信息</a></h2><p><strong>★ Star：1491</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171717.png" alt="DeviceKit"></p>
<p><code>DeviceKit</code> 是 <code>UIDevice</code> 的值类型替换，可以轻松获取设备信息和电池电量。</p>
<hr>
<h2 id="RandomKit-随机数"><a href="#RandomKit-随机数" class="headerlink" title="RandomKit - 随机数"></a><a href="https://github.com/nvzqz/RandomKit">RandomKit - 随机数</a></h2><p><strong>★ Star：1180</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171729.png" alt="RandomKit"></p>
<p><code>RandomKit</code> 是一个简单易用的随机数据生成框架，<code>RandomKit</code> 基于一系列接口构建，因此我们也能非常方便地按相同风格添加一些自定义随机数据类型。</p>
<p><strong>参考文章：</strong></p>
<p><a href="http://www.jianshu.com/p/3a668fe8d335">用 <em>RandomKit</em> 快速生成随机数据</a></p>
<p><a href="https://segmentfault.com/a/1190000003910491">Swift随机数产生</a></p>
<hr>
<h2 id="SwiftyStoreKit-应用内购买"><a href="#SwiftyStoreKit-应用内购买" class="headerlink" title="SwiftyStoreKit - 应用内购买"></a><a href="https://github.com/bizz84/SwiftyStoreKit">SwiftyStoreKit - 应用内购买</a></h2><p><strong>★ Star：2304</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171740.png" alt="SwiftyStoreKit"></p>
<p><code>SwiftyStoreKit</code> 是一个轻量的 <code>App</code> 内购框架，支持 <code>iOS 8.0+</code> ，<code>tvOS 9.0+</code> 和 <code>macOS 10.10+</code> 。</p>
<hr>
<h2 id="CryptoSwift-数据加密"><a href="#CryptoSwift-数据加密" class="headerlink" title="CryptoSwift - 数据加密"></a><a href="https://github.com/krzyzanowskim/CryptoSwift">CryptoSwift - 数据加密</a></h2><p><strong>★ Star：4200</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171752.png" alt="CryptoSwift"></p>
<p><code>CryptoSwift</code> 是一个加密相关的帮助函数实现，支持 <code>md5</code> 、<code>sha1</code> 、<code>sha224</code> 、<code>sha256</code> 等等。</p>
<hr>
<h2 id="IQKeyboardManager-键盘自适应"><a href="#IQKeyboardManager-键盘自适应" class="headerlink" title="IQKeyboardManager - 键盘自适应"></a><a href="https://github.com/hackiftekhar/IQKeyboardManager">IQKeyboardManager - 键盘自适应</a></h2><p><strong>★ Star：9631</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509171805.png" alt="IQKeyboardManager"></p>
<p><code>IQKeyboardManager</code> 是 <code>iOS</code> 中解决键盘弹起遮挡 <code>UITextField / UITextView</code> 的一种很实用的工具，无需输入任何代码，不需要额外的设置，使用 <code>IQKeyboardManager</code> 的你只需要将源文件添加到项目，并且支持 <code>Objective-C</code> 和 <code>Swift</code> 。</p>
<p><strong>参考文章：</strong></p>
<p><a href="http://www.jianshu.com/p/988504987acd"><em>IQKeyboardManager</em>(“零行代码”解决键盘遮挡问题) 源码分析</a></p>
<p><a href="http://www.jianshu.com/p/77d2ba569142">iOS开发之 - 键盘处理神器 <em>IQKeyboardManager</em></a></p>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>CocoaPods</tag>
        <tag>Swift</tag>
        <tag>开源库</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】一个音频格式转换库 GZZAudioConverter</title>
    <url>/2018/05/28/iOS/201805280923/</url>
    <content><![CDATA[<blockquote>
<p>大多数代码源自于 <a href="https://github.com/lixing123/ExtAudioFileConverter">ExtAudioFileConverter</a>，因为网上关于音频格式转换的太少了，而且还特别麻烦，故封装为 <code>Cocoapods</code> 库，方便使用，转换 <code>MP3</code> 格式需要用到 <code>lame</code> 静态库，使用 <code>pod</code> 之后不需要单独集成 <code>lame</code> 静态库，直接 <code>pod install</code> 即可使用，这是库的地址：<a href="https://github.com/karise-guo/GZZAudioConverter">GZZAudioConverter</a> 。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p> 仅支持 <code>CocoaPods</code>，将如下代码加入 <code>Podfile</code> 文件中。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">pod</span> <span class="string">&#x27;GZZAudioConverter&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="Useage"><a href="#Useage" class="headerlink" title="Useage"></a>Useage</h2><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例如：转换为 MP3</span></span><br><span class="line"><span class="built_in">dispatch_async</span>(dispatch_queue_create(<span class="literal">NULL</span>, DISPATCH_QUEUE_SERIAL), ^ &#123;</span><br><span class="line">    GZZAudioConverter *converter = [[GZZAudioConverter alloc] init];</span><br><span class="line">    converter.inputFile = <span class="string">@&quot;/var/mobile/Containers/Data/Application/xxx/Documents/xxx.wav&quot;</span>;</span><br><span class="line">    converter.outputFile = <span class="string">@&quot;/var/mobile/Containers/Data/Application/xxx/Documents/xxx.mp3&quot;</span>;</span><br><span class="line">    converter.outputFileType = kAudioFileMP3Type;</span><br><span class="line">    converter.outputFormatID = kAudioFormatMPEGLayer3;</span><br><span class="line">    <span class="built_in">BOOL</span> success = [converter convert];</span><br><span class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^ &#123;</span><br><span class="line">        <span class="keyword">if</span> (success) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;转换成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;转换失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h2><p>注意：文件格式和数据格式要根据你要转换的音频格式来设置，不同文件格式对应的数据格式是不同的，这是关于文件格式和数据格式的 <a href="https://developer.apple.com/library/content/documentation/MusicAudio/Conceptual/CoreAudioOverview/SupportedAudioFormatsMacOSX/SupportedAudioFormatsMacOSX.html">说明文档</a> 。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 采样率</span></span><br><span class="line">converter.outputSampleRate = <span class="number">44100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声道数</span></span><br><span class="line">converter.outputNumberChannels = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 位深</span></span><br><span class="line">converter.outputBitDepth = BitDepth_16;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件格式</span></span><br><span class="line">converter.outputFileType = kAudioFileWAVEType;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据格式</span></span><br><span class="line">converter.outputFormatID = kAudioFormatLinearPCM;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>格式转换</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】给自己项目添加 Carthage 支持的方法</title>
    <url>/2018/09/28/iOS/201809281733/</url>
    <content><![CDATA[<blockquote>
<p><code>Carthage</code> 是一款 <code>iOS</code> 项目依赖管理工具，与 <code>Cocoapods</code> 有着相似的功能，可以帮助你方便的管理第三方依赖，它会把三方依赖编译成 <code>framework</code> ，以 <code>framework</code> 的形式将三方依赖加入到项目中进行使用和管理，下面记录一下项目添加 <code>Carthage</code> 支持的方法以及 <code>Carthage</code> 的使用方法，方便日后查看。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="项目添加-Carthage-支持"><a href="#项目添加-Carthage-支持" class="headerlink" title="项目添加 Carthage 支持"></a>项目添加 Carthage 支持</h2><h3 id="1-安装-Carthage"><a href="#1-安装-Carthage" class="headerlink" title="1. 安装 Carthage"></a>1. 安装 Carthage</h3><p>可以到 <a href="https://github.com/Carthage/Carthage/releases">Carthage 项目</a> 下直接下载 <code>Carthage.pkg</code> 文件安装，或者使用 <code>Homebrew</code> 方式安装，终端输入以下命令进行安装。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">brew update</span><br><span class="line">brew install carthage</span><br></pre></td></tr></table></figure>

<h3 id="2-创建一个支持-Carthage-的工程"><a href="#2-创建一个支持-Carthage-的工程" class="headerlink" title="2. 创建一个支持 Carthage 的工程"></a>2. 创建一个支持 Carthage 的工程</h3><ul>
<li><code>Carthage</code> 仅支持 <code>dynamic frameworks</code> 也就是动态库，可以新建一个工程或者在现有工程下创建一个新的 <code>target</code> ，类型需要选择 <code>Coaoa Touch Framework</code> 。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509171953.jpg"></p>
<ul>
<li>打开项目配置，选择 <code>framework target</code> 的 <code>Build Phases</code> ，将需要暴露的 <code>.h</code> 文件拖拽到 <code>Public</code> 里面，将相应的 <code>.m</code> 文件拖拽到 <code>Compile source</code> 里面。</li>
<li>如果你的 <code>framework target</code> 名称与你想要打包构建的 <code>framework</code> 名称不一致，选中 <code>Build Settings</code> 选项卡，搜索 <code>Packaging</code> ，把 <code>Produce Module Name</code> 和 <code>Produce Name</code> 改成你想要构建的 <code>framework</code> 名称。</li>
<li>如果你使用了类别，那么你需要在 <code>Build Settings</code> 的 <code>Linking</code> 的 <code>Other Linker Flags</code> 里加上 <code>-all_load</code> 。</li>
<li>如果你想你的工程支持 <code>bitcode</code> ，需要在 <code>Other C Flags</code> 里加上 <code>-fembed-bitcode</code> 。</li>
<li>由于 <code>Carthage</code> 在 <code>build</code> 时，会自动将设置为 <code>Shared</code> 的 <code>framework target</code> 构建成 <code>framework</code> ，所以需要单击顶部 <code>target</code> ，在弹出选项中选中 <code>Manager Schemes</code>  ，将 <code>framework target</code> 的 <code>Shared</code> 选项选中。</li>
</ul>
<h3 id="3-构建-framework"><a href="#3-构建-framework" class="headerlink" title="3. 构建 framework"></a>3. 构建 framework</h3><ul>
<li><p>打开终端 <code>cd</code> 到工程目录下，执行以下命令开始打包 <code>framework</code> ，执行完成后会自动将 <code>framework</code> 文件保存在工程的 <code>Carthage/Build</code> 文件夹下。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">carthage build --no-skip-current</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后将生成的 <code>framework</code> 文件拖进测试项目进行测试即可，具体就不说了。</p>
</li>
</ul>
<h3 id="4-发布并打上-tag"><a href="#4-发布并打上-tag" class="headerlink" title="4. 发布并打上 tag"></a>4. 发布并打上 tag</h3><ul>
<li><p>测试没问题后，将工程 <code>push</code> 并打上 <code>tag</code> 即可，<code>tag</code> 名称必须是版本号。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git tag 1.0.0</span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure>
</li>
<li><p>这样你的项目就已经支持 <code>Carthage</code> 了，其他开发者就可以使用 <code>Carthage</code> 来管理你的项目依赖了，只需要将 <code>framework</code> 工程 <code>push</code> 上去即可，打包生成的测试 <code>framework</code> 文件不需要 <code>push</code>。</p>
</li>
</ul>
<h2 id="使用-Cathage-依赖第三方库"><a href="#使用-Cathage-依赖第三方库" class="headerlink" title="使用 Cathage 依赖第三方库"></a>使用 Cathage 依赖第三方库</h2><h3 id="1-创建并编辑-Cartfile"><a href="#1-创建并编辑-Cartfile" class="headerlink" title="1. 创建并编辑 Cartfile"></a>1. 创建并编辑 Cartfile</h3><ul>
<li><p>在工程目录下创建一个名为 <a href="https://link.jianshu.com/?t=https://github.com/Carthage/Carthage/blob/master/Documentation/Artifacts.md#cartfile">Cartfile</a> 的文件，可以使用以下命令创建。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">touch Cartfile</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后在  <a href="https://link.jianshu.com/?t=https://github.com/Carthage/Carthage/blob/master/Documentation/Artifacts.md#cartfile">Cartfile</a> 文件中指明想要依赖的第三方库。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">github</span> <span class="string">&quot;ReactiveCocoa/ReactiveCocoa&quot; // 不指定版本</span></span><br><span class="line"><span class="attr">github</span> <span class="string">&quot;ReactiveCocoa/ReactiveCocoa&quot; &gt;= 1.0.0 // 大于等于 1.0.0 版本</span></span><br><span class="line"><span class="attr">github</span> <span class="string">&quot;ReactiveCocoa/ReactiveCocoa&quot; ~&gt; 1.0.0 // 1.0.0 及以上的兼容版本 &lt; 2.0.0</span></span><br><span class="line"><span class="attr">github</span> <span class="string">&quot;ReactiveCocoa/ReactiveCocoa&quot; == 1.0.0 // 指定为 1.0.0 版本</span></span><br><span class="line"><span class="attr">github</span> <span class="string">&quot;ReactiveCocoa/ReactiveCocoa&quot; &quot;branch&quot; // 指定特定的分支、tag</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-更新并构建-framework"><a href="#2-更新并构建-framework" class="headerlink" title="2. 更新并构建 framework"></a>2. 更新并构建 framework</h3><ul>
<li><p>编辑完成后，在终端中 <code>cd</code> 到  <a href="https://link.jianshu.com/?t=https://github.com/Carthage/Carthage/blob/master/Documentation/Artifacts.md#cartfile">Cartfile</a> 所在目录下，执行以下命令构建第三方库的 <code>framework</code> 。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">carthage update --platform iOS</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行完成后会自动将第三方库 <code>clone</code> 到 <a href="https://link.jianshu.com/?t=https://github.com/Carthage/Carthage/blob/master/Documentation/Artifacts.md#carthagecheckouts">Carthage/Checkouts</a> 文件夹下，然后会自动打包成相应的 <code>framework</code> 文件，打包完的文件会保存在 <a href="https://link.jianshu.com/?t=https://github.com/Carthage/Carthage/blob/master/Documentation/Artifacts.md#carthagebuild">Carthage/Build</a> 文件夹下。</p>
</li>
</ul>
<h3 id="3-工程配置"><a href="#3-工程配置" class="headerlink" title="3. 工程配置"></a>3. 工程配置</h3><ul>
<li><p>打开工程 <code>target</code> 的 <code>General</code> 配置，将 <a href="https://link.jianshu.com/?t=https://github.com/Carthage/Carthage/blob/master/Documentation/Artifacts.md#carthagebuild">Carthage/Build</a> 下生成的 <code>framework</code> 文件拖拽到 <code>Linked Frameworks and Libraries</code> 选项中。</p>
</li>
<li><p>打开工程 <code>target</code> 的 <code>Build Phases</code>  配置，点击 <code>+</code> 选择 <code>New Run Script Phase</code> ，创建一个 <code>Script</code> ，添加以下内容：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/bin/carthage copy-frameworks</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后添加相应的内容到下面的 <code>Input Files</code>（举例）：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$(SRCROOT)/Carthage/Build/iOS/ReactiveCocoa.framework</span><br></pre></td></tr></table></figure>

<p><img data-src="https://file.karise.cn/blog/20190509172008.jpg"></p>
</li>
<li><p>这个脚本是为了处理 <a href="https://link.jianshu.com/?t=http://www.openradar.me/radar?id=6409498411401216">App Store 提交的 bug</a>，解决 <code>App</code> 因为使用的 <code>frameworks</code> 包含二进制图像的 <code>iOS</code> 模拟器在提交 <code>App Store</code> 时会被自动拒绝的问题。</p>
</li>
</ul>
<h3 id="4-Cathage-的目录结构"><a href="#4-Cathage-的目录结构" class="headerlink" title="4. Cathage 的目录结构"></a>4. Cathage 的目录结构</h3><p>在使用 <code>Carthage</code>  管理 <code>frameworks</code> 时，工程根目录下与 <code>Cartfile</code> 同级的会存在 <code>Cartfile.resolved</code> 文件和<br> <code>Carthage</code> 文件夹，<code>Carthage</code> 文件夹又包含 <code>Build</code> 和 <code>Checkouts</code>两个文件夹。</p>
<ul>
<li><code>Cartfile.resolved</code>文件<br> 包含已经添加的 <code>frameworks</code> 信息，包括依赖名称和当前使用的版本信息。</li>
<li><code>Checkouts</code> 文件夹<br> 包含所有 <code>frameworks</code> 源码信息，在执行 <code>carthage build</code> 时，会直接使用里面的 <code>project</code> 或者 <code>workspace</code> 相应的 <code>scheme</code> 来构建相应的 <code>framework</code> 。</li>
<li><code>Build</code> 文件夹<br> 包含所有的二进制构建结果，包括 <code>.framework</code> 二进制文件和 <code>.dSYM</code> 等文件。</li>
</ul>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Carthage</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】利用 iTunes 接口检查 App 版本更新</title>
    <url>/2018/01/18/iOS/201801181428/</url>
    <content><![CDATA[<blockquote>
<p><code>iOS</code> 想要检查 <code>App</code> 当前版本是否为最新，一般的方案大概都是服务器自己提供一个接口来获取 <code>App</code> 最新版本是多少，然后再做出相应提示是否需要更新，但是接口需要手动维护，应用要审核，还得等审核通过以后才能更新版本号，其实苹果提供了一个 <code>iTunes</code> 接口，能够查到 <code>App</code> 在 <code>AppStore</code> 上的状态信息，既省事又准确，下面记录一下具体实现方法。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="接口信息"><a href="#接口信息" class="headerlink" title="接口信息"></a>接口信息</h2><ul>
<li>这是 <a href="http://www.apple.com/itunes/affiliates/resources/documentation/itunes-store-web-service-search-api.html">iTunes 接口地址</a> ，有兴趣可以看一下，我们要用到的接口如下，<code>xxx</code> 处换成自己 <code>App</code> 的 <code>AppId</code> ，<code>AppId</code> 可以在 <code>iTunes Connect</code> 里面看到。</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">http://itunes.apple.com/lookup?id=xxx</span><br></pre></td></tr></table></figure>

<ul>
<li>接口返回的内容有很多，我就挑一些有用的截出来了。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;resultCount&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;results&quot;</span> : [&#123;</span><br><span class="line">        <span class="string">&quot;artistId&quot;</span> : <span class="string">&quot;开发者 ID&quot;</span>,</span><br><span class="line">        <span class="string">&quot;artistName&quot;</span> : <span class="string">&quot;开发者名称&quot;</span>,</span><br><span class="line">        <span class="string">&quot;trackCensoredName&quot;</span> : <span class="string">&quot;审查名称&quot;</span>,</span><br><span class="line">        <span class="string">&quot;trackContentRating&quot;</span> : <span class="string">&quot;评级&quot;</span>,</span><br><span class="line">        <span class="string">&quot;trackId&quot;</span> : <span class="string">&quot;应用程序 ID&quot;</span>,</span><br><span class="line">        <span class="string">&quot;trackName&quot;</span> = <span class="string">&quot;应用程序名称&quot;</span>,</span><br><span class="line">        <span class="string">&quot;trackViewUrl&quot;</span> = <span class="string">&quot;应用程序下载网址&quot;</span>,</span><br><span class="line">        <span class="string">&quot;userRatingCount&quot;</span> = <span class="string">&quot;用户评论数量&quot;</span>,</span><br><span class="line">        <span class="string">&quot;userRatingCountForCurrentVersion&quot;</span> = <span class="string">&quot;当前版本的用户评论数量&quot;</span>,</span><br><span class="line">        <span class="string">&quot;version&quot;</span> = <span class="string">&quot;版本号&quot;</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>下面是检查版本更新的具体实现方法，注意接口地址 <code>xxx</code> 处换成自己 <code>App</code> 的 <code>AppId</code> ，<code>App</code> 审核的时候版本肯定是比 <code>AppStore</code> 上高的，所以不用担心审核时会跳出更新提示。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 检查版本更新</span></span><br><span class="line">- (<span class="keyword">void</span>)checkVersion &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *url = <span class="string">@&quot;http://itunes.apple.com/lookup?id=xxx&quot;</span>;</span><br><span class="line">    [[AFHTTPSessionManager manager] POST:url parameters:<span class="literal">nil</span> progress:<span class="literal">nil</span> success:^(<span class="built_in">NSURLSessionDataTask</span> *task, <span class="keyword">id</span> responseObject) &#123;</span><br><span class="line">        DLog(<span class="string">@&quot;版本更新检查成功&quot;</span>);</span><br><span class="line">        <span class="built_in">NSArray</span> *results = responseObject[<span class="string">@&quot;results&quot;</span>];</span><br><span class="line">        <span class="keyword">if</span> (results &amp;&amp; results.count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">NSDictionary</span> *response = results.firstObject;</span><br><span class="line">            <span class="built_in">NSString</span> *currentVersion = [[<span class="built_in">NSBundle</span> mainBundle] objectForInfoDictionaryKey:<span class="string">@&quot;CFBundleShortVersionString&quot;</span>]; <span class="comment">// 软件的当前版本</span></span><br><span class="line">            <span class="built_in">NSString</span> *lastestVersion = response[<span class="string">@&quot;version&quot;</span>]; <span class="comment">// AppStore 上软件的最新版本</span></span><br><span class="line">            <span class="keyword">if</span> (currentVersion &amp;&amp; lastestVersion &amp;&amp; ![<span class="keyword">self</span> isLastestVersion:currentVersion compare:lastestVersion]) &#123;</span><br><span class="line">                <span class="comment">// 给出提示是否前往 AppStore 更新</span></span><br><span class="line">                <span class="built_in">UIAlertController</span> *alert = [<span class="built_in">UIAlertController</span> alertControllerWithTitle:<span class="string">@&quot;提示&quot;</span> message:<span class="string">@&quot;检测到有版本更新，是否前往 AppStore 更新版本。&quot;</span> preferredStyle:<span class="built_in">UIAlertControllerStyleAlert</span>];</span><br><span class="line">                [alert addAction:[<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@&quot;前往&quot;</span> style:<span class="built_in">UIAlertActionStyleDefault</span> handler:^(<span class="built_in">UIAlertAction</span> *action) &#123;</span><br><span class="line">                    <span class="built_in">NSString</span> *trackViewUrl = response[<span class="string">@&quot;trackViewUrl&quot;</span>]; <span class="comment">// AppStore 上软件的地址</span></span><br><span class="line">                    <span class="keyword">if</span> (trackViewUrl) &#123;</span><br><span class="line">                        <span class="built_in">NSURL</span> *appStoreURL = [<span class="built_in">NSURL</span> URLWithString:trackViewUrl];</span><br><span class="line">                        <span class="keyword">if</span> ([[<span class="built_in">UIApplication</span> sharedApplication] canOpenURL:appStoreURL]) &#123;</span><br><span class="line">                            [[<span class="built_in">UIApplication</span> sharedApplication] openURL:appStoreURL];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;]];</span><br><span class="line">                [alert addAction:[<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@&quot;取消&quot;</span> style:<span class="built_in">UIAlertActionStyleCancel</span> handler:<span class="literal">nil</span>]];</span><br><span class="line">                [<span class="keyword">self</span>.window.rootViewController presentViewController:alert animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; failure:^(<span class="built_in">NSURLSessionDataTask</span> *task, <span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">        DLog(<span class="string">@&quot;版本更新检查失败&quot;</span>);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 判断是否最新版本号（大于或等于为最新）</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isLastestVersion:(<span class="built_in">NSString</span> *)currentVersion compare:(<span class="built_in">NSString</span> *)lastestVersion &#123;</span><br><span class="line">    <span class="keyword">if</span> (currentVersion &amp;&amp; lastestVersion) &#123;</span><br><span class="line">        <span class="comment">// 拆分成数组</span></span><br><span class="line">        <span class="built_in">NSMutableArray</span> *currentItems = [[currentVersion componentsSeparatedByString:<span class="string">@&quot;.&quot;</span>] mutableCopy];</span><br><span class="line">        <span class="built_in">NSMutableArray</span> *lastestItems = [[lastestVersion componentsSeparatedByString:<span class="string">@&quot;.&quot;</span>] mutableCopy];</span><br><span class="line">        <span class="comment">// 如果数量不一样补0</span></span><br><span class="line">        <span class="built_in">NSInteger</span> currentCount = currentItems.count;</span><br><span class="line">        <span class="built_in">NSInteger</span> lastestCount = lastestItems.count;</span><br><span class="line">        <span class="keyword">if</span> (currentCount != lastestCount) &#123;</span><br><span class="line">            <span class="built_in">NSInteger</span> count = labs(currentCount - lastestCount); <span class="comment">// 取绝对值</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (currentCount &gt; lastestCount) &#123;</span><br><span class="line">                    [lastestItems addObject:<span class="string">@&quot;0&quot;</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    [currentItems addObject:<span class="string">@&quot;0&quot;</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 依次比较</span></span><br><span class="line">        <span class="built_in">BOOL</span> isLastest = <span class="literal">YES</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; currentItems.count; ++i) &#123;</span><br><span class="line">            <span class="built_in">NSString</span> *currentItem = currentItems[i];</span><br><span class="line">            <span class="built_in">NSString</span> *lastestItem = lastestItems[i];</span><br><span class="line">            <span class="keyword">if</span> (currentItem.integerValue != lastestItem.integerValue) &#123;</span><br><span class="line">                isLastest = currentItem.integerValue &gt; lastestItem.integerValue;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isLastest;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>版本更新</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】使用 Jenkins + Fastlane 持续集成 iOS 项目</title>
    <url>/2017/11/13/iOS/201711131450/</url>
    <content><![CDATA[<blockquote>
<p>持续集成（<a href="http://martinfowler.com/articles/continuousIntegration.html">Continuous Integration</a> 简称 <code>CI</code>）。<a href="https://jenkins.io/">Jenkins</a> 是一个开源项目，提供了一种易于使用的持续集成系统，使开发者从繁杂的集成中解脱出来，专注于更为重要的业务逻辑实现上。具体就不多说了，想要更多的了解可以去查一下，下面是集成方法。</p>
</blockquote>
<a id="more"></a>

<hr>
<p><strong>本文最终目的：</strong></p>
<ul>
<li>测试人员可登录 <code>Jenkins</code> 网页自行选择 <code>开发分支</code> 和 <code>打包类型</code> ，然后自动打包完成并自动上传至 <code>蒲公英</code> 或 <code>iTunes Connect</code> ，不再需要开发人员手动安装或上传。</li>
</ul>
<h2 id="1-配置-Fastlane"><a href="#1-配置-Fastlane" class="headerlink" title="1. 配置 Fastlane"></a>1. 配置 Fastlane</h2><p>由于项目的编译打包以及上传全部要依赖 <code>Fastlane</code> 来进行，所以在配置 <code>Jenkins</code> 之前要保证项目已经配置好了 <code>Fastlane</code> ，这里看我的另一篇文章：<a href="http://www.jianshu.com/p/662677cb1b47">【iOS 开发】使用 Fastlane 自动化打包并发布 iOS 项目</a> 。</p>
<h2 id="2-安装-Jenkins"><a href="#2-安装-Jenkins" class="headerlink" title="2. 安装 Jenkins"></a>2. 安装 Jenkins</h2><ul>
<li><p><code>Jenkins</code> 依赖于 <code>Java</code> 运行环境，因此需要先保证电脑已经安装了 <code>Java JDK</code> ，如果没有的话前往 <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">这里</a> 下载安装即可。</p>
</li>
<li><p>我这里是使用 <a href="https://brew.sh/">homebrew</a> 安装 <code>Jenkins</code> ，没有安装 <code>homebrew </code> 的输入以下命令安装一下。</p>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>千万不要去 <code>Jenkins</code> 官网下载 <code>pkg</code> 安装包安装，因为用安装包安装会自动生成一个共享用户 <code>jenkins</code>，而这个用户的权限和系统登录用户的权限不同，会造成大量的权限问题，我已经被坑惨了，用 <code>homebrew </code> 装是不会生成共享用户的。</p>
</li>
<li><p><code>homebrew</code> 安装完成后输入以下命令安装 <code>Jenkins</code> 。</p>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">brew install jenkins</span><br></pre></td></tr></table></figure>

<p><img data-src="https://file.karise.cn/blog/20190509165227.png" alt="安装"></p>
<ul>
<li>如果想要卸载直接执行以下命令即可卸载 <code>Jenkins</code> 。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">brew uninstall jenkins</span><br></pre></td></tr></table></figure>

<ul>
<li>安装完成后输入以下命令链接 <code>launchd</code> 配置文件。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ln -sfv /usr/<span class="built_in">local</span>/opt/jenkins/*.plist ~/Library/LaunchAgents</span><br></pre></td></tr></table></figure>

<ul>
<li>然后执行以下命令启动 <code>Jenkins</code> 。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">launchctl load ~/Library/LaunchAgents/homebrew.mxcl.jenkins.plist</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Jenkins</code> 默认是开机自动启动的，如果想关闭就执行以下命令即可关闭。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.jenkins.plist</span><br></pre></td></tr></table></figure>

<ul>
<li>接着打开浏览器，输入 <a href="http://localhost:8080/">http://localhost:8080</a> ，就可以看到 <code>Jenkins</code> 已经启动。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165242.png" alt="Jenkins"></p>
<ul>
<li><code>Jenkins</code> 默认端口号是 <code>8080</code> ，如果想要更改端口号的话可以用 <code>Xcode</code> 打开以下文件，将 <code>httpPort</code> 后面的 <code>8080</code> 改成你想要的端口号即可。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/opt/jenkins/homebrew.mxcl.jenkins.plist</span><br></pre></td></tr></table></figure>

<p><img data-src="https://file.karise.cn/blog/20190509165253.png" alt="修改端口"></p>
<h2 id="3-配置-Jenkins"><a href="#3-配置-Jenkins" class="headerlink" title="3. 配置 Jenkins"></a>3. 配置 Jenkins</h2><ul>
<li>等待启动完成后 ，会出现以下界面让你输入密码解锁。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165307.png" alt="Jenkins"></p>
<ul>
<li>密码就在上面提示的 <code>/Users/Jonzzs/.jenkins/secrets/initialAdminPassword</code> 文件中，打开 <code>initialAdminPassword</code> 文件将密码复制到浏览器解锁即可，然后点击第一个 <code>Install suggested plugins</code>。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165322.png" alt="Jenkins"></p>
<ul>
<li>然后等待插件全部安装完成。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165344.png" alt="Jenkins"></p>
<ul>
<li>安装完成后会跳出创建用户界面，按照提示创建用户即可。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165359.png" alt="Jenkins"></p>
<ul>
<li>最后到这个页面就算是安装完成了。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165414.png" alt="Jenkins"></p>
<h2 id="4-安装插件"><a href="#4-安装插件" class="headerlink" title="4. 安装插件"></a>4. 安装插件</h2><ul>
<li>在建任务之前需要先安装几个插件，前往 <code>系统管理</code> - <code>管理插件</code> ，在 <code>可选插件</code> 中搜索 <code>GitLab Plugin</code> 、<code>Gitlab Hook Plugin</code> 、<code>Xcode integration</code> 这三个插件，然后安装。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165429.png" alt="Jenkins"></p>
<h2 id="5-配置环境变量"><a href="#5-配置环境变量" class="headerlink" title="5. 配置环境变量"></a>5. 配置环境变量</h2><ul>
<li>前往 <code>系统管理</code> - <code>系统设置</code> 找到 <code>全局属性</code> ，然后添加以下三个环境变量。</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">LANG</span></span><br><span class="line"><span class="attr">en_US.UTF-8</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">LANGUAGE</span></span><br><span class="line"><span class="attr">en_US.UTF-8</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">LC_ALL</span></span><br><span class="line"><span class="attr">en_US.UTF-8</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://file.karise.cn/blog/20190509165443.png" alt="环境变量"></p>
<ul>
<li>这三个环境变量是用来修改编码格式的，如果不加下面脚本执行 <code>fastlane</code> 命令时会报错。</li>
</ul>
<h2 id="6-创建任务"><a href="#6-创建任务" class="headerlink" title="6. 创建任务"></a>6. 创建任务</h2><ul>
<li>插件安装完成以后就可以开始创建项目了，点击新建任务，输入你的项目名称。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165455.png" alt="Jenkins"></p>
<ul>
<li>勾选 <code>参数化构建过程</code> ，添加一个 <code>String Parameter</code> 和一个 <code>Choice Parameter</code> ，第一个 <code>ARCHIVE_BRANCH</code> 主要是输入要打包的项目分支，第二个 <code>ARCHIVE_TYPE</code> 是选择打包的类型，我这边 <code>beta</code> 是打包发布到 <code>蒲公英</code> ，<code>release</code> 是打包发布到 <code>iTunes Connect</code> ，如果你不需要这些参数可以跳过。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165507.png" alt="Jenkins"></p>
<ul>
<li>在 <code>源码管理</code> 输入你的仓库地址，地址为 <code>SSH</code> 方式，然后需要在点击 <code>Add</code> 添加 <code>SSH Key</code> 。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165518.png" alt="Jenkins"></p>
<ul>
<li><p>选择 <code>SSH Username with private key</code> 类型，<code>Username</code> 随便填，然后选择 <code>Enter directly</code> ，将自己 <code>SSH Key</code> 的私钥复制进去即可，注意是私钥不是公钥，<code>/Users/Jonzzs/.ssh/id_rsa</code> 在这个文件里。</p>
</li>
<li><p>如果自己电脑没有生成过 <code>SSH Key</code> ，就自己去查一下吧，这里就不重复了。</p>
</li>
<li><p>最后在 <code>构建</code> 中增加一个 <code>Execute Shell</code> ，主要用来填写脚本内容。</p>
</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165542.png" alt="Jenkins"></p>
<ul>
<li>填写以下脚本命令，<code>xxx</code> 处填写自己项目相应文件夹名，因为在执行 <code>fastlane</code> 指令之前需要进入 <code>fastlane</code> 文件夹所在目录，如果你的 <code>git</code> 根目录就是在项目目录的话，可以不用这句，然后点击 <code>保存</code> 即可。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout <span class="variable">$&#123;ARCHIVE_BRANCH&#125;</span></span><br><span class="line">git pull</span><br><span class="line"><span class="built_in">cd</span> ./xxx</span><br><span class="line">fastlane <span class="variable">$&#123;ARCHIVE_TYPE&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="7-开始打包"><a href="#7-开始打包" class="headerlink" title="7. 开始打包"></a>7. 开始打包</h2><ul>
<li>进入你创建的任务，点击 <code>Build with Parameters</code> ，然后输入要打包的项目分支以及类型，然后点击 <code>开始构建</code> 即可开始打包。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165554.png" alt="Jenkins"></p>
<ul>
<li>如果构建失败，也可以在 <code>Build History</code> 中点击 <code>Console Output</code> 查看控制台输出记录，找到错误原因。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509165605.png" alt="Jenkins"></p>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>Jenkins</tag>
        <tag>Fastlane</tag>
        <tag>持续集成</tag>
        <tag>自动化打包</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 Alfred 每次开机都提示请求通讯录权限的问题</title>
    <url>/2017/08/29/Mac/201708291128/</url>
    <content><![CDATA[<blockquote>
<p>安装完 <code>Alfred</code> 以后，每次开机都会提示请求通讯录权限，把设置里的通讯录关掉也没用，每次都提示又非常烦人，这里把解决方法记录一下。</p>
</blockquote>
<a id="more"></a>

<hr>
<ul>
<li>依次打开 <code>应用程序</code> - <code>Alfred 3.app</code> - <code>右键显示包内容</code> - <code>Contents</code> - <code>Frameworks</code> - <code>Alfred Framework.framework</code> - <code>Versions</code> - <code>A</code> 下找到一个叫 <code>Alfred Framework</code> 的文件。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509163906.png" alt="Alfred Framework"></p>
<ul>
<li>接着打开终端，输入以下命令（最后的 <code>-</code> 后面有个空格）。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo codesign -f -d -s -</span><br></pre></td></tr></table></figure>

<ul>
<li>然后将刚才的 <code>Alfred Framework</code> 文件直接拖到终端，接着回车输入用户密码。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509163917.png" alt="终端"></p>
<ul>
<li>最后提示 <code>replacing existing signature</code> 就表示成功了。</li>
</ul>
]]></content>
      <categories>
        <category>Mac 使用指南</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>Mac 使用指南</tag>
        <tag>Alfred</tag>
      </tags>
  </entry>
  <entry>
    <title>mac 删除自带 ABC 输入法的方法</title>
    <url>/2017/08/25/Mac/201708251803/</url>
    <content><![CDATA[<blockquote>
<p>在使用 <code>mac</code> 时相信很多都习惯使用第三方输入法，而 <code>mac</code> 规定必须保留一个自带的 <code>ABC</code> 输入法，这样导致平时在打字的时候，老是莫名其妙的自己切换成了自带的 <code>ABC</code> 输入法，还要老是切换回第三方输入法（快捷键是 <code>control + 空格</code>），这个问题困扰我好久了，终于被我找到了删除自带的 <code>ABC</code> 输入法的方法，这里分享一下。</p>
</blockquote>
<a id="more"></a>

<hr>
<ul>
<li><p>首先需要关闭 <code>mac</code> 系统的 <code>SIP</code> ，不然删不掉，不会关的可以查看我的另一篇文章：<a href="http://www.jianshu.com/p/d7d73b2846d1">mac 关闭系统完整性保护 SIP（System Integrity Protection）的方法</a> 。</p>
</li>
<li><p>关闭 <code>SIP</code> 重启完成后，先将输入法切换为系统自带的 <code>ABC</code> 输入法，然后打开终端输入以下命令。</p>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo open ~/Library/Preferences/com.apple.HIToolbox.plist</span><br></pre></td></tr></table></figure>

<ul>
<li>接着输入密码即可打开 <code>com.apple.HIToolbox.plist</code> 文件。（打开 <code>.plist</code> 文件需要安装有 <code>Xcode</code> 或者 <code>PlistEdit Pro</code> 也行）</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509164334.png" alt="com.apple.HIToolbox.plist"></p>
<ul>
<li>依次点开 <code>Root</code> - <code>AppleEnabledInputSources</code> ，会看到一列 <code>item</code> ，找到其中 <code>KeyboardLayout Name</code> 为 <code>ABC</code> 的那一列，将整列 <code>item</code> 删掉，然后 <code>command + S</code> 保存。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509164345.png" alt="com.apple.HIToolbox.plist"></p>
<ul>
<li>接着重启电脑，打开键盘设置，就可以看到系统自带的 <code>ABC</code> 输入法已经被删掉了。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509164402.png" alt="键盘"></p>
<ul>
<li>如果又想用回自带输入法，只要在 <code>偏好设置</code> - <code>键盘</code> - <code>输入法</code> 里，按 <code>+</code> 号，把自带的输入法重新添加就可以了。</li>
</ul>
]]></content>
      <categories>
        <category>Mac 使用指南</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>Mac 使用指南</tag>
        <tag>输入法</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】Cocoapods 中多个本地库相互依赖的方法</title>
    <url>/2018/10/10/iOS/201810101456/</url>
    <content><![CDATA[<blockquote>
<p>先说一下这里讲的是本地库，并不是私有库，如果想了解 <code>Cocoapods</code> 公共库或者私有库的支持方法可以看我的另一篇文章：<a href="https://www.jianshu.com/p/4d73369b8cf9">【iOS 开发】创建 podspec 文件，给自己写的框架添加 CocoaPos 支持</a> 。</p>
<p>最近公司项目需要以组件化的架构来重构项目，就是各个模块需要解耦拆分开来，利用 <code>Cocoapods</code> 的管理，主工程只需要将各个模块 <code>pod install</code> 引入即可，开始想要以私有库的方式集成，但是公司项目涉及到多个客户定制开发，定制分支比较多，如果用私有库方式必定要创建多个 <code>Git</code> 仓库分开管理，这样分支管理以及维护成本都大大提高，所以考虑采用本地库的方式将各个模块集成，好处是各个模块的库不需要打 <code>tag</code> 上传至私有库，可以在主工程直接管理各个模块的代码，下面就记录一下遇到的问题。</p>
</blockquote>
<a id="more"></a>

<hr>
<p>至于如何给自己的模块代码添加 <code>Cocoapods</code> 支持我这边就不说了，不会的看上面贴出来的另一篇文章即可。</p>
<h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><p>我的项目工程一共分为以下几个组件：</p>
<ul>
<li>测试主工程 (<code>TestProject</code>)</li>
<li>测试组件1 (<code>TestModule1</code>)</li>
<li>测试组件2 (<code>TestModule2</code>)</li>
</ul>
<p>然后 <code>测试主工程</code> 需要依赖 <code>测试组件1</code> ，而 <code>测试组件1</code> 又需要依赖 <code>测试组件2</code> ，两个组件都是以本地库方式依赖，所以这里就涉及到 <code>Cocoapods</code> 本地库依赖本地库，因为是本地库并没有上传，所以在 <code>podspec</code> 中依赖时会出现找不到库的情况，下面就来说一下解决方法。</p>
<h2 id="相互依赖的方法"><a href="#相互依赖的方法" class="headerlink" title="相互依赖的方法"></a>相互依赖的方法</h2><h3 id="测试组件2"><a href="#测试组件2" class="headerlink" title="测试组件2"></a>测试组件2</h3><p>由于 <code>测试组件2</code> 并不需要任何依赖，所以 <code>podspec</code> 如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">Pod</span>:<span class="string">:Spec.new do |s|</span></span><br><span class="line">    <span class="meta">s.name</span>                      = <span class="string">&#x27;TestModule2&#x27;</span></span><br><span class="line">    <span class="meta">s.version</span>                   = <span class="string">&#x27;1.0.0&#x27;</span></span><br><span class="line">    <span class="meta">s.summary</span>                   = <span class="string">&#x27;测试组件2&#x27;</span></span><br><span class="line">    <span class="meta">s.homepage</span>                  = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">    <span class="meta">s.license</span>                   = <span class="string">&#123; :type =&gt; &#x27;MIT&#x27;, :file =&gt; &#x27;LICENSE&#x27; &#125;</span></span><br><span class="line">    <span class="meta">s.author</span>                    = <span class="string">&#123; &#x27;Karise&#x27; =&gt; &#x27;xxx&#x27; &#125;</span></span><br><span class="line">    <span class="meta">s.source</span>                    = <span class="string">&#123; :git =&gt; &#x27;&#x27;, :tag =&gt; s.version &#125;</span></span><br><span class="line">    <span class="meta">s.platform</span>                  = <span class="string">:ios</span></span><br><span class="line">    <span class="meta">s.ios.deployment_target</span>     = <span class="string">&#x27;9.0&#x27;</span></span><br><span class="line">    <span class="meta">s.swift_version</span>         	= <span class="string">&#x27;4.2&#x27;</span></span><br><span class="line">    <span class="meta">s.source_files</span>              = <span class="string">&#x27;TestModule2/*.swift&#x27;</span></span><br><span class="line"><span class="attr">end</span></span><br></pre></td></tr></table></figure>

<h3 id="测试组件1"><a href="#测试组件1" class="headerlink" title="测试组件1"></a>测试组件1</h3><p>由于 <code>测试组件1</code> 需要依赖 <code>测试组件2</code> ，所以需要添加 <code>s.dependency</code> 依赖， <code>podspec</code> 如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">Pod</span>:<span class="string">:Spec.new do |s|</span></span><br><span class="line">    <span class="meta">s.name</span>                      = <span class="string">&#x27;TestModule1&#x27;</span></span><br><span class="line">    <span class="meta">s.version</span>                   = <span class="string">&#x27;1.0.0&#x27;</span></span><br><span class="line">    <span class="meta">s.summary</span>                   = <span class="string">&#x27;测试组件1&#x27;</span></span><br><span class="line">    <span class="meta">s.homepage</span>                  = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">    <span class="meta">s.license</span>                   = <span class="string">&#123; :type =&gt; &#x27;MIT&#x27;, :file =&gt; &#x27;LICENSE&#x27; &#125;</span></span><br><span class="line">    <span class="meta">s.author</span>                    = <span class="string">&#123; &#x27;Karise&#x27; =&gt; &#x27;xxx&#x27; &#125;</span></span><br><span class="line">    <span class="meta">s.source</span>                    = <span class="string">&#123; :git =&gt; &#x27;&#x27;, :tag =&gt; s.version &#125;</span></span><br><span class="line">    <span class="meta">s.platform</span>                  = <span class="string">:ios</span></span><br><span class="line">    <span class="meta">s.ios.deployment_target</span>     = <span class="string">&#x27;9.0&#x27;</span></span><br><span class="line">    <span class="meta">s.swift_version</span>         	= <span class="string">&#x27;4.2&#x27;</span></span><br><span class="line">    <span class="meta">s.source_files</span>              = <span class="string">&#x27;TestModule1/*.swift&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">s.dependency</span> <span class="string">&#x27;TestModule2&#x27;  # 这里需要依赖测试组件2</span></span><br><span class="line"><span class="attr">end</span></span><br></pre></td></tr></table></figure>

<h3 id="测试主工程"><a href="#测试主工程" class="headerlink" title="测试主工程"></a>测试主工程</h3><p>当测试主工程在 <code>podfile</code> 集成 <code>测试组件1</code> 和 <code>测试组件2</code> 时，一般来说，因为 <code>TestModule1</code> 已经在 <code>podspec</code> 中 <code>s.dependency</code> 依赖了 <code>TestModule2</code> ，所以直接 <code>pod &#39;TestModule1&#39;</code> 应该就会自动把 <code>TestModule2</code> 也 <code>pod</code> 下来，但是因为两个组件都是本地库，所以 <code>cocoapods</code> 会找不到 <code>TestModule2</code> 这个本地库，这时候只要在 <code>podfile</code> 中将 <code>TestModule2</code> 也指明本地地址即可，<code>podfile</code> 如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">platform</span> :<span class="string">ios, &#x27;9.0&#x27;</span></span><br><span class="line"><span class="attr">target</span> <span class="string">&#x27;TestProject&#x27; do</span></span><br><span class="line">  <span class="attr">use_frameworks!</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">pod</span> <span class="string">&#x27;TestModule1&#x27;,   :path =&gt;&#x27;../TestModule1/&#x27;</span></span><br><span class="line">  <span class="attr">pod</span> <span class="string">&#x27;TestModule2&#x27;,   :path =&gt;&#x27;../TestModule2/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">end</span></span><br></pre></td></tr></table></figure>

<p>这里将 <code>TestModule2</code> 的地址也指明，<code>pod &#39;TestModule1&#39;</code> 时就不会出现找不到依赖的情况。</p>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Cocoapods</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】导航栏各种右滑返回失效的解决方法</title>
    <url>/2017/12/12/iOS/201712121005/</url>
    <content><![CDATA[<blockquote>
<p><code>iOS</code> 的几乎全部页面都是需要右滑返回的，否则用户体验会大打折扣，但是在开发过程中经常会碰到某些页面右滑返回失效的情况，下面记录一下各种情况下右滑返回失效的解决方法。</p>
</blockquote>
<a id="more"></a>

<hr>
<h3 id="自定义返回按钮时失效"><a href="#自定义返回按钮时失效" class="headerlink" title="自定义返回按钮时失效"></a>自定义返回按钮时失效</h3><ul>
<li>当你重写 <code>self.navigationItem.leftBarButtonItem</code> 之后，自带的返回按钮就会被覆盖，右滑返回就会失效，解决办法只要加入下面这句代码即可。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.navigationController.interactivePopGestureRecognizer.delegate = <span class="keyword">self</span>; <span class="comment">// 解决右滑返回失效问题</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>然后你可以使用下面这句代码来控制是否允许右滑返回，这句代码要加在 <code>viewDidAppear</code> 里面，否则多个页面切换时会出现异常。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidAppear:(<span class="built_in">BOOL</span>)animated &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidAppear:animated];</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span>.navigationController.interactivePopGestureRecognizer setEnabled:_isShowBackButton]; <span class="comment">// 是否允许右滑返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="UIScrollView-页面中失效"><a href="#UIScrollView-页面中失效" class="headerlink" title="UIScrollView 页面中失效"></a>UIScrollView 页面中失效</h3><ul>
<li>当使用 <code>UIScrollView</code> 、<code>UITableView</code> 、<code>UICollectionView</code> 等滑动视图的左右滑动时，滑动手势就会和右滑返回的手势冲突，右滑返回就会失效，解决办法只要加入下面这句代码即可。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解决右滑返回失效的问题</span></span><br><span class="line">[scrollView.panGestureRecognizer requireGestureRecognizerToFail:<span class="keyword">self</span>.navigationController.interactivePopGestureRecognizer];</span><br></pre></td></tr></table></figure>

<h3 id="UIWebView-页面中失效"><a href="#UIWebView-页面中失效" class="headerlink" title="UIWebView 页面中失效"></a>UIWebView 页面中失效</h3><ul>
<li><code>UIWebView</code> 页面比较特殊，不仅右滑返回会失效，自定义的手势也会全部失效，因为 <code>UIWebView</code> 中已经内部集成了点击、滑动等多个手势，上面的方法在 <code>UIWebView</code> 中并没有作用，解决办法是加入以下允许多个手势并发的代理方法。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 允许多个手势并发</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)gestureRecognizer:(<span class="built_in">UIGestureRecognizer</span> *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(<span class="built_in">UIGestureRecognizer</span> *)otherGestureRecognizer &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>iOS 开发问题</tag>
        <tag>导航栏</tag>
        <tag>右滑返回失效</tag>
      </tags>
  </entry>
  <entry>
    <title>mac 删除 Windows 或 EFI Boot 启动盘的方法</title>
    <url>/2017/11/21/Mac/201711211402/</url>
    <content><![CDATA[<blockquote>
<p>由于我的 <code>mac</code> 之前装了 <code>Windows</code> 双系统，然后 <code>mac</code> 系统升级后，我想把 <code>Windows</code> 系统给删掉，但是发现升级 <code>mac</code> 系统以后不能用 <code>Boot Camp</code> 删除 <code>Windows</code> 了，然后我就用 <code>磁盘工具</code> 把 <code>Windows</code> 分区给删除合并到 <code>mac</code> 分区了，但是发现系统虽然删除了，但是开机按住 <code>option</code> 键还是会出现 <code>Windows</code> 启动盘，虽然没什么影响但是强迫症当然不能忍 ，下面就记录一下解决方法。</p>
</blockquote>
<a id="more"></a>

<hr>
<p><img data-src="https://file.karise.cn/blog/20190509163832.jpg" alt="启动界面"></p>
<ul>
<li>因为以下命令需要 <code>root</code> 用户执行，所以打开终端执行以下命令切换到 <code>root</code> 用户，输入密码后回车即可。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure>

<ul>
<li>接着在终端执行以下命令，作用是在 <code>Macintosh HD</code> 根目录新建一个目录 <code>mnt</code> 。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir /mnt</span><br></pre></td></tr></table></figure>

<ul>
<li>接着在终端执行以下命令，作用是将该 <code>windows</code> 盘挂在到 <code>/mnt</code> 目录下。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo mount -t msdos /dev/disk0s1 /mnt</span><br></pre></td></tr></table></figure>

<ul>
<li><p>打开 <code>Finder</code> ，在 <code>Macintosh HD</code> 根目录会看到一个叫 <code>EFI</code> 的磁盘（桌面应该也会显示这个磁盘，和 <code>Finder</code> 置有关）。</p>
</li>
<li><p>打开 <code>EFI</code> 磁盘，这里要说一下，如果你只想删除 <code>Windows</code> 启动盘，可以找到有个 <code>Microsoft</code> 文件夹删除即可，但是如果只删除这个的话，开机还是会显示一个叫 <code>EFI Boot</code> 的启动盘，个人建议将 <code>EFI</code> 磁盘里面的东西全部删除，这样 <code>Windows</code> 和 <code>EFI Boot</code> 启动盘就都没了，亲测有效无副作用。</p>
</li>
<li><p>删除以后清空废纸篓然后把 <code>EFI</code> 磁盘推出，然后重启按住 <code>option</code> 键检验是否删除。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Mac 使用指南</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>mac</tag>
        <tag>Mac 使用指南</tag>
        <tag>EFI Boot</tag>
        <tag>启动盘</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】利用 Carthage 将项目打包 Framework 并依赖 CocoaPods 第三方库的方法</title>
    <url>/2018/09/29/iOS/201809291052/</url>
    <content><![CDATA[<blockquote>
<p>最近需要将自己公司的项目的打包成 <code>Framework</code> 然后以 <code>SDK</code> 的形式来供客户使用，但是项目中用到不少 <code>Cocoapods</code> 第三方的库，怎么才能将项目打包 <code>Framework</code> 并依赖 <code>CocoaPods</code> 第三方库呢，网上找了很久都没有找到一篇专门说这个的，让我走了很多的坑，手动打包 <code>Framework</code> 太麻烦，开始尝试了 <a href="https://github.com/CocoaPods/cocoapods-packager">cocoapods-packager</a> 方式打包，但是这个插件貌似对于 <code>Swift</code> 项目的支持并不是很好，尝试很久都没有打包成功，作者貌似也不是很活跃，无奈放弃，最后选择用 <code>Carthage</code> 方式来打包 <code>Framework</code> ，下面就分享一下利用 <code>Carthage</code> 将项目打包 <code>Framework</code> 并依赖 <code>CocoaPods</code> 第三方库的方法。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="创建工程并打包-Framework"><a href="#创建工程并打包-Framework" class="headerlink" title="创建工程并打包 Framework"></a>创建工程并打包 Framework</h2><p>我这边演示的是 <code>Swift</code> 工程，<code>Objective-C</code> 也是一样的，<a href="https://github.com/karise-guo/FrameworkDemo">演示Demo</a> 我会保留，不懂的可以看一下。</p>
<h3 id="1-创建-Framework-工程"><a href="#1-创建-Framework-工程" class="headerlink" title="1. 创建 Framework 工程"></a>1. 创建 Framework 工程</h3><ul>
<li><p>新建一个工程或者在现有工程下创建一个新的 <code>target</code> ，类型需要选择 <code>Coaoa Touch Framework</code> ，这里说一下我的 <code>Xcode</code> 版本是 <code>10.0.0</code> 。</p>
<p><img data-src="https://file.karise.cn/blog/20190509172139.jpg"></p>
</li>
<li><p>由于 <code>Carthage</code> 在 <code>build</code> 时，会自动将设置为 <code>Shared</code> 的 <code>framework target</code> 构建成 <code>framework</code> ，所以需要单击顶部 <code>target</code> ，在弹出选项中选中 <code>Manager Schemes</code>  ，将 <code>framework target</code> 的 <code>Shared</code> 选项选中。</p>
</li>
</ul>
<h3 id="2-创建-podfile-集成第三方库"><a href="#2-创建-podfile-集成第三方库" class="headerlink" title="2. 创建 podfile 集成第三方库"></a>2. 创建 podfile 集成第三方库</h3><ul>
<li><p>假设我的代码中要用到 <code>Alamofire</code> 这个第三方库（用于演示），然后使用 <code>CocoaPods</code> 在工程中集成 <code>Alamofire</code> ，集成方法和普通项目一模一样。</p>
</li>
<li><p>创建 <code>podfile</code> 并加入 <code>pod &#39;Alamofire&#39;</code> ，然后执行 <code>pod install</code> ，然后选择工程下的 <code>FrameworkDemo.xcworkspace</code> 重新打开工程。</p>
<p><img data-src="https://file.karise.cn/blog/20190509172153.jpg"></p>
</li>
</ul>
<h3 id="3-创建测试代码"><a href="#3-创建测试代码" class="headerlink" title="3. 创建测试代码"></a>3. 创建测试代码</h3><ul>
<li><p>我这边创建了一个 <code>TestAlamofire.swift</code> 的测试文件，并在里面使用了 <code>Alamofire</code> 这个库，一会打包就打包这个文件。</p>
</li>
<li><p>然后编译一下，编译通过，测试代码如下。</p>
<p><img data-src="https://file.karise.cn/blog/20190509172206.jpg"></p>
</li>
</ul>
<h3 id="4-构建-framework"><a href="#4-构建-framework" class="headerlink" title="4. 构建 framework"></a>4. 构建 framework</h3><ul>
<li><p>打开终端 <code>cd</code> 到工程目录下，执行以下命令开始打包 <code>framework</code> ，执行完成后会自动将 <code>framework</code> 文件保存在工程的 <code>Carthage/Build/iOS</code> 文件夹下。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">carthage build --no-skip-current</span><br></pre></td></tr></table></figure>

<p><img data-src="https://file.karise.cn/blog/20190509172218.jpg"></p>
</li>
<li><p>到此 <code>framework</code> 就打包完成了，想了解更多关于 <code>Carthage</code> 打包的详情，可以看我另一篇文章：<a href="https://www.jianshu.com/p/8ccb26206730">【iOS 开发】给自己项目添加 Carthage 支持的方法</a> ，方法基本一致，我这边就不详述了。</p>
</li>
</ul>
<h2 id="将-Framework-传到-Cocoapods-仓库"><a href="#将-Framework-传到-Cocoapods-仓库" class="headerlink" title="将 Framework 传到 Cocoapods 仓库"></a>将 Framework 传到 Cocoapods 仓库</h2><p>由于打包好的 <code>framework</code> 需要依赖 <code>Alamofire</code> 这个库，单独运行会报错，如果直接将 <code>framework</code> 给客户让客户自己依赖 <code>Alamofire</code> 的话，并不友好，所以打算将 <code>framework</code> 传到 <code>Cocoapods</code> 仓库，并指定 <code>Alamofire</code> 依赖库，这样客户直接 <code>pod</code> 我们封装好的库即可。</p>
<h3 id="1-创建-Git-仓库"><a href="#1-创建-Git-仓库" class="headerlink" title="1. 创建 Git 仓库"></a>1. 创建 Git 仓库</h3><ul>
<li>先创建一个 <code>Git</code> 仓库，仓库中必须包含一个 <code>License</code> 文件，类型为 <code>MIT License</code> 。</li>
<li>接着 <code>Clone</code> 到本地，将刚才打包的 <code>Framework</code> 放进去，我这边就直接将测试工程放进去了。</li>
</ul>
<h3 id="2-创建-podspec-文件"><a href="#2-创建-podspec-文件" class="headerlink" title="2. 创建 podspec 文件"></a>2. 创建 podspec 文件</h3><ul>
<li><p>在仓库目录下新建一个 <code>podspec</code> 文件，文件名就是 <code>pod</code> 库的名称，我这边叫 <code>FrameworkDemo_Gzz.podspec</code> ，或者使用以下命令创建。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pod spec create FrameworkDemo_Gzz</span><br></pre></td></tr></table></figure>

<p><img data-src="https://file.karise.cn/blog/20190509172230.jpg"></p>
</li>
<li><p>然后打开 <code>podspec</code> 文件，内容编辑如下，内容的具体意思我这边就不详述了。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">Pod</span>:<span class="string">:Spec.new do |s|</span></span><br><span class="line">  <span class="meta">s.name</span>                      = <span class="string">&#x27;FrameworkDemo_Gzz&#x27;</span></span><br><span class="line">  <span class="meta">s.version</span>                   = <span class="string">&#x27;1.0.0&#x27;</span></span><br><span class="line">  <span class="meta">s.summary</span>                   = <span class="string">&#x27;测试 Framework&#x27;</span></span><br><span class="line">  <span class="meta">s.homepage</span>                  = <span class="string">&#x27;https://github.com/karise-guo/FrameworkDemo&#x27;</span></span><br><span class="line">  <span class="meta">s.license</span>                   = <span class="string">&#123; :type =&gt; &#x27;MIT&#x27;, :file =&gt; &#x27;LICENSE&#x27; &#125;</span></span><br><span class="line">  <span class="meta">s.author</span>                    = <span class="string">&#123; &#x27;Karise&#x27; =&gt; &#x27;292710547@qq.com&#x27; &#125;</span></span><br><span class="line">  <span class="meta">s.source</span>                    = <span class="string">&#123; :git =&gt; &#x27;https://github.com/karise-guo/FrameworkDemo.git&#x27;, :tag =&gt; s.version &#125;</span></span><br><span class="line">  <span class="meta">s.platform</span>                  = <span class="string">:ios</span></span><br><span class="line">  <span class="meta">s.ios.deployment_target</span>     = <span class="string">&#x27;9.0&#x27;</span></span><br><span class="line">  <span class="meta">s.swift_version</span>             = <span class="string">&#x27;4.0&#x27;</span></span><br><span class="line">  <span class="meta">s.ios.vendored_frameworks</span>   = <span class="string">&#x27;Carthage/Build/iOS/*.framework&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">  # 依赖库</span></span><br><span class="line">  <span class="meta">s.dependency</span> <span class="string">&#x27;Alamofire&#x27;</span></span><br><span class="line"><span class="attr">end</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-验证-podspec-文件"><a href="#3-验证-podspec-文件" class="headerlink" title="3. 验证 podspec 文件"></a>3. 验证 podspec 文件</h3><ul>
<li><p>编辑完成后，打开终端 <code>cd</code> 到 <code>podspec</code> 所在文件目录下，输入以下命令来验证编译是否通过。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pod lib lint --allow-warnings --verbose</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证通过会显示 <code>FrameworkDemo_Gzz passed validation</code> 。</p>
</li>
</ul>
<h3 id="4-给项目打上-tag-并上传"><a href="#4-给项目打上-tag-并上传" class="headerlink" title="4. 给项目打上 tag 并上传"></a>4. 给项目打上 tag 并上传</h3><ul>
<li><p><code>podspec</code> 文件验证成功后，先将改动后的文件 <code>commit</code> 提交，接着 <code>push</code> 推送到远程仓库 。</p>
</li>
<li><p>因为 <code>CocoaPods</code> 是依赖项目的 <code>tag</code> 版本的，所以必须打上 <code>tag</code> 版本，执行以下命令打上 <code>tag</code> 版本，版本名必须要和之前<code>podspec</code> 文件中的 <code>s.version</code> 一致。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git tag <span class="string">&quot;1.0.0&quot;</span> // 为 git 提交打上 tag</span><br><span class="line">git push --tags // 将 tag 推送到远程仓库</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="5-发布到-CocoaPods"><a href="#5-发布到-CocoaPods" class="headerlink" title="5. 发布到 CocoaPods"></a>5. 发布到 CocoaPods</h3><ul>
<li><p>打开终端 <code>cd</code> 到 <code>podspec</code> 所在文件目录下，输入以下命令来发布到 <code>CocoaPods</code> 。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pod trunk push *.podspec --allow-warnings</span><br></pre></td></tr></table></figure>
</li>
<li><p>发布成功会显示 <code>successfully published</code> 。</p>
</li>
<li><p>到此就发布完成了，我这边讲的比较简单，如果发布 <code>CocoaPods</code> 遇到什么问题或者报错，可以看我的另一篇文章：<a href="https://www.jianshu.com/p/4d73369b8cf9">【iOS 开发】创建 podspec 文件，给自己写的框架添加 CocoaPos 支持</a> ，我这边就不详述了。</p>
</li>
</ul>
<h2 id="测试-Framework-的-Pod-库"><a href="#测试-Framework-的-Pod-库" class="headerlink" title="测试 Framework 的 Pod 库"></a>测试 Framework 的 Pod 库</h2><ul>
<li><p>新建一个测试工程 <code>Test</code> ，然后将刚才传到 <code>CocoaPods</code> 的库引入，然后执行 <code>pod install</code> 。</p>
<p><img data-src="https://file.karise.cn/blog/20190509172241.jpg"></p>
</li>
<li><p>可以看到 <code>pod</code> 将我们的 <code>framework</code> 和 <code>Alamofire</code> 依赖库一起 <code>pod</code> 下来了。</p>
<p><img data-src="https://file.karise.cn/blog/20190509172255.jpg"></p>
</li>
<li><p>然后在控制器中 <code>import FrameworkDemo</code> 引入我们的库，执行库中用到 <code>Alamofire</code> 的一个方法。</p>
<p><img data-src="https://file.karise.cn/blog/20190509172325.jpg"></p>
</li>
<li><p>编译运行成功，打印结果正常。</p>
<p><img data-src="https://file.karise.cn/blog/20190509172340.jpg"></p>
</li>
</ul>
<blockquote>
<p><a href="https://github.com/karise-guo/FrameworkDemo">演示Demo</a> 在这，有不懂的地方可以看一下，希望能够帮助大家少走一些坑。</p>
</blockquote>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>CocoaPods</tag>
        <tag>Framework</tag>
        <tag>Carthage</tag>
      </tags>
  </entry>
  <entry>
    <title>mac 终端使用自动补全时忽略大小写的方法</title>
    <url>/2017/12/06/Mac/201712061436/</url>
    <content><![CDATA[<blockquote>
<p><code>mac</code> 终端在使用 <code>tab</code> 补全路径时是默认大小写敏感的，以下方法可以忽略大小写，方法同样适用于 <code>iTerm2</code> 。</p>
</blockquote>
<a id="more"></a>

<hr>
<ul>
<li>打开终端输入以下命令。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nano .inputrc</span><br></pre></td></tr></table></figure>

<ul>
<li>接着将以下命令复制进去。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> completion-ignore-case on</span><br><span class="line"><span class="built_in">set</span> show-all-if-ambiguous on</span><br><span class="line">TAB: menu-complete</span><br></pre></td></tr></table></figure>

<p><img data-src="https://file.karise.cn/blog/20190509163847.png" alt="终端"></p>
<ul>
<li><p>然后按下 <code>control + O</code> 之后回车保存，重启终端即可（注意是 <code>control</code> 不是 <code>command</code>）。</p>
</li>
<li><p>终端重启后，就会发现已经忽略大小写了。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Mac 使用指南</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>终端</tag>
        <tag>iTerm2</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 macOS 版 iTunes 在 AppStore 无法更新的问题</title>
    <url>/2017/04/14/Mac/201704141640/</url>
    <content><![CDATA[<blockquote>
<p>相信用 <code>mac</code> 系统的都遇到过，每次 <code>iTunes</code> 更新版本，<code>mac AppStore</code> 提示更新了，但是点击更新，却怎么也更新不了，很无奈，接下来告诉大家如何解决这个问题。</p>
</blockquote>
<a id="more"></a>

<hr>
<p>很多人选择的办法是将自带的 <code>iTunes</code> 删掉，然后去网上直接下载 <code>iTunes</code> 的 <code>dmg</code> 安装包来直接安装，这也是一个办法，然后接下来告诉大家如何在 <code>mac AppStore</code> 直接更新 <code>iTunes</code> 。</p>
<ul>
<li>打开 <code>系统偏好设置</code> - <code>网络</code> - <code>高级</code>。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509164019.png" alt="如图"></p>
<ul>
<li>选择 <code>DNS</code> ，点击左下角的 <code>+</code> 号。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509164030.png" alt="如图"></p>
<ul>
<li>输入 <code>8.8.8.8</code> 。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509164042.png" alt="如图"></p>
<ul>
<li><p>点击 <code>好</code>，接着别忘了要 <code>应用</code> 一下。</p>
</li>
<li><p>打开 <code>mac AppStore</code> ，开始更新吧，就是这么神奇。</p>
</li>
</ul>
<p><strong>注意：</strong>更新完以后，一定要把刚才添加的 <code>8.8.8.8</code> 给删除掉，否则上网会变的非常之慢，切记！！</p>
]]></content>
      <categories>
        <category>Mac 使用指南</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>macOS</tag>
        <tag>Mac 使用指南</tag>
      </tags>
  </entry>
  <entry>
    <title>mac 关闭系统完整性保护 SIP（System Integrity Protection）的方法</title>
    <url>/2017/07/03/Mac/201707031450/</url>
    <content><![CDATA[<blockquote>
<p>在 <code>OS X El Capitan</code> 中有一个跟安全相关的模式叫 <code>SIP（System Integrity Protection ）</code> ，它禁止让软件以 <code>root</code> 身份来在 <code>mac</code> 上运行，并且对于目录 <code>/System 、/sbin、/usr（不包含/usr/local/）</code> 仅仅供系统使用，其它用户或者程序无法直接使用，下面记录一下禁用 <code>SIP</code> 的方法。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="禁用-SIP-保护机制的步骤"><a href="#禁用-SIP-保护机制的步骤" class="headerlink" title="禁用 SIP 保护机制的步骤"></a>禁用 SIP 保护机制的步骤</h2><ul>
<li><p>重启系统，按住 <code>Command + R</code> 进入恢复模式。</p>
</li>
<li><p>点击顶部菜单栏 <code>实用工具</code> 中的 <code>终端</code> 。</p>
</li>
<li><p>输入以下命令来禁用 <code>SIP</code> 保护机制。</p>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">csrutil <span class="built_in">disable</span></span><br></pre></td></tr></table></figure>

<ul>
<li>执行后输出以下信息表示禁用成功。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Successfully disabled System Integrity Protection. Please restart the machine for the changes to take effect.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>然后再次重启系统即可。</p>
</li>
<li><p>重新打开 <code>SIP</code> 的方法同上，只是终端中输入的命令改为以下命令。</p>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">csrutil <span class="built_in">enable</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Mac 使用指南</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>macOS</tag>
        <tag>Mac 使用指南</tag>
        <tag>SIP</tag>
      </tags>
  </entry>
  <entry>
    <title>Magic Mouse 苹果鼠标移动速度改快的方法</title>
    <url>/2018/01/20/Mac/201801201111/</url>
    <content><![CDATA[<blockquote>
<p>买了一个 <code>Magic Mouse</code> 之后发现移动速度比之前鼠标要慢好多，设置里已经设置到最快了还是很慢，非常不习惯，最后查到可以在终端里输入命令调整 <code>Magic Mouse</code> 的移动速度，下面记录一下方法。</p>
</blockquote>
<a id="more"></a>

<hr>
<ul>
<li>打开终端输入以下命令可以查看当前鼠标的速度，一般设置里调到最快的话，就是 <code>3</code> 的速度。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">defaults <span class="built_in">read</span> -g com.apple.mouse.scaling</span><br></pre></td></tr></table></figure>

<ul>
<li>然后输入以下命令可以设置鼠标的速度，建议设置到 <code>6~8</code> 左右，不然移动速度太快了，可以根据自己需求来调，我自己设置速度为 <code>7</code> 。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">defaults write -g com.apple.mouse.scaling 7</span><br></pre></td></tr></table></figure>

<ul>
<li>然后重启电脑，必须要重启电脑以后设置才会生效，而且生效以后就不要再去设置里面调鼠标速度了，不然会还原覆盖掉之前改的速度。</li>
</ul>
]]></content>
      <categories>
        <category>Mac 使用指南</category>
      </categories>
      <tags>
        <tag>Mac 使用指南</tag>
        <tag>Magic Mouse</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS Sierra 10.12+ 软件提示已损坏，移除到废纸篓的解决方法</title>
    <url>/2017/04/05/Mac/201704051635/</url>
    <content><![CDATA[<blockquote>
<p>在升级了 <code>macOS Sierra 10.12+</code> 版本前，只要在 <code>设置</code> - <code>安全性与隐私</code> 中设置 <code>任何来源</code> 选项即可，但是升级过 <code>macOS Sierra 10.12+</code> 版本后，这个选项就不见了，于是运行很多个人开发者软件都会提示 <code> xx 软件已损坏，打不开。您应该将它移到废纸篓。</code> 解决方法请继续看下文。</p>
</blockquote>
<a id="more"></a>

<hr>
<ul>
<li>刚升级了 <code>macOS Sierra 10.12+</code> 版本后，<code>任何来源</code> 选项是消失的。</li>
</ul>
<p><strong>如下图：</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509163936.png" alt="任何来源消失"></p>
<ul>
<li>接下来，打开终端，然后输入以下命令，输入后，可能会让你输入电脑的密码。（屏幕上不会显示密码，你管你输入就可以了，Linux 和 Unix 核心输入密码都是这样的，输入完直接回车就行了）</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo spctl --master-disable</span><br></pre></td></tr></table></figure>

<p><strong>如下图：</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509163936.png" alt="打开终端"></p>
<ul>
<li>然后再重新打开 <code>设置</code> - <code>安全性与隐私</code> ，你会发现 <code>任何来源</code> 选项又回来了！</li>
</ul>
<p><strong>如下图：</strong></p>
<p><img data-src="https://file.karise.cn/blog/20190509164000.png" alt="任何来源又有了"></p>
<ul>
<li>最后选中 <code>任何来源</code> 选项，然后那些个人开发者软件就可以正常打开了。</li>
</ul>
]]></content>
      <categories>
        <category>Mac 使用指南</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>macOS</tag>
        <tag>Mac 使用指南</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS 开发】使用 Fastlane 自动化打包并发布 iOS 项目</title>
    <url>/2017/11/09/iOS/201711091509/</url>
    <content><![CDATA[<blockquote>
<p><code>Fastlane</code> 是一个完全开源的项目，是一款为 <code>iOS</code> 和 <code>Android</code> 开发者提供的自动化构建工具，它可以帮助开发者将 <code>App</code> 打包、签名、测试、发布、信息整理、提交 <code>App Store</code> 等工作完整的连接起来，实现完全自动化的工作流，如果使用得当，可以显著的提高开发者的开发效率，这是 <a href="https://github.com/fastlane/fastlane">GitHub 地址</a> 和 <a href="https://docs.fastlane.tools/">官方文档</a> 。</p>
</blockquote>
<a id="more"></a>

<hr>
<p><strong>本文最终目的：</strong></p>
<ul>
<li><p>终端输入 <code>fastlane beta</code> 自动打包 <code>ad-hoc</code> 版本的 <code>ipa</code> 包并自动上传到 <code>蒲公英</code> 。</p>
</li>
<li><p>终端输入 <code>fastlane release</code> 自动打包 <code>app-store</code> 版本的 <code>ipa</code> 包并自动上传到 <code>iTunes Connect</code> 。</p>
</li>
</ul>
<h2 id="1-安装-Fastlane"><a href="#1-安装-Fastlane" class="headerlink" title="1. 安装 Fastlane"></a>1. 安装 Fastlane</h2><ul>
<li>检查 <code>Ruby</code> 版本，需要 <code>2.0</code> 及以上版本，并且需要将 <code>gem</code> 的 <code>source</code> 改为 <code>https://gems.ruby-china.org/</code> ，在终端输入以下命令。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">// 查看 Ruby 版本</span><br><span class="line">ruby -v</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">// 查看 gem 的<span class="built_in">source</span></span><br><span class="line">gem sources</span><br></pre></td></tr></table></figure>

<ul>
<li>检查 <code>Xcode</code> 命令行工具是否安装，在终端输入以下命令，如果安装过会有提示，如果没装过就会自动开始安装。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure>

<ul>
<li>开始安装 <code>Fastlane</code> ，在终端输入以下命令。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo gem install fastlane --verbose</span><br></pre></td></tr></table></figure>

<ul>
<li>如果安装时出现错误无法安装，就使用以下命令安装。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo gem install -n /usr/<span class="built_in">local</span>/bin fastlane</span><br></pre></td></tr></table></figure>

<ul>
<li>安装完成后可以输入以下命令查看版本来验证是否安装成功。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">fastlane --version</span><br></pre></td></tr></table></figure>

<h2 id="2-安装蒲公英的-Fastlane-插件"><a href="#2-安装蒲公英的-Fastlane-插件" class="headerlink" title="2. 安装蒲公英的 Fastlane 插件"></a>2. 安装蒲公英的 Fastlane 插件</h2><ul>
<li><code>fastlane </code> 安装完成以后，在终端输入以下命令安装 <code>蒲公英</code> 插件。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">fastlane add_plugin pgyer</span><br></pre></td></tr></table></figure>

<ul>
<li>最后出现 <code>Successfully installed plugins</code> 表示安装完成。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509163520.png" alt="插件安装"></p>
<ul>
<li>安装完成以后，会在系统根目录生成 <code>Gemfile</code> 和 <code>Gemfile.lock</code> 这两个文件，这两个文件不要删掉，不然插件就得重装了。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509163535.png" alt="Gemfile"></p>
<h2 id="3-修改项目配置"><a href="#3-修改项目配置" class="headerlink" title="3. 修改项目配置"></a>3. 修改项目配置</h2><ul>
<li>用 <code>Xcode</code> 打开你的项目，然后打开 <code>Manage Schemes...</code> 。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509163546.png" alt="Xcode"></p>
<ul>
<li>然后将工程的 <code>Scheme</code> 后面的 <code>Shared</code> 给勾上。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509163556.png" alt="Xcode"></p>
<ul>
<li>需要将这个改动上传到 <code>git</code> 仓库，不要忽略掉这个文件，提交的文件路径信息如下，如果你改完没有提示有需要改动的提交，那就看一下 <code>.gitignore</code> 里面是不是忽略掉了。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509163608.png" alt="commit"></p>
<ul>
<li>做这个改动的原因是，后面可能会用到 <code>Jenkins</code> + <code>Fastlane</code> 做持续集成，如果没有这个文件，<code>Jenkins</code> 使用 <code>fastlane</code> 编译项目时会提示 <code>No schemes found in Xcode project or workspace</code> ，所以最好先加上。</li>
</ul>
<h2 id="4-初始化-Fastlane-配置"><a href="#4-初始化-Fastlane-配置" class="headerlink" title="4. 初始化 Fastlane 配置"></a>4. 初始化 Fastlane 配置</h2><ul>
<li>打开终端，<code>cd</code> 到你项目工程的根目录（<code>xcodeproj</code> 的同级目录），输入以下命令：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">fastlane init</span><br></pre></td></tr></table></figure>

<ul>
<li><p>初始化过程中会让你输入苹果开发者账号的账号和密码，这个信息会存储在钥匙串中，后续使用无需再输入密码。</p>
</li>
<li><p>初始化过程中还会检测当前项目的 <code>App Identifier</code> 是否已经在 <code>Apple Developer</code> 中，还会检测当前 <code>App</code> 是否已经在 <code>iTunes Connect</code> 中，如果都满足的话，过程应该是比较顺利的。</p>
</li>
<li><p>初始化完成之后会在你项目工程的目录下生成一个 <code>fastlane</code> 文件夹，里面是 <code>Fastlane</code> 的一些配置文件。其中 <code>Appfile</code> 里面存放了 <code>App</code> 的基本信息包括 <code>App_Identifier</code> 、<code>AppID</code> 、<code>Team_ID</code> 等。<code>Fastfile</code> 是最重要的一个文件，在这个文件里面可以编写和定制我们打包脚本的一个文件，所有自定义的功能都写在这里。</p>
</li>
</ul>
<h2 id="5-编辑-Fastlane-脚本文件"><a href="#5-编辑-Fastlane-脚本文件" class="headerlink" title="5. 编辑 Fastlane 脚本文件"></a>5. 编辑 Fastlane 脚本文件</h2><ul>
<li><p>首先找到工程目录下 <code>fastlane</code> 文件夹下的 <code>Fastlane</code> 文件，如果想要了解其中内容的含义可以自己去官方文档查一下，这里就不解释了。</p>
</li>
<li><p>使用编辑器打开 <code>Fastlane</code> 文件，将所有内容删除替换为以下内容。</p>
</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">fastlane_version</span> <span class="string">&quot;xxx&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">default_platform</span> :<span class="string">ios</span></span><br><span class="line"></span><br><span class="line"><span class="attr">platform</span> :<span class="string">ios do</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">desc</span> <span class="string">&quot;以 ad-hoc 方式打包并上传到蒲公英&quot;</span></span><br><span class="line">  <span class="attr">lane</span> :<span class="string">beta do</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">puts</span> <span class="string">&quot;自动生成 Provisioning Profiles 文件&quot;</span></span><br><span class="line">    <span class="attr">sigh(</span></span><br><span class="line"><span class="comment">      # 指定输出的文件夹地址</span></span><br><span class="line">      <span class="attr">output_path</span>: <span class="string">&quot;./archive/sign&quot;,</span></span><br><span class="line"><span class="comment">      # 是否为 AdHoc 证书（设为 false 或不写默认为 AppStore 证书）</span></span><br><span class="line">      <span class="attr">adhoc</span>: <span class="string">true</span></span><br><span class="line">    <span class="attr">)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">puts</span> <span class="string">&quot;以 ad-hoc 方式打包&quot;</span></span><br><span class="line">    <span class="attr">gym(</span></span><br><span class="line"><span class="comment">      # 指定打包所使用的输出方式 (可选: app-store, package, ad-hoc, enterprise, development)</span></span><br><span class="line">      <span class="attr">export_method</span>: <span class="string">&quot;ad-hoc&quot;,</span></span><br><span class="line"><span class="comment">      # 指定项目的 scheme 名称</span></span><br><span class="line">      <span class="attr">scheme</span>: <span class="string">&quot;xxx&quot;,</span></span><br><span class="line"><span class="comment">      # 指定输出的文件夹地址</span></span><br><span class="line">      <span class="attr">output_directory</span>: <span class="string">&quot;./archive/beta/&quot; + Time.new.strftime(&quot;%Y-%m-%d-%H:%M:%S&quot;),</span></span><br><span class="line"><span class="comment">      # 指定打包方式 (可选: Release, Debug)</span></span><br><span class="line">      <span class="attr">configuration</span>: <span class="string">&quot;Release&quot;</span></span><br><span class="line">    <span class="attr">)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">puts</span> <span class="string">&quot;上传 ipa 包到蒲公英&quot;</span></span><br><span class="line">    <span class="attr">pgyer(</span></span><br><span class="line"><span class="comment">      # 蒲公英 API KEY</span></span><br><span class="line">      <span class="attr">api_key</span>: <span class="string">&quot;xxx&quot;,</span></span><br><span class="line"><span class="comment">      # 蒲公英 USER KEY</span></span><br><span class="line">      <span class="attr">user_key</span>: <span class="string">&quot;xxx&quot;</span></span><br><span class="line">    <span class="attr">)</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">end</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">desc</span> <span class="string">&quot;以 app-store 方式打包并上传到 iTunes Connect&quot;</span></span><br><span class="line">  <span class="attr">lane</span> :<span class="string">release do</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">puts</span> <span class="string">&quot;自动生成 Provisioning Profiles 文件&quot;</span></span><br><span class="line">    <span class="attr">sigh(</span></span><br><span class="line"><span class="comment">      # 指定输出的文件夹地址</span></span><br><span class="line">      <span class="attr">output_path</span>: <span class="string">&quot;./archive/sign&quot;</span></span><br><span class="line">    <span class="attr">)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">puts</span> <span class="string">&quot;以 app-store 方式打包&quot;</span></span><br><span class="line">    <span class="attr">gym(</span></span><br><span class="line"><span class="comment">      # 指定打包所使用的输出方式 (可选: app-store, package, ad-hoc, enterprise, development)</span></span><br><span class="line">      <span class="attr">export_method</span>: <span class="string">&quot;app-store&quot;,</span></span><br><span class="line"><span class="comment">      # 指定项目的 scheme 名称</span></span><br><span class="line">      <span class="attr">scheme</span>: <span class="string">&quot;xxx&quot;,</span></span><br><span class="line"><span class="comment">      # 指定输出的文件夹地址</span></span><br><span class="line">      <span class="attr">output_directory</span>: <span class="string">&quot;./archive/release/&quot; + Time.new.strftime(&quot;%Y-%m-%d-%H:%M:%S&quot;),</span></span><br><span class="line"><span class="comment">      # 指定打包方式 (可选: Release, Debug)</span></span><br><span class="line">      <span class="attr">configuration</span>: <span class="string">&quot;Release&quot;</span></span><br><span class="line">    <span class="attr">)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">puts</span> <span class="string">&quot;上传 ipa 包到 iTunes Connect&quot;</span></span><br><span class="line">    <span class="attr">deliver(</span></span><br><span class="line"><span class="comment">      # 跳过截图上传</span></span><br><span class="line">      <span class="attr">skip_screenshots</span>: <span class="string">true,</span></span><br><span class="line"><span class="comment">      # 跳过元数据上传</span></span><br><span class="line">      <span class="attr">skip_metadata</span>: <span class="string">true,</span></span><br><span class="line"><span class="comment">      # 跳过审核直接上传</span></span><br><span class="line">      <span class="attr">force</span>: <span class="string">true</span></span><br><span class="line">    <span class="attr">)</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">end</span></span><br><span class="line"></span><br><span class="line"><span class="attr">end</span></span><br></pre></td></tr></table></figure>

<ul>
<li>需要更改的地方我已经用 <code>xxx</code> 标注出来了，按照说明更改即可，更改完成后保存文件。</li>
</ul>
<h2 id="6-开始自动打包并发布"><a href="#6-开始自动打包并发布" class="headerlink" title="6. 开始自动打包并发布"></a>6. 开始自动打包并发布</h2><ul>
<li><p>打开终端，<code>cd</code> 到你项目工程的根目录（<code>xcodeproj</code> 的同级目录）。</p>
</li>
<li><p>输入以下命令，即可开始自动打包并上传到 <code>蒲公英</code> 。</p>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">fastlane beta</span><br></pre></td></tr></table></figure>

<ul>
<li>输入以下命令，即可开始自动打包并上传到 <code>iTunes Connect</code> 。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">fastlane release</span><br></pre></td></tr></table></figure>

<ul>
<li><p>打包的 <code>.ipa</code> 包和 <code>dSYM</code> 文件，以及生成的 <code>Provisioning Profiles</code> 都在工程目录下的 <code>archive</code> 文件夹内，看上面的输出地址就知道了。</p>
</li>
<li><p>最后出现一个 <code>successfully 🎉</code> 就表示成功了，有错误终端也会有提示，按照提示继续修改配置就行了。</p>
</li>
</ul>
<blockquote>
<p><code>Fastlane</code> 还能实现很多自动化的功能，感兴趣的自己去了解一下吧，这里有篇文章写的很全面可以看一下： <a href="https://whlsxl.github.io/fastlane1/">小团队的自动化发布－Fastlane带来的全自动化发布</a> 。</p>
</blockquote>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
        <tag>Fastlane</tag>
        <tag>持续集成</tag>
        <tag>自动打包</tag>
      </tags>
  </entry>
  <entry>
    <title>mac 使用 BootCamp 安装双系统时出现磁盘分区错误的解决方法.md</title>
    <url>/2018/02/11/Mac/201802111604/</url>
    <content><![CDATA[<blockquote>
<p>最近在使用 <code>BootCamp</code> 安装 <code>Windows</code> 双系统时，突然出现 <code>您的磁盘未能分区</code> 的错误，以前一直好好的，突然就报错了，我的系统版本是 <code>macOS High Sierra 10.13.3</code> ，经过一番搜索终于解决了，下面记录一下解决方法。</p>
</blockquote>
<a id="more"></a>

<hr>
<h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><ul>
<li>如果开启了磁盘加密，请到 <code>设置</code> - <code>安全性与隐私</code> - <code>文件保险箱</code> 关闭加密（时间较长，耐心等待）</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509172022.jpg"></p>
<ul>
<li>若没有加密，重启电脑，开机时按住 <code>command + R</code> 进入恢复模式，选择磁盘工具，找到你的 <code>macOS</code> 所在硬盘分区，点击急救，运行完成之后重启，多试几次。</li>
</ul>
<p><img data-src="https://file.karise.cn/blog/20190509172033.jpg"></p>
<ul>
<li>若上述两种方法都不能解决问题，那就是 <code>Time Machine（时间机器）</code> 的本地快照造成的问题，将 <code>Time Machine</code> 的自动备份关闭，然后打开终端输入以下命令，就能够删除存储在本地磁盘上本地快照，一般本地快照会占用本地磁盘好几十个G的容量，也能够解决磁盘容量被无故占用的问题。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tmutil thinlocalsnapshots / 9999999999999999</span><br></pre></td></tr></table></figure>

<ul>
<li>打开终端输入以下命令能够开启和关闭本地快照功能。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">// 关闭本地快照</span><br><span class="line">sudo tmutil disablelocal</span><br><span class="line"></span><br><span class="line">// 开启本地快照</span><br><span class="line">sudo tmutil enablelocal</span><br></pre></td></tr></table></figure>

<ul>
<li>如果上述方法都没有效果的话，那就重装 <code>mac</code> 系统把（节哀）。</li>
</ul>
]]></content>
      <categories>
        <category>Mac 使用指南</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>mac</tag>
        <tag>BootCamp</tag>
        <tag>双系统</tag>
        <tag>分区错误</tag>
      </tags>
  </entry>
  <entry>
    <title>mac 上配置 aria2 加快下载速度的方法</title>
    <url>/2018/09/18/Mac/201809181727/</url>
    <content><![CDATA[<blockquote>
<p><code>mac</code> 用户肯定都受够了各种下载限速，浏览器自带的下载器极为蛋疼，花点时间来配置 <code>aria2</code>，结合 <code>Chrome</code> 插件，一次配置终身受益。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="aria2-是什么？"><a href="#aria2-是什么？" class="headerlink" title="aria2 是什么？"></a>aria2 是什么？</h2><p><code>aria2</code> 是一款支持多种协议的轻量级命令行下载工具。有以下特性：</p>
<ul>
<li><p>多线程连线：<code>aria2</code> 会自动从多个线程下载文件，并充分利用你的带宽。</p>
</li>
<li><p>轻量：运行时不会占用过多资源，根据官方介绍，内存占用通常在 <code>4MB~9MB</code> ，使用 <code>BitTorrent</code> 协议，下行速度 <code>2.8MB/s</code> 时 <code>CPU</code> 占用率约 <code>6%</code> 。</p>
</li>
<li><p>全功能 <code>BitTorrent</code> 客户端。</p>
</li>
<li><p>支持 <code>RPC</code> 界面远程控制。</p>
</li>
</ul>
<h2 id="1-安装-Homebrew"><a href="#1-安装-Homebrew" class="headerlink" title="1. 安装 Homebrew"></a>1. 安装 Homebrew</h2><p>由于是使用 <code>Homebrew</code> 方式安装，所以需要先安装 <code>Homebrew</code> ，已经装过了可以跳过这一步，终端输入以下命令安装。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-安装-aria2"><a href="#2-安装-aria2" class="headerlink" title="2. 安装 aria2"></a>2. 安装 aria2</h2><p>在终端输入以下命令安装。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">brew install aria2</span><br></pre></td></tr></table></figure>

<h2 id="3-设置配置文件"><a href="#3-设置配置文件" class="headerlink" title="3. 设置配置文件"></a>3. 设置配置文件</h2><p><code>aria2</code> 提供两种方式使用，一种是直接命令行模式下载，不推荐使用这种方法，推荐使用另外一种 <code>RPC</code> 模式，这种方式 <code>aria2</code> 启动之后只会安静的等待下载请求，下载完成后也只会安静的驻留后台不会自动退出。而使用 <code>RPC</code> 模式推荐做一个配置文件方便使用。</p>
<p>我们把配置文件放在 <code>~/.aria2</code> 下，终端依次输入以下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir .aria2</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> .aria2</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">touch aria2.conf</span><br></pre></td></tr></table></figure>

<p>接着打开 <code>Finder</code>，利用 <code>shift + command + G</code> 进入路径：<code>~/.aria2/aria2.conf</code>，用文本编辑器打开 <code>aria2.conf</code>，将 <a href="https://blog.icehoney.me/about">雪月秋水君</a> 提供的以下配置直接拷贝进去：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用户名</span></span><br><span class="line"><span class="comment">#rpc-user=user</span></span><br><span class="line"><span class="comment">#密码</span></span><br><span class="line"><span class="comment">#rpc-passwd=passwd</span></span><br><span class="line"><span class="comment">#上面的认证方式不建议使用,建议使用下面的token方式</span></span><br><span class="line"><span class="comment">#设置加密的密钥</span></span><br><span class="line"><span class="comment">#rpc-secret=token</span></span><br><span class="line"><span class="comment">#允许rpc</span></span><br><span class="line"><span class="meta">enable-rpc</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#允许所有来源, web界面跨域权限需要</span></span><br><span class="line"><span class="meta">rpc-allow-origin-all</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#允许外部访问，false的话只监听本地端口</span></span><br><span class="line"><span class="meta">rpc-listen-all</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#RPC端口, 仅当默认端口被占用时修改</span></span><br><span class="line"><span class="comment">#rpc-listen-port=6800</span></span><br><span class="line"><span class="comment">#最大同时下载数(任务数), 路由建议值: 3</span></span><br><span class="line"><span class="meta">max-concurrent-downloads</span>=<span class="string">5</span></span><br><span class="line"><span class="comment">#断点续传</span></span><br><span class="line"><span class="attr">continue</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#同服务器连接数</span></span><br><span class="line"><span class="meta">max-connection-per-server</span>=<span class="string">5</span></span><br><span class="line"><span class="comment">#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要</span></span><br><span class="line"><span class="meta">min-split-size</span>=<span class="string">10M</span></span><br><span class="line"><span class="comment">#单文件最大线程数, 路由建议值: 5</span></span><br><span class="line"><span class="attr">split</span>=<span class="string">10</span></span><br><span class="line"><span class="comment">#下载速度限制</span></span><br><span class="line"><span class="meta">max-overall-download-limit</span>=<span class="string">0</span></span><br><span class="line"><span class="comment">#单文件速度限制</span></span><br><span class="line"><span class="meta">max-download-limit</span>=<span class="string">0</span></span><br><span class="line"><span class="comment">#上传速度限制</span></span><br><span class="line"><span class="meta">max-overall-upload-limit</span>=<span class="string">0</span></span><br><span class="line"><span class="comment">#单文件速度限制</span></span><br><span class="line"><span class="meta">max-upload-limit</span>=<span class="string">0</span></span><br><span class="line"><span class="comment">#断开速度过慢的连接</span></span><br><span class="line"><span class="comment">#lowest-speed-limit=0</span></span><br><span class="line"><span class="comment">#验证用，需要1.16.1之后的release版本</span></span><br><span class="line"><span class="comment">#referer=*</span></span><br><span class="line"><span class="comment">#文件保存路径, 默认为当前启动位置</span></span><br><span class="line"><span class="attr">dir</span>=<span class="string">/Users/xxx/Downloads</span></span><br><span class="line"><span class="comment">#文件缓存, 使用内置的文件缓存, 如果你不相信Linux内核文件缓存和磁盘内置缓存时使用, 需要1.16及以上版本</span></span><br><span class="line"><span class="comment">#disk-cache=0</span></span><br><span class="line"><span class="comment">#另一种Linux文件缓存方式, 使用前确保您使用的内核支持此选项, 需要1.15及以上版本(?)</span></span><br><span class="line"><span class="comment">#enable-mmap=true</span></span><br><span class="line"><span class="comment">#文件预分配, 能有效降低文件碎片, 提高磁盘性能. 缺点是预分配时间较长</span></span><br><span class="line"><span class="comment">#所需时间 none &lt; falloc ? trunc « prealloc, falloc和trunc需要文件系统和内核支持</span></span><br><span class="line"><span class="meta">file-allocation</span>=<span class="string">prealloc</span></span><br></pre></td></tr></table></figure>

<p>默认下载路径的 <code>/Users/xxx/Downloads</code> 可以改为任何你想要的绝对路径。此处写为 <code>Downloads</code> 目录，<code>xxx</code> 请自行替换成你的 <code>mac</code> 用户名，然后保存，退出编辑器。</p>
<h2 id="4-启动-RPC-模式"><a href="#4-启动-RPC-模式" class="headerlink" title="4. 启动 RPC 模式"></a>4. 启动 RPC 模式</h2><p>在终端输入以下命令启动 <code>RPC</code> 模式，将 <code>xxx</code> 替换成你的 <code>mac</code> 用户名。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">aria2c --conf-path=<span class="string">&quot;/Users/xxx/.aria2/aria2.conf&quot;</span> -D</span><br></pre></td></tr></table></figure>

<h2 id="5-开始使用"><a href="#5-开始使用" class="headerlink" title="5. 开始使用"></a>5. 开始使用</h2><p>下载 <code>chrome</code> 浏览器下载插件：<a href="https://github.com/jae-jae/Camtd">Camtd - Aria2下载管理器</a>, 下载完成后右键下载链接点击 <code>Send to Aria2</code> 即可下载，也支持拦截下载。</p>
<p><img data-src="https://file.karise.cn/blog/20190509172051.jpg"></p>
<p><img data-src="https://file.karise.cn/blog/20190509172102.jpg"></p>
<p>这个插件不满意的话，也可以搜索其他类似插件，但必须启动 <code>RPC</code> 模式才能够使用此类插件。</p>
<blockquote>
<p>本文部分内容参考自 <a href="https://sspai.com/post/32167">Mac 上使用百度网盘很烦躁？花点时间配置 aria2 吧</a> 。</p>
</blockquote>
]]></content>
      <categories>
        <category>Mac 使用指南</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>aria2</tag>
        <tag>下载</tag>
      </tags>
  </entry>
  <entry>
    <title>一条命令轻松解决 Mac 上「应用程序 “xxx” 不能打开」的问题</title>
    <url>/2019/02/18/Mac/201902181519/</url>
    <content><![CDATA[<blockquote>
<p>除了在 <code>Mac App Store</code> 下载应用之外，有时候我也会直接在一些网站上下载应用，而这就会出现一些稀奇古怪的问题，比如我下载的应用是经过压缩的打包文件，解压缩之后会发现软件打不开，会显示 <code>应用程序 “xxx” 不能打开</code>，下面即可以通过一条命令轻松解决这个问题。</p>
</blockquote>
<a id="more"></a>

<hr>
<p>显示的弹窗信息如下：</p>
<p><img data-src="https://file.karise.cn/blog/20190509172457.jpg"></p>
<p>其实这个错误主要是解压缩软件在解压文件时，破坏了应用里面可执行文件的权限造成的，当然修复起来也不复杂。</p>
<ul>
<li><p>首先在应用上点击右键，选择「显示包内容」：</p>
<p><img data-src="https://file.karise.cn/blog/20190509172507.jpg"></p>
</li>
<li><p>之后依次展开<code>Contents</code> - <code>MacOS</code>，找到对应文件夹下的文件，比如说截图中显示的 <code>StarCraft-II-Setup</code>。如果权限正确的话，该文件应该是一个 <code>Unix</code> 可执行的文件，而不是现在这种类型不明的文件。</p>
<p><img data-src="https://file.karise.cn/blog/20190509172518.jpg"></p>
</li>
<li><p>接下来打开终端，直接输入以下代码（注意 <code>+x</code> 前后都有空格）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x</span><br></pre></td></tr></table></figure>
</li>
<li><p>之后再将文件 <code>StarCraft-II-Setup</code> 拖入终端（为了输入完整的执行路径），完整的命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x &#x2F;Users&#x2F;liuxiaofeng&#x2F;Downloads&#x2F;StarCraft-II-Setup-CN.app&#x2F;Contents&#x2F;MacOS&#x2F;StarCraft-II-Setup</span><br></pre></td></tr></table></figure>

<p><img data-src="https://file.karise.cn/blog/20190509172530.jpg"></p>
</li>
<li><p>最后点击回车，这时候在访达中原本不明类型的文件现在变成了 Unix 可执行文件，图标也变成正常的了。</p>
<p><img data-src="https://file.karise.cn/blog/20190509172545.jpg"></p>
</li>
<li><p>重新打开下载的软件，你会发现下载的程序可以正常使用并执行了！</p>
<p><img data-src="https://file.karise.cn/blog/20190509172611.jpg"></p>
</li>
</ul>
<blockquote>
<p>本文参考自：<a href="https://sspai.com/post/52828">一条命令轻松解决 Mac 上「应用程序 “xxx” 不能打开」的问题 | 一日一技</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Mac 使用指南</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>应用程序</tag>
      </tags>
  </entry>
  <entry>
    <title>给 mac 手工安装 Windows 以解决 BootCamp 方式安装失败的问题</title>
    <url>/2023/02/28/Mac/202302281100/</url>
    <content><![CDATA[<blockquote>
<p>我的 MacBook Pro 2015 使用BootCamp能够正常安装 Win 10，但是我的 Mac Mini 2018 使用BootCamp安装 Win 10 的时候，重启就黑屏，怎么也加载不出 Windows 安装程序，重装 Mac 系统等各种方法都试过了，就是不行，所以无奈只能寻找手工安装 Windows 的方式，这是 <a href="https://plusnan.me/2018/12/14/install-windows-on-macbook-pro-2018/">参考文章</a> 。</p>
</blockquote>
<blockquote>
<p>实际上大多数 ISO 系统是可以借助 Boot Camp 安装的，可以去 <a href="https://msdn.itellyou.cn/">MSDN I Tell You</a> 多试几个版本，总有一个能用的，如果版本比较老，装好之后再去 Windows Update 里头做个升级就行了。</p>
</blockquote>
<a id="more"></a>

<h2 id="BootCamp-其他的坑"><a href="#BootCamp-其他的坑" class="headerlink" title="BootCamp 其他的坑"></a>BootCamp 其他的坑</h2><ul>
<li>用 Boot Camp 创建启动盘时会提示 “启动转换安装失败”、“拷贝 Windows 安装文件时出错”、“启动转换助理正在移除其创建的分区，请稍候”，因为 Windows 10 安装盘通常大于 4GB，FAT32 格式分区装不下，所以失败。</li>
<li>即使找到了小于 4GB 的安装盘，也不要继续用 Boot Camp 来进行安装。虽然重启之后能进入到 Windows 安装程序中，也能正常地下一步下一步，但是只要到再努力一小下就会成功的时刻，安装程序就会蹦出 “Windows 无法更新计算机的启动配置，安装无法继续”，然后系统开始自动回滚，结果失败。</li>
<li>上面的问题我自己也遇到过，不过也解决了，这里就不赘述了，这里只说一下手工安装的步骤。</li>
</ul>
<h2 id="手工安装-Windows-操作步骤"><a href="#手工安装-Windows-操作步骤" class="headerlink" title="手工安装 Windows 操作步骤"></a>手工安装 Windows 操作步骤</h2><ol>
<li>做好以下准备：<ul>
<li>U 盘：注意文件系统要 FAT32 或者 ExFat 的，FAT32 有4G的限制，ExFat 没限制所以我的U盘是 ExFat 格式的，不知道不同版本有没有限制，如果你用 ExFat 不行的话就试下 FAT32 吧。</li>
<li>有线键盘、有线鼠标（至少要预备个有线鼠标，因为 Windows 安装程序下没法连接无线的设备）</li>
<li>下载 Windows 10 64 位安装盘（可以去 <a href="http://msdn.itellyou.cn/">msdn.itellyou.cn</a>下载），将安装盘映像当作压缩包解压到 U 盘上 —— 因为 MacBook 也是 EFI 启动，所以解压就足够了，不需要特意找刻录软件去刻录。</li>
<li>给 Windows 多划些空间。现代游戏动不动就几十个 G，而 Windows 系统本身再占三四十 G，不划到 100GB 根本不够用。</li>
</ul>
</li>
<li>按住 Command+R 开机，进入 Recovery 模式，完成以下操作：<ul>
<li><a href="https://support.apple.com/zh-cn/guide/disk-utility/dskutl14027/mac">在磁盘工具给 Windows 分区、格式化</a>。注意两点，第一是记住磁盘容量以免在安装时错误地格式化，第二是尽量把容量计算好，因为调整容量非常麻烦，而且很可能要删分区。</li>
<li><a href="https://support.apple.com/zh-cn/HT208330">关闭安全启动</a></li>
</ul>
</li>
<li>回到 macOS，启动 BootCamp（新版本叫做 “启动转换助理”），点击菜单栏 “操作” 中的 “下载 Windows 支持软件”，下载完成后相关文件会放到根目录中，把它复制到 U 盘根目录中，这一步不要漏掉，否则后面安装时找不到硬盘。</li>
<li>插上 U 盘，重启电脑，启动时按住 Option 键，从 U 盘启动。</li>
<li>进入 Windows 安装程序，把事先预备好的有线键盘和鼠标接上，如果能操作，那么就可以按正常步骤安装 Windows 了，若在选择分区时提示没有硬盘或分区，可以点击 “加载驱动程序” 按钮，找到事先在 macOS 系统里面下载的支持软件，安装 SSD 驱动，使 Windows 安装程序能够发现分区。</li>
<li>安装成功后，进入 Windows 系统，找到 U 盘里的 BootCamp 支持软件，运行 setup 安装程序，安装成功后重启。</li>
</ol>
<p>以这种方式进行安装，除了有点麻烦以及不能在 macOS 的 Boot Camp 界面进行管理（即删除 Windows）以外，其他基本上没什么区别，如果要删除 Windows 的话，就重新进入 macOS 的磁盘工具把 Windows 的分区抹掉就行了。</p>
<h2 id="调整分区容量"><a href="#调整分区容量" class="headerlink" title="调整分区容量"></a>调整分区容量</h2><p>一旦 Windows 系统用起来了，调整容量将是极其麻烦的事情。如果非扩容不可，建议先备份数据，然后删掉 Windows 分区，全部重来。</p>
<p>但是，如果 Mac 分区剩余空间比 Windows 系统盘大，那么还可以以一种麻烦的方式完成扩容：将 Windows 系统盘备份到映像，删除 Windows 盘并重新分区，然后恢复备份，修正分区表。如果操作成功，那么就不需要重装系统和各软件，也不需要再调系统设置了。</p>
<p>注意，操作有风险！如果不熟悉装机以及 Linux/Unix 操作，请不要继续，以免造成系统损坏或数据丢失！</p>
<p>建议在操作时使各分区容量不相同，而且进行每一步破坏性操作之前确认目标分区容量，以避免误操作。</p>
<p>按以下步骤操作：</p>
<ol>
<li>准备工作：<ul>
<li>Windows 安装 U 盘，其中已经预备好 Boot Camp 的 “Windows 支持软件”。</li>
<li>转接线</li>
<li>USB 键盘和鼠标（这次要敲命令所以一定要准备好键盘）</li>
</ul>
</li>
<li>按住 Command+R 开机，进入 Recovery 模式。</li>
<li>进入磁盘工具，确认 Windows 安装盘的位置（例如 /dev/disk0s2）以及 Mac 系统盘的名称（例如 Macintosh HD）。如果还是拿不准的话，可以在终端里用 “diskutil info /dev/disk0s2” 这种命令来确认。</li>
<li>退出磁盘工具，进入终端。假如 Mac 系统盘叫做 Macintosh HD，Windows 系统盘是 /dev/disk0s2，那么需要输入以下命令进行备份：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd &quot;/Volumes/Macintosh HD&quot;</span><br><span class="line">dd if=/dev/disk0s2 of=backup.img bs=1m</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>完成后重新进入磁盘工具，删除 Windows 分区，重新调整分区，不要格式化。Windows 分区格式化工作交给 Windows 来做。</li>
<li>重启，从 U 盘启动 Windows 安装程序，接上鼠标，在 Windows 安装程序界面上进行格式化。</li>
<li>回到 Mac 的 Recovery 模式，确认新分区的位置是 disk 几 s 几（例如 disk0s4）。</li>
<li>重新进入终端，恢复映像：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd &quot;/Volumes/Macintosh HD&quot;</span><br><span class="line">dd if=backup.img of=/dev/disk0s4 bs=1m</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>这时候 Windows 应该可以重新进入了。但是，dd 并非那种专业 Windows 分区备份还原软件，所以 Windows 分区的容量和剩余空间还是错的，需要修正。再次用 Windows 安装盘启动，接上键盘和鼠标，这次按 Shift+F10 进入命令提示符，然后输入 diskpart，进入分区工具。</li>
<li>在 diskpart 里输入以下命令（注意命令中的 “0” 和 “4” 要根据实际情况填写）：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">list disk</span><br><span class="line">sel disk 0</span><br><span class="line">list volume</span><br><span class="line">sel volume 4</span><br><span class="line">extend</span><br></pre></td></tr></table></figure>

<ol start="11">
<li>检查两个系统能否正常启动。如果没问题就可以删掉苹果系统里的 /backup.img 了。</li>
</ol>
]]></content>
      <categories>
        <category>Mac 使用指南</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>mac 更改所有文件夹显示选项的方法</title>
    <url>/2018/04/12/Mac/201804121027/</url>
    <content><![CDATA[<blockquote>
<p><code>mac</code> 的 <code>Finder</code> 中文件夹的显示选项只在当前目录生效，每次新目录都得重新选择显示选项，强迫症表示非常不爽，下面是如何一次性更改所有文件夹显示选项的方法。</p>
</blockquote>
<a id="more"></a>

<hr>
<ul>
<li><p>打开 <code>Finder</code>，使劲点击 <code>⌘ + ↑</code> 数次，直到没反应可查看到磁盘的图标为止。</p>
</li>
<li><p>进入磁盘，右键空白处打开 <code>查看显示选项</code> ，在显示选项内调整好自己想要的效果后点击下方 <code>用作默认</code> 。</p>
</li>
<li><p>打开终端界面输入以下命令，回车后根据提示输入你的账户密码再回车等待即可。</p>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo find / -name .DS_Store -<span class="built_in">exec</span> rm &#123;&#125; +</span><br></pre></td></tr></table></figure>

<ul>
<li>完成后，点击菜单栏左上角的小苹果图标选择 <code>强制退出</code> ，在菜单内选择 <code>Finder</code> 后点击 <code>重新开启</code> 完成。</li>
</ul>
]]></content>
      <categories>
        <category>Mac 使用指南</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>文件夹显示选项</tag>
      </tags>
  </entry>
  <entry>
    <title>mac 关闭/开启更新红点</title>
    <url>/2021/01/27/Mac/202101271553/</url>
    <content><![CDATA[<blockquote>
<p>使用系统偏好设置时，右上角经常出现一个更新提示，不想更新，也不想看到这个红点，所以使用下面方法关闭/开启更新红点。</p>
</blockquote>
<a id="more"></a>

<p>更新提示的设置在文件 <code>~/Library/Preferences/com.apple.systempreferences.plist</code> 中，下文我们使用 <code>defaults</code> 命令读写修改这个文件 <code>AttentionPrefBundleIDs</code> 键的值。</p>
<p><img data-src="https://file.karise.cn/blog/20210127154845.png"></p>
<h2 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ defaults write com.apple.systempreferences AttentionPrefBundleIDs  -dict com.apple.preferences.softwareupdate 0</span><br><span class="line">$ killall -SIGTERM cfprefsd  <span class="comment"># 重启偏好设置进程</span></span><br><span class="line">$ killall Dock <span class="comment"># 重启 Dock</span></span><br></pre></td></tr></table></figure>

<p>这时 <code>Dock</code> 栏上 偏好设置图标右上角的红圈不会显示了，如果偏好设置面板如果是打开状态，软件更新 <code>icon</code> 上还会继续显示数字，重启偏好设置应用后，软件更新 <code>icon</code> 右上角只会显示圆圈，不显示数字。</p>
<p><img data-src="https://file.karise.cn/blog/20210127155047.png"></p>
<h2 id="开启"><a href="#开启" class="headerlink" title="开启"></a>开启</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ defaults write com.apple.systempreferences AttentionPrefBundleIDs  -dict com.apple.preferences.softwareupdate 1</span><br><span class="line">$ killall -SIGTERM cfprefsd</span><br><span class="line">$ killall Dock</span><br></pre></td></tr></table></figure>

<p>以上操作不会马上显示更新的红点，或者在面板中显示了红色圆圈，但没有数字，可能是没有触发对新版本的检测，这时我们点击 软件更新 进入这个面板，等待加载新版本信息，再退出来，稍等一会儿儿，更新数字就会出现。</p>
]]></content>
      <categories>
        <category>Mac 使用指南</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
</search>
